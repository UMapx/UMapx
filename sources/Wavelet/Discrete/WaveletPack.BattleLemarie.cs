using UMapx.Core;

namespace UMapx.Wavelet
{
    /// <summary>
    /// Defines the discrete wavelet.
    /// <remarks>
    /// More information can be found on the website:
    /// https://en.wikipedia.org/wiki/Wavelet
    /// </remarks>
    /// </summary>
    public partial class WaveletPack
    {
        #region Battle-Lemarie wavelets
        /// <summary>
        /// Returns Battle-Lemarie wavelet (2).
        /// </summary>
        public static WaveletPack BL2
        {
            get
            {
                // Battle-Lemarie wavelet (2):
                return WaveletPack.Create(new float[]
                {
                    0, -0.0000867523000000f,-0.0001586010000000f,0.0003617810000000f,0.0006529220000000f,-0.0015570100000000f,-0.0027458800000000f,0.0070644200000000f,0.0120030000000000f,-0.0367309000000000f,-0.0488618000000000f,0.2809310000000000f,0.5781630000000000f,0.2809310000000000f,-0.0488618000000000f,-0.0367309000000000f,0.0120030000000000f,0.0070644200000000f,-0.0027458800000000f,-0.0015570100000000f,0.0006529220000000f,0.0003617810000000f,-0.0001586010000000f,-0.0000867523000000f
                }.Mul(MathF.Sqrt2));
            }
        }
        /// <summary>
        /// Returns Battle-Lemarie wavelet (4).
        /// </summary>
        public static WaveletPack BL4
        {
            get
            {
                // Battle-Lemarie wavelet (4):
                return WaveletPack.Create(new float[]
                {
                    0, 0.0001033070000000f,-0.0001642640000000f,-0.0002018180000000f,0.0003267490000000f,0.0003959460000000f,-0.0006556200000000f,-0.0007804680000000f,0.0013308600000000f,0.0015462400000000f,-0.0027452900000000f,-0.0030786300000000f,0.0057993200000000f,0.0061414300000000f,-0.0127154000000000f,-0.0121455000000000f,0.0297468000000000f,0.0226846000000000f,-0.0778079000000000f,-0.0354980000000000f,0.3068300000000000f,0.5417360000000000f,0.3068300000000000f,-0.0354980000000000f,-0.0778079000000000f,0.0226846000000000f,0.0297468000000000f,-0.0121455000000000f,-0.0127154000000000f,0.0061414300000000f,0.0057993200000000f,-0.0030786300000000f,-0.0027452900000000f,0.0015462400000000f,0.0013308600000000f,-0.0007804680000000f,-0.0006556200000000f,0.0003959460000000f,0.0003267490000000f,-0.0002018180000000f,-0.0001642640000000f,0.0001033070000000f
                }.Mul(MathF.Sqrt2));
            }
        }
        /// <summary>
        /// Returns Battle-Lemarie wavelet (6).
        /// </summary>
        public static WaveletPack BL6
        {
            get
            {
                // Battle-Lemarie wavelet (6)
                return WaveletPack.Create(new float[]
                {
                    0, 0.0001011130000000f,0.0001107090000000f,-0.0001591680000000f,-0.0001726850000000f,0.0002514190000000f,0.0002698420000000f,-0.0003987590000000f,-0.0004224850000000f,0.0006355630000000f,0.0006628360000000f,-0.0010191200000000f,-0.0010420700000000f,0.0016465900000000f,0.0016413200000000f,-0.0026864600000000f,-0.0025881600000000f,0.0044400200000000f,0.0040788200000000f,-0.0074684800000000f,-0.0063988600000000f,0.0128754000000000f,0.0099063500000000f,-0.0229951000000000f,-0.0148537000000000f,0.0433544000000000f,0.0208414000000000f,-0.0914068000000000f,-0.0261771000000000f,0.3128690000000000f,0.5283740000000000f,0.3128690000000000f,-0.0261771000000000f,-0.0914068000000000f,0.0208414000000000f,0.0433544000000000f,-0.0148537000000000f,-0.0229951000000000f,0.0099063500000000f,0.0128754000000000f,-0.0063988600000000f,-0.0074684800000000f,0.0040788200000000f,0.0044400200000000f,-0.0025881600000000f,-0.0026864600000000f,0.0016413200000000f,0.0016465900000000f,-0.0010420700000000f,-0.0010191200000000f,0.0006628360000000f,0.0006355630000000f,-0.0004224850000000f,-0.0003987590000000f,0.0002698420000000f,0.0002514190000000f,-0.0001726850000000f,-0.0001591680000000f,0.0001107090000000f,0.0001011130000000f
                }.Mul(MathF.Sqrt2));
            }
        }
        #endregion
    }
}
