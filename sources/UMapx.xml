            The mean exists only for <c>d2 &gt; 2</c>.
            Otherwise, <see cref="F:System.Single.NaN"/> is returned.
            <para><b>Domain:</b> requires y[i] &gt; 0 for all i (log defined).</para>
            </remarks>
            <param name="x">Sample abscissas</param>
            <param name="y">Sample ordinates (must be &gt; 0)</param>
            <param name="power">Polynomial degree inside the exponent (≥ 1)</param>
            <param name="cf">Output: polynomial coefficients for log(y)</param>
            <param name="error">Output: fit error on original y</param>
            <param name="equation">Output: equation string “Exp( … )”</param>
            <returns>Fitted values ŷ at x</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Powr(System.Single[],System.Single[],System.Int32,System.Single[]@,System.Single@,System.String@)">
            <summary>
            Power-law–type least-squares fit (real): y(x) ≈ Exp( Σ_{k=0}^{power} c_k [Log(x)]^k ).
            </summary>
            <remarks>
            Applies log transforms to both variables: u = log(x), v = log(y), fits v ≈ Σ c_k u^k,
            then maps back as ŷ = exp( Σ c_k [log(x)]^k ).
            <para><b>Domain:</b> requires x[i] &gt; 0 and y[i] &gt; 0 for all i.</para>
            </remarks>
            <param name="x">Sample abscissas (must be &gt; 0)</param>
            <param name="y">Sample ordinates (must be &gt; 0)</param>
            <param name="power">Polynomial degree in log-log domain (≥ 1)</param>
            <param name="cf">Output: coefficients in the log-log domain</param>
            <param name="error">Output: fit error on original y</param>
            <param name="equation">Output: equation string using “Exp( … * Log(x)^k … )”</param>
            <returns>Fitted values ŷ at x</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Powr(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Int32,UMapx.Core.Complex32[]@,UMapx.Core.Complex32@,System.String@)">
            <summary>
            Power-law–type least-squares fit (real): y(x) ≈ Exp( Σ_{k=0}^{power} c_k [Log(x)]^k ).
            </summary>
            <remarks>
            Applies log transforms to both variables: u = log(x), v = log(y), fits v ≈ Σ c_k u^k,
            then maps back as ŷ = exp( Σ c_k [log(x)]^k ).
            <para><b>Domain:</b> requires x[i] &gt; 0 and y[i] &gt; 0 for all i.</para>
            </remarks>
            <param name="x">Sample abscissas (must be &gt; 0)</param>
            <param name="y">Sample ordinates (must be &gt; 0)</param>
            <param name="power">Polynomial degree in log-log domain (≥ 1)</param>
            <param name="cf">Output: coefficients in the log-log domain</param>
            <param name="error">Output: fit error on original y</param>
            <param name="equation">Output: equation string using “Exp( … * Log(x)^k … )”</param>
            <returns>Fitted values ŷ at x</returns>
        </member>
        <member name="T:UMapx.Analysis.ApproximationMethod">
            <summary>
            Approximation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.ApproximationMethod.Polynomial">
            <summary>
            Polynomial approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.ApproximationMethod.Logarithmic">
            <summary>
            Logarithmic approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.ApproximationMethod.Exponential">
            <summary>
            Exponential approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.ApproximationMethod.Power">
            <summary>
            Power approximation.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Differential">
            <summary>
            Defines a class that implements a solution to a differential equation.
            </summary>
            <remarks>
            This class is a solution to the Cauchy problem for the ordinary differential equation y' = F(x, y).
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Differential.#ctor(UMapx.Analysis.DifferentialMethod)">
            <summary>
            Initializes a class that implements the solution of a differential equation.
            </summary>
            <param name="method">Differentiation method</param>
        </member>
        <member name="P:UMapx.Analysis.Differential.MethodType">
            <summary>
            Gets or sets the differentiation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IMeshFloat,System.Single[],System.Single)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IMeshFloat,System.Single[],System.Single,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashforth method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashforth method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.GetCoefficients(System.Int32)">
            <summary>
            Returns an array of coefficient values for the Adams-Bashforth formula.
            </summary>
            <param name="order">Order</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Euler(UMapx.Core.IMeshFloat,System.Single[],System.Single)">
            <summary>
            Explicit Euler method (1st order) for y' = f(x, y) on a given grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. The returned array has length n = x.Length - 1
            and contains y at x[1], x[2], ..., x[n]. The initial value y0 (at x[0]) is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Monotone grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.RungeKutta2(UMapx.Core.IMeshFloat,System.Single[],System.Single)">
            <summary>
            Runge–Kutta method of order 2 (midpoint form) on grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.RungeKutta4(UMapx.Core.IMeshFloat,System.Single[],System.Single)">
            <summary>
            Classic Runge–Kutta method of order 4 (RK4) on grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Fehlberg(UMapx.Core.IMeshFloat,System.Single[],System.Single)">
            <summary>
            Fehlberg (RKF45 scheme without stepsize adaptation): fixed-step 4th-order estimate.
            </summary>
            <remarks>
            Uses the embedded Runge–Kutta-Fehlberg coefficients on a fixed step.
            No local error return or adaptive control. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Euler(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Explicit Euler method (1st order) for y' = f(x, y) on a given grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. The returned array has length n = x.Length - 1
            and contains y at x[1], x[2], ..., x[n]. The initial value y0 (at x[0]) is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Monotone grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.RungeKutta2(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Runge–Kutta method of order 2 (midpoint form) on grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.RungeKutta4(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Classic Runge–Kutta method of order 4 (RK4) on grid x.
            </summary>
            <remarks>
            Works with nonuniform grids. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Fehlberg(UMapx.Core.IMeshComplex32,UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Fehlberg (RKF45 scheme without stepsize adaptation): fixed-step 4th-order estimate.
            </summary>
            <remarks>
            Uses the embedded Runge–Kutta-Fehlberg coefficients on a fixed step.
            No local error return or adaptive control. Returns y at x[1..n]; y0 is not included.
            </remarks>
            <param name="f">Right-hand side f(x, y)</param>
            <param name="x">Grid points</param>
            <param name="y0">Initial value y(x[0])</param>
            <returns>Solution values at x[1..n]</returns>
        </member>
        <member name="T:UMapx.Analysis.DifferentialMethod">
            <summary>
            Differentiation method
            </summary>
        </member>
        <member name="F:UMapx.Analysis.DifferentialMethod.Euler">
            <summary>
            Euler method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.DifferentialMethod.RungeKutta2">
            <summary>
            The second-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.DifferentialMethod.RungeKutta4">
            <summary>
            Fourth-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.DifferentialMethod.Fehlberg">
            <summary>
            Felberg's method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Differentiation">
            <summary>
            Defines a class that implements numerical differentiation.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.#ctor(System.Int32)">
            <summary>
            Initializes a class that implements numerical differentiation.
            </summary>
            <param name="points">Number of interpolation points</param>
        </member>
        <member name="P:UMapx.Analysis.Differentiation.Points">
            <summary>
            Gets or sets the number of interpolation points.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.Compute(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of a derivative.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.Compute(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>
            Returns the value of a derivative.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.Compute(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of a derivative.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.Compute(UMapx.Core.Complex32[],System.Int32,System.Single,System.Int32)">
            <summary>
            Returns the value of a derivative.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentiation.GetCoefficients(System.Int32)">
            <summary>
            Returns the matrix of interpolation coefficients.
            </summary>
            <param name="points">Number of points</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Analysis.Integration">
            <summary>
            Defines a class that implements numerical integration.
            </summary>
            <remarks>
            This class is a solution to the problem of finding the value of the integral of the function F(x) within the values of a and b.
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Integration.#ctor(UMapx.Analysis.IntegrationMethod)">
            <summary>
            Initializes a class that implements numerical integration.
            </summary>
            <param name="method">Integration method</param>
        </member>
        <member name="P:UMapx.Analysis.Integration.MethodType">
            <summary>
            Gets or sets the integration method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Rect(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Left Riemann sum (rectangle rule) over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses left endpoints: x_i = a + i*h, h = (b - a)/n, i = 0..n-1.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals (rectangles)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Rect(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Left Riemann sum (rectangle rule) for tabulated samples on [a, b].
            </summary>
            <remarks>
            Expects samples y[i] ≈ f(a + i*h) at left endpoints with h = (b - a)/n for i = 0..n-1.
            Assumes y.Length ≥ n and n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="y">Sampled values y[i] at x_i = a + i*h (left endpoints)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals/samples used (left endpoints)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Midp(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Midpoint rule over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses midpoints: x_i = a + (i + 0.5) * h, h = (b - a)/n, i = 0..n-1.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Midp(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Midpoint rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n midpoint samples y[i] ≈ f(a + (i + 0.5)*h) with h = (b - a)/n.
            Approximates the integral using the midpoint rule. Requires n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="y">Sample values at subinterval midpoints</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals / midpoint samples</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Trap(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Trapezoidal rule over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses endpoints of each subinterval: x_i = a + i*h, h = (b - a)/n.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Trap(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Trapezoidal rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n samples y[0..n-1] on a uniform grid with h = (b - a)/(n - 1).
            Applies trapezoids between successive samples. Requires n ≥ 2. Complexity: O(n).
            </remarks>
            <param name="y">Samples y[i] at uniform points on [a, b]</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of samples (grid points)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Simp(UMapx.Core.IFloat,System.Single,System.Single,System.Int32)">
            <summary>
            Simpson's rule over a function f on [a, b] with n subintervals (n even preferred).
            </summary>
            <remarks>
            If n is even, applies Simpson 1/3 on all subintervals. If n is odd, applies a 3/8 segment
            over the first 3 subintervals and Simpson 1/3 over the remaining (n - 3).
            Requires n ≥ 2. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals (even for pure Simpson 1/3)</param>
            <returns>Approximation of ∫_a^b f(x) dx (NaN if n &lt; 2)</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Simp(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Simpson's rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n samples y[0..n-1] on a uniform grid with spacing h = (b - a)/(n - 1).
            If (n - 1) is even, applies Simpson 1/3 on the full range; otherwise uses a 3/8 segment
            on the first three subintervals and Simpson 1/3 on the remainder. Requires n ≥ 3.
            Complexity: O(n).
            </remarks>
            <param name="y">Samples y[i] at uniform points on [a, b]</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of samples (grid points)</param>
            <returns>Approximation of ∫_a^b f(x) dx (NaN if n &lt; 3)</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Romb(UMapx.Core.IFloat,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Romberg integration over a function f on [a, b] using Richardson extrapolation.
            </summary>
            <remarks>
            Builds the Romberg tableau R(k, j), k = 0..maxK-1, j = 0..k, starting from the trapezoidal
            rule and refining by halving the step each level. Stops early if successive diagonal entries
            satisfy a relative tolerance. Complexity per level grows geometrically.
            </remarks>
            <param name="f">Integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="maxK">Maximum number of Romberg levels (table size)</param>
            <param name="eps">Relative tolerance for early stopping</param>
            <returns>Romberg estimate of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Romb(System.Single[],System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Romberg integration for tabulated samples y on a uniform grid over [a, b].
            </summary>
            <remarks>
            Assumes y[i] ≈ f(a + i*h0) on a uniform grid with h0 = (b - a)/(N - 1), N = y.Length.
            Builds a Romberg tableau using composite trapezoidal rules with M = 2^k panels,
            which requires that (N - 1) is divisible by 2^k at each level. The number of usable
            levels is limited by the highest power of two dividing (N - 1) and by <paramref name="maxK"/>.
            Early exit occurs when successive diagonal entries satisfy the relative tolerance.
            </remarks>
            <param name="y">Samples y[0..N-1] on a uniform grid from a to b (inclusive)</param>
            <param name="a">Lower limit of integration (corresponds to y[0])</param>
            <param name="b">Upper limit of integration (corresponds to y[N-1])</param>
            <param name="maxK">Maximum number of Romberg levels to build (≥ 1)</param>
            <param name="eps">Relative tolerance for early stopping</param>
            <returns>Romberg estimate of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Rect(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Left Riemann sum (rectangle rule) over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses left endpoints: x_i = a + i*h, h = (b - a)/n, i = 0..n-1.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals (rectangles)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Rect(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Left Riemann sum (rectangle rule) for tabulated samples on [a, b].
            </summary>
            <remarks>
            Expects samples y[i] ≈ f(a + i*h) at left endpoints with h = (b - a)/n for i = 0..n-1.
            Assumes y.Length ≥ n and n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="y">Sampled values y[i] at x_i = a + i*h (left endpoints)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals/samples used (left endpoints)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Midp(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Midpoint rule over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses midpoints: x_i = a + (i + 0.5) * h, h = (b - a)/n, i = 0..n-1.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Midp(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Midpoint rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n midpoint samples y[i] ≈ f(a + (i + 0.5)*h) with h = (b - a)/n.
            Approximates the integral using the midpoint rule. Requires n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="y">Sample values at subinterval midpoints</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals / midpoint samples</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Trap(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Trapezoidal rule over a function f on [a, b] with n subintervals.
            </summary>
            <remarks>
            Uses endpoints of each subinterval: x_i = a + i*h, h = (b - a)/n.
            Assumes n ≥ 1. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Trap(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Trapezoidal rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n samples y[0..n-1] on a uniform grid with h = (b - a)/(n - 1).
            Applies trapezoids between successive samples. Requires n ≥ 2. Complexity: O(n).
            </remarks>
            <param name="y">Samples y[i] at uniform points on [a, b]</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of samples (grid points)</param>
            <returns>Approximation of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Simp(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Simpson's rule over a function f on [a, b] with n subintervals (n even preferred).
            </summary>
            <remarks>
            If n is even, applies Simpson 1/3 on all subintervals. If n is odd, applies a 3/8 segment
            over the first 3 subintervals and Simpson 1/3 over the remaining (n - 3).
            Requires n ≥ 2. Complexity: O(n).
            </remarks>
            <param name="f">Continuous integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of subintervals (even for pure Simpson 1/3)</param>
            <returns>Approximation of ∫_a^b f(x) dx (NaN if n &lt; 2)</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Simp(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Simpson's rule for tabulated samples on [a, b].
            </summary>
            <remarks>
            Assumes n samples y[0..n-1] on a uniform grid with spacing h = (b - a)/(n - 1).
            If (n - 1) is even, applies Simpson 1/3 on the full range; otherwise uses a 3/8 segment
            on the first three subintervals and Simpson 1/3 on the remainder. Requires n ≥ 3.
            Complexity: O(n).
            </remarks>
            <param name="y">Samples y[i] at uniform points on [a, b]</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="n">Number of samples (grid points)</param>
            <returns>Approximation of ∫_a^b f(x) dx (NaN if n &lt; 3)</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Romb(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32,System.Single)">
            <summary>
            Romberg integration over a function f on [a, b] using Richardson extrapolation.
            </summary>
            <remarks>
            Builds the Romberg tableau R(k, j), k = 0..maxK-1, j = 0..k, starting from the trapezoidal
            rule and refining by halving the step each level. Stops early if successive diagonal entries
            satisfy a relative tolerance. Complexity per level grows geometrically.
            </remarks>
            <param name="f">Integrand f(x)</param>
            <param name="a">Lower limit of integration</param>
            <param name="b">Upper limit of integration</param>
            <param name="maxK">Maximum number of Romberg levels (table size)</param>
            <param name="eps">Relative tolerance for early stopping</param>
            <returns>Romberg estimate of ∫_a^b f(x) dx</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Romb(UMapx.Core.Complex32[],UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32,System.Single)">
            <summary>
            Romberg integration for complex tabulated samples y on a uniform grid over [a, b].
            </summary>
            <remarks>
            Same assumptions as the real-valued overload: y[i] ≈ f(a + i*h0), uniform grid,
            and (N - 1) must be divisible by 2^k for each level k to be usable.
            Early exit uses a relative tolerance based on complex magnitude.
            </remarks>
            <param name="y">Complex samples y[0..N-1] on a uniform grid from a to b</param>
            <param name="a">Lower limit (complex), corresponds to y[0]</param>
            <param name="b">Upper limit (complex), corresponds to y[N-1]</param>
            <param name="maxK">Maximum number of Romberg levels (≥ 1)</param>
            <param name="eps">Relative tolerance for early stopping</param>
            <returns>Romberg estimate of ∫_a^b f(x) dx</returns>
        </member>
        <member name="T:UMapx.Analysis.IntegrationMethod">
            <summary>
            Integration method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.IntegrationMethod.Rectangle">
            <summary>
            Rectangle method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.IntegrationMethod.Midpoint">
            <summary>
            Midpoint method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.IntegrationMethod.Trapezoidal">
            <summary>
            Trapezoidal method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.IntegrationMethod.Simpson">
            <summary>
            Simpson method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.IntegrationMethod.Romberg">
            <summary>
            Romberg method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Interpolation">
            <summary>
            Defines a class that implements interpolation.
            </summary>
            <remarks>
            This class is a solution to the problem of finding an intermediate value of the function F(x).
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.#ctor(UMapx.Analysis.InterpolationMethod)">
            <summary>
            Initializes a class that implements interpolation.
            </summary>
            <param name="method">Interpolation method</param>
        </member>
        <member name="P:UMapx.Analysis.Interpolation.MethodType">
            <summary>
            Gets or sets the interpolation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Single[],System.Single[],System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <remarks>
            In this case, only bilinear interpolation is used.
            </remarks>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="z">Function matrix</param>
            <param name="xl">The value of the first argument to calculate</param>
            <param name="yl">The value of the second argument to calculate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Single[],System.Single[],System.Single)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Linear(System.Single[],System.Single[],System.Single)">
            <summary>
            Piecewise-linear interpolation on a sorted 1D grid using binary search.
            </summary>
            <remarks>
            - Expects strictly increasing <paramref name="x"/> with the same length as <paramref name="y"/>.<br/>
            - Returns endpoint values for out-of-range <paramref name="xl"/> (clamped extrapolation).<br/>
            - Time complexity: O(log n) due to binary search.
            </remarks>
            <param name="x">Sorted grid nodes x[0..n-1], strictly increasing</param>
            <param name="y">Function samples y[i] = f(x[i]) of the same length as x</param>
            <param name="xl">Query point</param>
            <returns>Interpolated value at xl (clamped to the nearest endpoint if outside [x0, x_{n-1}])</returns>
            <exception cref="T:System.ArgumentException">Thrown if arrays are null, lengths mismatch, or empty</exception>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Bilinear(System.Single[],System.Single[],System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Bilinear interpolation on a 2D rectilinear grid with clamped behavior at the edges.
            </summary>
            <remarks>
            - Expects strictly increasing 1D grids <paramref name="x"/> (size nx) and <paramref name="y"/> (size ny).<br/>
            - <paramref name="z"/> must be an nx-by-ny matrix with z[i,j] = f(x[i], y[j]).<br/>
            - If (<paramref name="xval"/>, <paramref name="yval"/>) is outside the grid rectangle, the value from the nearest
              boundary cell is returned (clamped).<br/>
            - Time complexity: O(log nx + log ny) due to binary searches.
            </remarks>
            <param name="x">X-grid nodes (length nx), strictly increasing</param>
            <param name="y">Y-grid nodes (length ny), strictly increasing</param>
            <param name="z">Function values, shape [nx, ny]</param>
            <param name="xval">Query x-coordinate</param>
            <param name="yval">Query y-coordinate</param>
            <returns>Interpolated value at (xval, yval)</returns>
            <exception cref="T:System.ArgumentException">Thrown if grid sizes are invalid or inconsistent</exception>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Lagra(System.Single[],System.Single[],System.Single)">
            <summary>
            Lagrange polynomial interpolation (naive O(n²) evaluation).
            </summary>
            <remarks>
            - Expects pairwise distinct nodes <paramref name="x"/> (not necessarily uniform).<br/>
            - Numerically unstable for large n; prefer barycentric form for better stability.
            </remarks>
            <param name="x">Interpolation nodes x[0..n-1]</param>
            <param name="y">Function samples y[i] = f(x[i])</param>
            <param name="xval">Query point</param>
            <returns>Interpolated value at xval</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Newto(System.Single[],System.Single[],System.Single)">
            <summary>
            Newton interpolation in divided differences with Horner-like evaluation.
            </summary>
            <remarks>
            - Builds the divided-difference table in-place (O(n²)), then evaluates in O(n).<br/>
            - More numerically stable than the naïve Lagrange form; nodes need not be uniform.
            </remarks>
            <param name="x">Interpolation nodes x[0..n-1] (distinct)</param>
            <param name="y">Function samples y[i] = f(x[i])</param>
            <param name="xval">Query point</param>
            <returns>Interpolated value at xval</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Baryc(System.Single[],System.Single[],System.Single)">
            <summary>
            First-form barycentric Lagrange interpolation (precompute weights, O(n²); evaluate O(n)).
            </summary>
            <remarks>
            - Requires pairwise distinct nodes; throws if duplicates are detected.<br/>
            - More numerically robust than naïve Lagrange; for repeated queries, cache weights <c>w[i]</c>.
            </remarks>
            <param name="x">Interpolation nodes (distinct)</param>
            <param name="y">Function samples at nodes</param>
            <param name="xval">Query point; if equal to a node, returns the corresponding sample exactly</param>
            <returns>Interpolated value at xval</returns>
            <exception cref="T:System.ArgumentException">Thrown when duplicate nodes are detected</exception>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Lagra(UMapx.Core.Complex32[],UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Lagrange polynomial interpolation (naive O(n²) evaluation).
            </summary>
            <remarks>
            - Expects pairwise distinct nodes <paramref name="x"/> (not necessarily uniform).<br/>
            - Numerically unstable for large n; prefer barycentric form for better stability.
            </remarks>
            <param name="x">Interpolation nodes x[0..n-1]</param>
            <param name="y">Function samples y[i] = f(x[i])</param>
            <param name="xval">Query point</param>
            <returns>Interpolated value at xval</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Newto(UMapx.Core.Complex32[],UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Newton interpolation in divided differences with Horner-like evaluation.
            </summary>
            <remarks>
            - Builds the divided-difference table in-place (O(n²)), then evaluates in O(n).<br/>
            - More numerically stable than the naïve Lagrange form; nodes need not be uniform.
            </remarks>
            <param name="x">Interpolation nodes x[0..n-1] (distinct)</param>
            <param name="y">Function samples y[i] = f(x[i])</param>
            <param name="xval">Query point</param>
            <returns>Interpolated value at xval</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Baryc(UMapx.Core.Complex32[],UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            First-form barycentric Lagrange interpolation (precompute weights, O(n²); evaluate O(n)).
            </summary>
            <remarks>
            - Requires pairwise distinct nodes; throws if duplicates are detected.<br/>
            - More numerically robust than naïve Lagrange; for repeated queries, cache weights <c>w[i]</c>.
            </remarks>
            <param name="x">Interpolation nodes (distinct)</param>
            <param name="y">Function samples at nodes</param>
            <param name="xval">Query point; if equal to a node, returns the corresponding sample exactly</param>
            <returns>Interpolated value at xval</returns>
            <exception cref="T:System.ArgumentException">Thrown when duplicate nodes are detected</exception>
        </member>
        <member name="T:UMapx.Analysis.InterpolationMethod">
            <summary>
            Interpolation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.InterpolationMethod.Linear">
            <summary>
            Linear method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.InterpolationMethod.Lagrange">
            <summary>
            Lagrange's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.InterpolationMethod.Newton">
            <summary>
            Newton's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.InterpolationMethod.Barycentric">
            <summary>
            Barycentric method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.LeastSquaresOptions">
            <summary>
            Defines a class that implements the least squares method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Single,System.Single[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Value</param>
            <param name="c">Approximation coefficients</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Single[],System.Single[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Value</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(System.Single[],System.Single[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Value</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Single[],System.Single)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Single[],System.Single[],System.Single,System.Single)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(System.Single[],System.Single[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Single[])">
            <summary>
            Returns the equation of a polynomial represented as a string (uses " * X^" for powers).
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Single[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            The <paramref name="function"/> string is appended for i>0 before the power index (e.g. " * X^").
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Token placed before the power index for i&gt;0 (e.g. " * X^")</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex32,UMapx.Core.Complex32[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Value</param>
            <param name="c">Approximation coefficients</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Value</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Value</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Single,System.Single)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex32[])">
            <summary>
            Returns the equation of a polynomial represented as a string (uses " * X^" for powers).
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex32[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            The <paramref name="function"/> string is appended for i>0 before the power index (e.g. " * X^").
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Token placed before the power index for i&gt;0 (e.g. " * X^")</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="T:UMapx.Analysis.Nonlinear">
            <summary>
            Defines a class that implements the solution of a nonlinear equation.
            </summary>
            <remarks>
            This class is a solution to the problem of finding the root of a nonlinear equation of the form F(x) = 0.
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.#ctor(System.Single,UMapx.Analysis.NonlinearMethod)">
            <summary>
            Initializes a class that implements the solution of a nonlinear equation.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
            <param name="method">Method for solving a nonlinear equation</param>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.MethodType">
            <summary>
            Gets or sets the method for solving the nonlinear equation.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IFloat,System.Single,System.Single)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Bisec(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            Bisection method for solving f(x) = 0 on a bracketing interval [a, b].
            </summary>
            <remarks>
            - Requires a sign change on the endpoints: f(a) * f(b) ≤ 0 (throws if violated).<br/>
            - Guarantees convergence to a root in [a, b] for continuous f (linear convergence).<br/>
            - Stops when the interval width or |f(mid)| is below <paramref name="eps"/>, or on iteration cap.
            - Returns the final midpoint or a short secant refinement if available.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">Left endpoint of the initial bracket</param>
            <param name="b">Right endpoint of the initial bracket</param>
            <param name="eps">Absolute tolerance for both x-interval and residual checks</param>
            <returns>Approximate root in [a, b]</returns>
            <exception cref="T:System.ArgumentException">If f(a) and f(b) have the same strict sign</exception>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Secan(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            Secant method (open method) for solving f(x) = 0 using two initial guesses.
            </summary>
            <remarks>
            - Does not require a bracket; may fail if the sequence diverges or hits a zero derivative surrogate.<br/>
            - Superlinear convergence near a simple root; sensitive to starting points.<br/>
            - Stops on small residual |f(x)|, small step |Δx|, or iteration cap; returns the last iterate.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">First initial guess</param>
            <param name="b">Second initial guess</param>
            <param name="eps">Absolute tolerance for residual and step size</param>
            <returns>Approximate root</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Falpo(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            Regula Falsi (false position) method for solving f(x) = 0 on a bracketing interval [a, b].
            </summary>
            <remarks>
            - Maintains a bracket with a sign change at every step (robust).<br/>
            - Can stagnate if one endpoint changes very slowly; convergence is at least linear.<br/>
            - Stops on small residual |f(x)|, small step |Δx|, or iteration cap; returns the last secant point.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">Left endpoint of the initial bracket</param>
            <param name="b">Right endpoint of the initial bracket</param>
            <param name="eps">Absolute tolerance for residual and step size</param>
            <returns>Approximate root in [a, b]</returns>
            <exception cref="T:System.ArgumentException">If f(a) and f(b) have the same strict sign</exception>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Chord(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            One-endpoint chord method (fixed endpoint secant) for solving f(x) = 0.
            </summary>
            <remarks>
            - Uses fixed endpoint at <paramref name="a"/> and forms a secant with the current iterate.<br/>
            - Does not enforce bracketing; convergence is problem-dependent and may be slow or fail.<br/>
            - Stops on small residual |f(x)|, small step |Δx|, or iteration cap.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">Fixed endpoint used in each chord</param>
            <param name="b">Second endpoint used only to initialize the first iterate</param>
            <param name="eps">Absolute tolerance for residual and step size</param>
            <returns>Approximate root</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Chord(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Single)">
            <summary>
            One-endpoint chord method (fixed endpoint secant) for solving f(x) = 0.
            </summary>
            <remarks>
            - Uses fixed endpoint at <paramref name="a"/> and forms a secant with the current iterate.<br/>
            - Does not enforce bracketing; convergence is problem-dependent and may be slow or fail.<br/>
            - Stops on small residual |f(x)|, small step |Δx|, or iteration cap.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">Fixed endpoint used in each chord</param>
            <param name="b">Second endpoint used only to initialize the first iterate</param>
            <param name="eps">Absolute tolerance for residual and step size</param>
            <returns>Approximate root</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Secan(UMapx.Core.IComplex32,UMapx.Core.Complex32,UMapx.Core.Complex32,System.Single)">
            <summary>
            Secant method (open method) for solving f(x) = 0 using two initial guesses.
            </summary>
            <remarks>
            - Does not require a bracket; may fail if the sequence diverges or hits a zero derivative surrogate.<br/>
            - Superlinear convergence near a simple root; sensitive to starting points.<br/>
            - Stops on small residual |f(x)|, small step |Δx|, or iteration cap; returns the last iterate.
            </remarks>
            <param name="f">Scalar continuous function</param>
            <param name="a">First initial guess</param>
            <param name="b">Second initial guess</param>
            <param name="eps">Absolute tolerance for residual and step size</param>
            <returns>Approximate root</returns>
        </member>
        <member name="T:UMapx.Analysis.NonlinearMethod">
            <summary>
            Method for solving a nonlinear equation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.NonlinearMethod.Bisection">
            <summary>
            Bisection method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.NonlinearMethod.Chord">
            <summary>
            Chord method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.NonlinearMethod.Secant">
            <summary>
            Secant method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.NonlinearMethod.FalsePosition">
            <summary>
            False position method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Optimization">
            <summary>
            Defines a class that implements an extremum search.
            </summary>
            <remarks>
            This class is a solution to the problem of finding the maximum and minimum points of the function F(x).
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Optimization.#ctor(System.Single)">
            <summary>
            Initializes a class that implements an extremum search.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Optimization.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Optimization.Compute(UMapx.Core.IFloat,System.Single,System.Single,System.Boolean)">
            <summary>
            Returns the corresponding minimum of the function on the segment.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <param name="max">Search maximum or minimum</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.GoldenMin(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            Golden-section search for the minimum of a unimodal function on [a, b].
            </summary>
            <remarks>
            - Assumes <paramref name="f"/> is continuous and unimodal on the closed interval [a, b].
            - Uses the golden ratio to reuse interval proportions for fast bracketing shrinkage.
            - Terminates when the bracket length |b - a| becomes smaller than <paramref name="eps"/> 
              or when the iteration cap (short.MaxValue) is reached.
            - Returns the midpoint of the final bracket as the argmin approximation (not f at that point).
            
            Note: This implementation recomputes f(x1) and f(x2) each iteration for clarity.
            It can be optimized to carry one evaluation forward per step.
            </remarks>
            <param name="f">Continuous objective function to minimize</param>
            <param name="a">Left endpoint of the search interval</param>
            <param name="b">Right endpoint of the search interval</param>
            <param name="eps">Absolute tolerance for the bracket length; stop when |b - a| &lt; eps</param>
            <returns>
            Approximate minimizer x* ∈ [a, b] (the x-coordinate). To get the minimum value, evaluate f at the result.
            </returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.GoldenMax(UMapx.Core.IFloat,System.Single,System.Single,System.Single)">
            <summary>
            Golden-section search for the maximum of a unimodal function on [a, b].
            </summary>
            <remarks>
            - Assumes <paramref name="f"/> is continuous and unimodal on [a, b].
            - Same scheme as <see cref="M:UMapx.Analysis.Optimization.GoldenMin(UMapx.Core.IFloat,System.Single,System.Single,System.Single)"/>, but with the inequality flipped to seek the maximum.
            - Terminates when |b - a| &lt; <paramref name="eps"/> or when the iteration cap is reached.
            - Returns the midpoint of the final bracket as the argmax approximation (not f at that point).
            </remarks>
            <param name="f">Continuous objective function to maximize</param>
            <param name="a">Left endpoint of the search interval</param>
            <param name="b">Right endpoint of the search interval</param>
            <param name="eps">Absolute tolerance for the bracket length; stop when |b - a| &lt; eps</param>
            <returns>
            Approximate maximizer x* ∈ [a, b] (the x-coordinate). To get the maximum value, evaluate f at the result.
            </returns>
        </member>
        <member name="T:UMapx.Analysis.Pade">
            <summary>
            Defines a Pade approximant.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Pad%C3%A9_approximant.
            Example: exp(x) = 1 + x + x^2/2! + x^3/3! + ...
            <code>
            float[] taylorExp = new float[] { 1.0f, 1.0f, 0.5f, 1.0f/6.0f, 1.0f/24.0f, 1.0f/120.0f, 1.0f/720.0f };
            var pade = new Pade(2, 2);
            var (n, d) = pade.Compute(taylorExp);
            </code>
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Pade.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Pade approximant.
            <param name="m">The degree of the numerator of a rational function</param>
            <param name="n">The degree of the denominator of a rational function</param>
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Pade.M">
            <summary>
            Gets or sets the degree of the numerator of a rational function.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Pade.N">
            <summary>
            Gets or sets the degree of the denominator of a rational function
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(System.Single[])">
            <summary>
            Returns the Pade approximant.
            </summary>
            <param name="taylorCoeffs">Taylor series coefficients</param>
            <exception cref="T:System.ArgumentException">Exception</exception>
            <returns>Coeffs</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(UMapx.Core.Complex32[])">
            <summary>
            Returns the Pade approximant.
            </summary>
            <param name="taylorCoeffs">Taylor series coefficients</param>
            <exception cref="T:System.ArgumentException">Exception</exception>
            <returns>Coeffs</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(System.Single,System.Single[],System.Single[])">
            <summary>
            Evaluates a function.
            </summary>
            <param name="x">Value</param>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(UMapx.Core.Complex32,System.Single[],System.Single[])">
            <summary>
            Evaluates a function.
            </summary>
            <param name="x">Value</param>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(System.Single,UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Evaluates a function.
            </summary>
            <param name="x">Value</param>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Compute(UMapx.Core.Complex32,UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Evaluates a function.
            </summary>
            <param name="x">Value</param>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Equation(System.Single[],System.Single[])">
            <summary>
            Returns the equation of a Pade approximant represented as a string.
            </summary>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Exception</exception>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.FormatPolynomial(System.Single[],System.String,System.Single)">
            <summary>
            Formats polynomial c0 + c1*x + ... + cK*x^K as a readable string.
            </summary>
            <param name="c">Polynomial</param>
            <param name="var">Variable</param>
            <param name="eps">Epsilon</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.Equation(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the equation of a Pade approximant represented as a string.
            </summary>
            <param name="numeratorCoeffs">Numerator coeffs</param>
            <param name="denominatorCoeffs">Denominator coeffs</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Exception</exception>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.FormatPolynomial(UMapx.Core.Complex32[],System.String,System.Single)">
            <summary>
            Formats polynomial c0 + c1*x + ... + cK*x^K as a readable string.
            </summary>
            <param name="c">Polynomial</param>
            <param name="var">Variable</param>
            <param name="eps">Epsilon</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.FormatComplex(UMapx.Core.Complex32,System.Single)">
            <summary>
            Formats a complex number.
            </summary>
            <param name="z">Value</param>
            <param name="eps">Epsilon</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.IsZero(UMapx.Core.Complex32,System.Single)">
            <summary>
            True if |z|≈0 (both parts small).
            </summary>
            <param name="z">Value</param>
            <param name="eps">Epsilon</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Analysis.Pade.NearlyOne(System.Single,System.Single)">
            <summary>
            True if |x - 1| ≤ eps.
            </summary>
            <param name="x">Value</param>
            <param name="eps">Epsilon</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:UMapx.Analysis.Roots">
            <summary>
            Defines a class for solving equations using the spectral decomposition of a matrix.
            </summary>
            <remarks>
            More information can be found on the website:
            https://www.mathworks.com/help/matlab/ref/roots.html
            </remarks>
        </member>
        <member name="M:UMapx.Analysis.Roots.#ctor(System.Single)">
            <summary>
            Initializes a class of equations using the spectral decomposition of a matrix.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Roots.Eps">
            <summary>
            Gets or sets an error [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(System.Single[])">
            <summary>
            Returns a column vector corresponding to the numerical solution of the polynomial: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="polynomial">Polynomial</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(UMapx.Core.Complex32[])">
            <summary>
            Returns a column vector of polynomial coefficients: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="roots">Roots</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Colorspace.AHSL">
            <summary>
            Defines a color model AHSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the AHSL structure.
            </summary>
            <param name="h">Hue [0, 359]</param>
            <param name="s">Saturation [0, 255]</param>
            <param name="l">Lightness [-100, 100]</param>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Saturation">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Lightness">
            <summary>
            Defines a component of the color model [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Equality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">AHSL structure</param>
            <param name="item2">AHSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Inequality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">AHSL structure</param>
            <param name="item2">AHSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to AHSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>AHSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to AHSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>AHSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.ToRGB">
            <summary>
            Converts from AHSL to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.CMYK">
            <summary>
            Defines a color model CMYK.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure CMYK.
            </summary>
            <param name="c">Cyan [0, 1]</param>
            <param name="m">Magenta [0, 1]</param>
            <param name="y">Yellow [0, 1]</param>
            <param name="k">Keycolor [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Cyan">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Magenta">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Yellow">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Keycolor">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Equality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Inequality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to CMYK.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to CMYK.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.ToRGB">
            <summary>
            Converts from CMYK to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSB">
            <summary>
            Defines a color model HSB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure HSB.
            </summary>
            <param name="h">Hue [0, 359]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="b">Brightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Brightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Equality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Inequality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to HSB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to HSB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSB.ToRGB">
            <summary>
            Converts from HSB to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSL">
            <summary>
            Defines a color model HSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure HSL.
            </summary>
            <param name="h">Hue [0, 360]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="l">Lightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Hue">
            <summary>
            Defines a component of the color model [0, 360].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Lightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Equality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Inequality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to HSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to HSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSL.ToRGB">
            <summary>
            Converts from HSL to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.IColorSpace">
            <summary>
            Defines the color space interface.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.IColorSpace.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.LAB">
            <summary>
            Defines a color model CIE Lab.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure CIE Lab.
            </summary>
            <param name="l">Component L [0, 100]</param>
            <param name="a">Component a [-127, 127]</param>
            <param name="b">Component b [-127, 127]</param>
        </member>
        <member name="P:UMapx.Colorspace.LAB.L">
            <summary>
            Defines a component of the model [0, 100].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.A">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.B">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Equality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Inequality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Converts from CIE Lab to CIE XYZ.
            </summary>
            <param name="l">Component L</param>
            <param name="a">Component a</param>
            <param name="b">Component b</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(UMapx.Colorspace.LAB)">
            <summary>
            Converts from CIE Lab to CIE XYZ.
            </summary>
            <param name="lab">CIE Lab structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to CIE Lab.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to CIE Lab.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.LAB.ToRGB">
            <summary>
            Converts from CIE Lab to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.RGB">
            <summary>
            Defines a color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Green">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Equality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Inequality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(UMapx.Colorspace.RGB)~System.Drawing.Color">
            <summary>
            Defines an implicit conversion from RGB to System.Drawing.Color.
            </summary>
            <param name="value">RGB structure</param>
            <returns>Color in terms of red, green and blue</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.RGB">
            <summary>
            Defines an implicit conversion from System.Drawing.Color to RGB.
            </summary>
            <param name="value">Color in terms of red, green and blue</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetIntFromHex(System.String)">
            <summary>
            Gets the int equivalent for a hexadecimal value.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.FromHEX(System.String)">
            <summary>
            Converts from HEX to RGB.
            </summary>
            <param name="hexColor">HEX</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to HEX.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to HEX.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTSC).
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTSC).
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTSC).
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTSC).
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Temp2RGB(System.Single)">
            <summary>
            Converts temperature T (in kelvins) to color in terms of red, green, and blue channels.
            </summary>
            <param name="temperature">Temperature [1000K, 10000K]</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(UMapx.Colorspace.RGB,System.Single)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="rgb">RGB structure</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Vibrance(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Corrects color vibrance.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <param name="v">Vibrance</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Vibrance(UMapx.Colorspace.RGB,System.Single)">
            <summary>
            Corrects color vibrance.
            </summary>
            <param name="rgb">RGB structure</param>
            <param name="s">Vibrance</param>
            <returns>RGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.SchemeFromHue(System.Single,System.UInt32)">
            <summary>
            Generates a color scheme.
            </summary>
            <param name="hue">Hue [0, 360]</param>
            <param name="length">Length</param>
            <returns>Color scheme</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Cool">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Hot">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Copper">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.HSB">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Jet">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Pink">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Autumn">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Spring">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Summer">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Winter">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.RYB">
            <summary>
            Defines a color model RYB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Yellow [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Yellow [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Yellow">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Equality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Inequality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>RYB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to RYB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>RYB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RYB.ToRGB">
            <summary>
            Converts from RYB to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.sRGB">
            <summary>
            Defines a color model sRGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure sRGB.
            </summary>
            <param name="red">Red [0, 1]</param>
            <param name="green">Green [0, 1]</param>
            <param name="blue">Blue [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Red">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Green">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Blue">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Equality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Inequality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to sRGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to sRGB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.ToRGB">
            <summary>
            Converts from sRGB to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.Unknown">
            <summary>
            Defines an unknown color model.
            This color model can play the role of any color space.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.X">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Y">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Z">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Equality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Inequality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.AHSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from AHSL to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.AHSL">
            <summary>
            Defines an implicit conversion from Unknown to AHSL.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.LAB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from LAB to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.LAB">
            <summary>
            Defines an implicit conversion from Unknown to LAB.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.XYZ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from XYZ to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.XYZ">
            <summary>
            Defines an implicit conversion from Unknown to XYZ.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.CMYK)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from CMYK to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.CMYK">
            <summary>
            Defines an implicit conversion from Unknown to CMYK.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from HSB to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSB">
            <summary>
            Defines an implicit conversion from Unknown to HSB.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from HSL to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSL">
            <summary>
            Defines an implicit conversion from Unknown to HSL.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from RGB to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RGB">
            <summary>
            Defines an implicit conversion from Unknown to RGB.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RYB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from RYB to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RYB">
            <summary>
            Defines an implicit conversion from Unknown to RYB.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.sRGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from sRGB to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.sRGB">
            <summary>
            Defines an implicit conversion from Unknown to sRGB.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCbCr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YCbCr to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCbCr">
            <summary>
            Defines an implicit conversion from Unknown to YCbCr.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCgCo)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YCgCo to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCgCo">
            <summary>
            Defines an implicit conversion from Unknown to YCgCo.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YDbDr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YDbDr to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YDbDr">
            <summary>
            Defines an implicit conversion from Unknown to YDbDr.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YIQ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YIQ to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YIQ">
            <summary>
            Defines an implicit conversion from Unknown to YIQ.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YPbPr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YPbPr to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YPbPr">
            <summary>
            Defines an implicit conversion from Unknown to YPbPr.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YUV)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from YUV to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YUV">
            <summary>
            Defines an implicit conversion from Unknown to YUV.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an implicit conversion from Color to Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~System.Drawing.Color">
            <summary>
            Defines an implicit conversion from Unknown to Color.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.XYZ">
            <summary>
            Defines a color model CIE XYZ.
            </summary>
        </member>
        <member name="F:UMapx.Colorspace.XYZ.White">
            <summary>
            Returns white color.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure CIE XYZ.
            </summary>
            <param name="x">Component X [0, 1]</param>
            <param name="y">Component Y [0, 1]</param>
            <param name="z">Component Z [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.X">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Y">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Z">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Equality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Inequality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(System.Single,System.Single,System.Single)">
            <summary>
            Converts from CIE XYZ to CIE Lab.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(UMapx.Colorspace.XYZ)">
            <summary>
            Converts from CIE XYZ to CIE Lab.
            </summary>
            <param name="xyz">CIE XYZ structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to CIE XYZ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to CIE XYZ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Fxyz(System.Single)">
            <summary>
            Computes the nonlinear helper function used in CIE XYZ to LAB conversion.
            </summary>
            <param name="t">Input value</param>
            <returns>Transformed value</returns>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.ToRGB">
            <summary>
            Converts from CIE XYZ to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCbCr">
            <summary>
            Defines a color model YCbCr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YCbCr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cb">Cb [0, 1]</param>
            <param name="cr">Cr [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cb">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cr">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Equality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Inequality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YCbCr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YCbCr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.ToRGB">
            <summary>
            Converts from YCbCr to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCgCo">
            <summary>
            Defines a color model YCgCo.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cg">Cg [-0.5, 0.5]</param>
            <param name="co">Co [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Cg">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Co">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Equality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Inequality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YCgCo.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YCgCo.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.ToRGB">
            <summary>
            Converts from YCgCo to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YDbDr">
            <summary>
            Defines a color model YDbDr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="db">Db [-1.333, 1.333]</param>
            <param name="dr">Dr [-1.333, 1.333]</param>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Db">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Dr">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Equality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Inequality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YDbDr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YDbDr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.ToRGB">
            <summary>
            Converts from YDbDr to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YIQ">
            <summary>
            Defines a color model YIQ.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YIQ.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="i">I [-0.5957, 0.5957]</param>
            <param name="q">Q [-0.5226, 0.5226]</param>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.I">
            <summary>
            Defines a component of the color model [-0.5957, 0.5957].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Q">
            <summary>
            Defines a component of the color model [-0.5226, 0.5226].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Equality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Inequality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YIQ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YIQ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.ToRGB">
            <summary>
            Converts from YIQ to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YPbPr">
            <summary>
            Defines a color model YPbPr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YPbPr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="pb">Pb [-0.5, 0.5]</param>
            <param name="pr">Pr [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pb">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pr">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Equality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Inequality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YPbPr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YPbPr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.ToRGB">
            <summary>
            Converts from YPbPr to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YUV">
            <summary>
            Defines a color model YUV.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the structure YUV.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="u">U [-0.436, 0.436]</param>
            <param name="v">V [-0.614, 0.614]</param>
        </member>
        <member name="P:UMapx.Colorspace.YUV.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.U">
            <summary>
            Defines a component of the color model [-0.436, 0.436].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.V">
            <summary>
            Defines a component of the color model [-0.614, 0.614].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Equality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Inequality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts from RGB to YUV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YUV structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts from RGB to YUV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YUV structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YUV.ToRGB">
            <summary>
            Converts from YUV to RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Core.Complex32">
            <summary>
            Defines a complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex32.Real">
            <summary>
            The real part of the complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex32.Imag">
            <summary>
            The imaginary part of a complex number.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the complex number.
            </summary>
            <param name="re">Real part of the complex number</param>
            <param name="im">Imaginary part of a complex number</param>
        </member>
        <member name="P:UMapx.Core.Complex32.Abs">
            <summary>
            Gets the value of the modulus.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.Abs2">
            <summary>
            Gets the squared magnitude (Real² + Imag²).
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.Angle">
            <summary>
            Gets the value of the phase.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex32.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the given value of type Complex32.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.ToString">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.ToString(System.String)">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Equality(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Checks if two complex numbers are equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Inequality(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Checks if two complex numbers are not equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Addition(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            The sum of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Addition(UMapx.Core.Complex32,System.Single)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Addition(System.Single,UMapx.Core.Complex32)">
            <summary>
            The sum of a real number and a complex number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_UnaryPlus(UMapx.Core.Complex32)">
            <summary>
            A complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Subtraction(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            The difference of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Subtraction(UMapx.Core.Complex32,System.Single)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Subtraction(System.Single,UMapx.Core.Complex32)">
            <summary>
            The difference of a real number and a complex number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_UnaryNegation(UMapx.Core.Complex32)">
            <summary>
            Negates a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Multiply(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Multiplies one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Multiply(System.Single,UMapx.Core.Complex32)">
            <summary>
            Multiplies real number by complex number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Multiply(UMapx.Core.Complex32,System.Single)">
            <summary>
            Multiplies complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Division(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Divides one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Division(UMapx.Core.Complex32,System.Single)">
            <summary>
            Divides complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Division(System.Single,UMapx.Core.Complex32)">
            <summary>
            Divides real number by complex number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Numerics.Complex)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(UMapx.Core.Complex32)~System.Numerics.Complex">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Double)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Single)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Int64)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.UInt64)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Int16)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.UInt16)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Int32)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.UInt32)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Byte)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.SByte)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.op_Implicit(System.Decimal)~UMapx.Core.Complex32">
            <summary>
            Defines an implicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.Parse(System.String)">
            <summary>
            Parses the string to complex number.
            </summary>
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            <param name="s">Input string</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.TryParse(System.String,UMapx.Core.Complex32@)">
            <summary>
            Tries to parse the string to complex number.
            </summary>
            <param name="complex">Input string</param>
            <param name="result">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.System#ICloneable#Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.FromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a complex number from polar coordinates.
            </summary>
            <param name="magnitude">Magnitude (radius)</param>
            <param name="phase">Phase (angle in radians)</param>
        </member>
        <member name="M:UMapx.Core.Complex32.IsNaN(UMapx.Core.Complex32)">
            <summary>
            Returns a value that indicates whether the specified value is not a number.
            </summary>
            <param name="z">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex32.IsInfinity(UMapx.Core.Complex32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="z">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="P:UMapx.Core.Complex32.I">
            <summary>
            Returns the imaginary one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.One">
            <summary>
            Returns the real one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.Zero">
            <summary>
            Returns the complex zero.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.Conjugate">
            <summary>
            Returns the complex conjugate number.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex32.NaN">
            <summary>
            Returns a complex 'Not a Number' value.
            </summary>
        </member>
        <member name="T:UMapx.Core.Debugger">
            <summary>
            Used to debug data such as matrices and vectors.
            </summary>
        </member>
        <member name="F:UMapx.Core.Debugger.Gap">
            <summary>
            Space between the columns.
            </summary>
        </member>
        <member name="F:UMapx.Core.Debugger.RowIndent">
            <summary>
            Two leading spaces.
            </summary>
        </member>
        <member name="F:UMapx.Core.Debugger.tic">
            <summary>
            Private tic.
            </summary>
        </member>
        <member name="M:UMapx.Core.Debugger.Print(System.Object)">
            <summary>
            Prints a value to console.
            </summary>
            <param name="A">Value</param>
        </member>
        <member name="M:UMapx.Core.Debugger.Print``1(``0[],System.Boolean)">
            <summary>
            Prints a vector to console.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="A">Array</param>
            <param name="vertical">Vertical or not</param>
        </member>
        <member name="M:UMapx.Core.Debugger.Print``1(``0[0:,0:])">
            <summary>
            Prints a matrix to console.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="A">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Debugger.Print``1(``0[][])">
            <summary>
            Prints jagged array to console.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="A">Jagged array</param>
        </member>
        <member name="M:UMapx.Core.Debugger.Info(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints a simple reflection-based summary of an object's public properties and methods.
            </summary>
            <param name="T">
            The target instance. (Note: parameter name is uppercase by design here; typically it's named <c>obj</c>.)
            </param>
            <param name="includeInherited">
            If <c>true</c>, include members inherited from base types; otherwise, only members declared on the object's exact type are included.
            </param>
            <param name="includeStatic">
            If <c>true</c>, include static members in addition to instance members; otherwise, include instance members only.
            </param>
            <param name="withSignatures">
            If <c>true</c>, print method signatures (method name + parameter types); otherwise, print method names only and collapse overloads by name.
            </param>
            <remarks>
            This method writes to the console:
            1) The runtime type of the object,
            2) A comma-separated list of public property names,
            3) A comma-separated list of public method names (or signatures).
            Special-name methods (property accessors, event add/remove, operators) and constructors are excluded.
            </remarks>
        </member>
        <member name="M:UMapx.Core.Debugger.Tic">
            <summary>
            Starts elapsing time.
            </summary>
        </member>
        <member name="M:UMapx.Core.Debugger.Toc">
            <summary>
            Prints elapsed time in milliseconds.
            </summary>
            <returns>Int</returns>
        </member>
        <member name="T:UMapx.Core.IFloat">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.IComplex32">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.IMeshFloat">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.IMeshComplex32">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.Direction">
            <summary>
            Defines the direction of processing.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Horizontal">
            <summary>
            Horizontal direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Vertical">
            <summary>
            Vertical direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Both">
            <summary>
            Both direction.
            </summary>
        </member>
        <member name="T:UMapx.Core.Gradient">
            <summary>
            Defines the direction of the gradient vector.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.North">
            <summary>
            North direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.NorthWest">
            <summary>
            North-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.West">
            <summary>
            West direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.SouthWest">
            <summary>
            South-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.South">
            <summary>
            South direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.SouthEast">
            <summary>
            South-East direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.East">
            <summary>
            East direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Gradient.NorthEast">
            <summary>
            North-East direction.
            </summary>
        </member>
        <member name="T:UMapx.Core.HeapSet`1">
            <summary>
            Defines a heap set.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:UMapx.Core.HeapSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes the heap set.
            </summary>
            <param name="comparer">Comparer</param>
        </member>
        <member name="P:UMapx.Core.HeapSet`1.Count">
            <summary>
            Gets the heap set items count.
            </summary>
        </member>
        <member name="M:UMapx.Core.HeapSet`1.Add(`0)">
            <summary>
            Adds an item to the heap set.
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:UMapx.Core.HeapSet`1.Balance(System.Int32)">
            <summary>
            Balances the heap set.
            </summary>
            <param name="targetLowSize">Target low size</param>
        </member>
        <member name="M:UMapx.Core.HeapSet`1.GetRank">
            <summary>
            Returns the rank.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="T:UMapx.Core.Heap`1">
            <summary>
            Defines a heap.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:UMapx.Core.Heap`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes the heap.
            </summary>
            <param name="comparer">Comparer</param>
        </member>
        <member name="P:UMapx.Core.Heap`1.Count">
            <summary>
            Gets the heap items count.
            </summary>
        </member>
        <member name="M:UMapx.Core.Heap`1.Add(`0)">
            <summary>
            Adds an item to the heap.
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:UMapx.Core.Heap`1.Peek">
            <summary>
            Returns the element at the top of the heap without removing it.
            </summary>
            <returns>Element at the top of the heap</returns>
        </member>
        <member name="M:UMapx.Core.Heap`1.Extract">
            <summary>
            Extracts an item from the heap.
            </summary>
            <returns>The removed root element</returns>
        </member>
        <member name="T:UMapx.Core.InterpolationMode">
            <summary>
            Defines an interpolation mode.
            </summary>
        </member>
        <member name="F:UMapx.Core.InterpolationMode.Bicubic">
            <summary>
            Bicubic interpolation.
            </summary>
        </member>
        <member name="F:UMapx.Core.InterpolationMode.Bilinear">
            <summary>
            Bilinear interpolation.
            </summary>
        </member>
        <member name="F:UMapx.Core.InterpolationMode.NearestNeighbor">
            <summary>
            Nearest neighbor interpolation.
            </summary>
        </member>
        <member name="T:UMapx.Core.Jagged">
            <summary>
            Used to work with jagged arrays.
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(System.Single[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(System.Single[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(UMapx.Core.Complex32[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Jagged.rnd">
            <summary>
            Random generator.
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.Rand(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix of random numbers with values uniformly distributed in the interval [0, 1).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randc(System.Int32,System.Int32)">
            <summary>
            Constructs a complex matrix of random numbers whose real and imaginary parts are uniformly distributed in the interval [0, 1).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix of integer random numbers uniformly distributed between 1 and l (inclusive).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a matrix of integer random numbers uniformly distributed in the interval [<paramref name="a"/>, <paramref name="b"/>).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound (exclusive)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32)">
            <summary>
            Constructs a complex matrix of integer random numbers whose real and imaginary parts are uniformly distributed between 1 and l (inclusive).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a complex matrix of integer random numbers whose real and imaginary parts are uniformly distributed in the interval [<paramref name="a"/>, <paramref name="b"/>).
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound (exclusive)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(System.Single[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(UMapx.Core.Complex32[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToComplex(System.Single[][])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToByte(System.Single[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToFloat(System.Single[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(System.Single[][])">
            <summary>
            Calculates the modulus for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(UMapx.Core.Complex32[][])">
            <summary>
            Calculates the modulus for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Angle(UMapx.Core.Complex32[][])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Real(UMapx.Core.Complex32[][])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Imag(UMapx.Core.Complex32[][])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Core.Kernel">
            <summary>
            Used to work with kernel functions.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kernel_(statistics)
            </remarks>
        </member>
        <member name="M:UMapx.Core.Kernel.Bicubic(System.Single)">
            <summary>
            Returns the value of a bicubic function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Single,System.Single)">
            <summary>
            Returns the value of a Gaussian function.
            </summary>
            <param name="x">Value</param>
            <param name="sigma">Standard deviation (0, +inf)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Single)">
            <summary>
            Returns the value of a Gaussian function σ = 1.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Single,System.Single)">
            <summary>
            Returns the value of the Lanczos function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Parameter</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Single)">
            <summary>
            Returns the value of the Lanczos function, with a = 1.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Uniform(System.Single)">
            <summary>
            Returns the value of a uniform function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triangular(System.Single)">
            <summary>
            Returns the value of a triangular function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Trapezoid(System.Single)">
            <summary>
            Returns the value of the trapezoid function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Epanechnikov(System.Single)">
            <summary>
            Returns the value of the Epanechnikov function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Quartic(System.Single)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triweight(System.Single)">
            <summary>
            Returns the value of a T-function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Tricube(System.Single)">
            <summary>
            Returns the value of a tricubic function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Cosine(System.Single)">
            <summary>
            Returns the value of the cosine function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Logistic(System.Single)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Sigmoid(System.Single)">
            <summary>
            Returns the value of a sigmoid function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Silverman(System.Single)">
            <summary>
            Returns the value of the Silverman function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions">
            <summary>
            Defines the class of optimizations of matrix operations.
            </summary>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MatrixOperation">
            <summary>
            Defines matrix operation class. 
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.MatrixOperation.exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Determinant(System.Single*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">Element</param>
            <param name="n">Matrix size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Determinant(UMapx.Core.Complex32*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">Element</param>
            <param name="n">Matrix size</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Invert(System.Single[][])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="working">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Invert(UMapx.Core.Complex32[][])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="working">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Mul(System.Single[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Mul(UMapx.Core.Complex32[][],UMapx.Core.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Mul(UMapx.Core.Complex32[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Mul(System.Single[][],UMapx.Core.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Whittle_Mul(System.Single[][],System.Single[][],System.Single[][],System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="A">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="C">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="i">Index</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Whittle_Mul(UMapx.Core.Complex32[][],UMapx.Core.Complex32[][],UMapx.Core.Complex32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="A">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="C">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="i">Index</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Whittle_Mul(UMapx.Core.Complex32[][],System.Single[][],UMapx.Core.Complex32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="A">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="C">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="i">Index</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Whittle_Mul(System.Single[][],UMapx.Core.Complex32[][],UMapx.Core.Complex32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="A">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="C">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="i">Index</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Copy(System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Copies matrix.
            </summary>
            <param name="src">Source</param>
            <param name="dst">Destination</param>
            <param name="r0">R0</param>
            <param name="c0">C0</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Copy(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Copies matrix.
            </summary>
            <param name="src">Source</param>
            <param name="dst">Destination</param>
            <param name="r0">R0</param>
            <param name="c0">C0</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MatrixOperation.Copy(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Copies matrix.
            </summary>
            <param name="src">Source</param>
            <param name="dst">Destination</param>
            <param name="r0">R0</param>
            <param name="c0">C0</param>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.ConvolutionFilter">
            <summary>
            Defines a convolution filter class.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.Conv(System.Single[0:,0:],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.Conv(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.Conv(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.Conv(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvHorizontal(System.Single[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvVertical(System.Single[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvHorizontal(System.Single[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvVertical(System.Single[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvHorizontal(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvVertical(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvHorizontal(UMapx.Core.Complex32[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvolutionFilter.ConvVertical(UMapx.Core.Complex32[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MeanFilter">
            <summary>
            Defines a fast mean filter class.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.Mean(System.Single[],System.Int32)">
            <summary>
             Implements local average of vector.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.Mean(UMapx.Core.Complex32[],System.Int32)">
            <summary>
             Implements local average of vector.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanHorizontal(System.Single[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrix (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanVertical(System.Single[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrix (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanHorizontal(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrix (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanVertical(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrix (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanWeighted(System.Single[],System.Single[],System.Int32)">
            <summary>
            Implements weighted local average of vector.
            </summary>
            <param name="values">Array of values</param>
            <param name="weights">Array of weights (same length as values)</param>
            <param name="r">Radius</param>
            <returns>Weighted blurred array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanWeighted(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Implements weighted local average of vector.
            </summary>
            <param name="values">Array of values</param>
            <param name="weights">Array of weights (same length as values)</param>
            <param name="r">Radius</param>
            <returns>Weighted blurred array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanHorizontalWeighted(System.Single[0:,0:],System.Single[0:,0:],System.Int32)">
            <summary>
            Implements local weighted average of matrice (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="weights">Weights</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanVerticalWeighted(System.Single[0:,0:],System.Single[0:,0:],System.Int32)">
            <summary>
            Implements local weighted average of matrice (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="weights">Weights</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanHorizontalWeighted(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements local weighted average of matrice (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="weights">Weights</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanFilter.MeanVerticalWeighted(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements local weighted average of matrice (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="weights">Weights</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MorphologySortFilter">
            <summary>
            Defines a morphology filter class for fast sort implementation.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologySortFilter.Apply(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 2D array.
            </summary>
            <param name="data">Array</param>
            <param name="r0">Radius</param>
            <param name="r1">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologySortFilter.Apply(System.Single[],System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 1D array.
            </summary>
            <param name="data">Array</param>
            <param name="r">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologySortFilter.RemoveOneFromSorted(System.Single[],System.Int32,System.Single)">
            <summary>
            Removes one occurrence of x from a sorted array a of length K, shifting the elements left. 
            After the call, the first K-1 elements remain sorted; the last element can be overwritten.
            </summary>
            <param name="a">Array</param>
            <param name="K">Dimension</param>
            <param name="x">Value</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologySortFilter.FastSort(System.Single[]@,System.Int32)">
            <summary>
            O(N) sort algorithm.
            </summary>
            <param name="s">Array</param>
            <param name="index">Index</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologySortFilter.GetFilterRank(UMapx.Core.MorphologyMode,System.Int32)">
            <summary>
            Gets filter rank.
            </summary>
            <param name="mode">Mode</param>
            <param name="windowSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MorphologyFilter">
            <summary>
            Defines a morphology filter class for basic implementation.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyFilter.Apply(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 2D array.
            </summary>
            <param name="data">Array</param>
            <param name="r0">Radius</param>
            <param name="r1">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyFilter.Apply(System.Single[],System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 1D array.
            </summary>
            <param name="data">Array</param>
            <param name="r">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyFilter.GetFilterRank(UMapx.Core.MorphologyMode,System.Int32)">
            <summary>
            Gets filter rank.
            </summary>
            <param name="mode">Mode</param>
            <param name="windowSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MorphologyHistogramFilter">
            <summary>
            Defines a morphology filter class for histogram implementation.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFilter.Apply(System.Byte[0:,0:],System.Int32,System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 2D array.
            </summary>
            <param name="data">Array</param>
            <param name="r0">Radius</param>
            <param name="r1">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFilter.Apply(System.Byte[],System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 1D array.
            </summary>
            <param name="data">Array</param>
            <param name="r">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFilter.GetFilterRank(UMapx.Core.MorphologyMode,System.Int32)">
            <summary>
            Gets filter rank.
            </summary>
            <param name="mode">Mode</param>
            <param name="windowSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.MorphologyHistogramFastFilter">
            <summary>
            Defines a morphology filter class for fast histogram implementation.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFastFilter.Apply(System.Byte[0:,0:],System.Int32,System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 2D array.
            </summary>
            <param name="data">Array</param>
            <param name="r0">Radius</param>
            <param name="r1">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFastFilter.Apply(System.Byte[],System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Applies morphology filter to 1D array.
            </summary>
            <param name="data">Array</param>
            <param name="r">Radius</param>
            <param name="mode">Mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFastFilter.GetFilterRank(UMapx.Core.MorphologyMode,System.Int32)">
            <summary>
            Gets filter rank.
            </summary>
            <param name="mode">Mode</param>
            <param name="windowSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphologyHistogramFastFilter.GetHistogramRank(System.Int32[],System.Int32)">
            <summary>
            Gets histogram rank.
            </summary>
            <param name="histogram">Histogram</param>
            <param name="rank">Rank</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.Maths">
            <summary>
            Used to implement basic algebraic, trigonometric and hyperbolic operations.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.E">
            <summary>
            Exponent.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Pi">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Phi">
            <summary>
            Phi (golden number).
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Tau">
            <summary>
            Double pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Gamma">
            <summary>
            Euler-Mascheroni constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Sqrt2">
            <summary>
            Square root of number 2.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.G">
            <summary>
            Catalan's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.A">
            <summary>
            Apery's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.I">
            <summary>   
            Imaginary one.
            </summary>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Single)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Int32)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Single)">
            <summary>
            Converts a value to an <see cref="T:System.SByte"/> type and clamps it to the range [-128, 127].
            </summary>
            <param name="x">Value</param>
            <returns>sbyte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Int32)">
            <summary>
            Converts a value to an <see cref="T:System.SByte"/> type and clamps it to the range [-128, 127].
            </summary>
            <param name="x">Value</param>
            <returns>sbyte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Float(System.Single)">
            <summary>
            Converts a value to a type float.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Single,System.Single,System.Single)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>float</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>int</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>float</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Scale(System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>int</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(System.Single)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(UMapx.Core.Complex32)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSquare(System.Single)">
            <summary>
            Checks if a number is a full square.
            </summary>
            <param name="n">Integer number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPower(System.Single,System.Single)">
            <summary>
            Checks whether a number is a power of another number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsInteger(System.Single)">
            <summary>
            Checks whether a number is an integer.
            </summary>
            <param name="a">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsEven(System.Single)">
            <summary>
            Checks whether a number is even.
            </summary>
            <param name="a">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsNotEven(System.Single)">
            <summary>
            Checks whether a number is odd.
            </summary>
            <param name="a">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Single)">
            <summary>
            Returns the number raised to the second power.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Single,System.Single)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Value</param>
            <param name="b">Power</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(System.Single)">
            <summary>
            Returns the exponent raised to the power.
            </summary>
            <param name="a">Power</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Single)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(System.Single)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(System.Single)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Base</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Single)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Single,System.Single)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Value</param>
            <param name="b">Power</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(System.Single)">
            <summary>
            Returns the modulus of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Single,System.Single)">
            <summary>
            Returns the largest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Single,System.Single,System.Single)">
            <summary>
            Returns the largest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Single,System.Single)">
            <summary>
            Returns the smallest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Single,System.Single,System.Single)">
            <summary>
            Returns the smallest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sign(System.Single)">
            <summary>
            Returns the sign of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Floor(System.Single)">
            <summary>
            Returns the rounded number down.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ceil(System.Single)">
            <summary>
            Returns the rounded number up.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Single)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Single,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Value</param>
            <param name="dig">Digits</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(UMapx.Core.Complex32)">
            <summary>
            Returns the modulus of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Angle(UMapx.Core.Complex32)">
            <summary>
            Returns the angle of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex32)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(UMapx.Core.Complex32)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(UMapx.Core.Complex32)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex32,System.Single)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Base</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(UMapx.Core.Complex32)">
            <summary>
            Returns the exponent raised to a complex degree.
            </summary>
            <param name="a">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Single,UMapx.Core.Complex32)">
            <summary>
            Returns the number raised to a complex power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(UMapx.Core.Complex32,System.Single)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex32)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex32,System.Single)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.FromPolar(System.Single,System.Single)">
            <summary>
            Returns complex number.
            </summary>
            <param name="abs">Modulus</param>
            <param name="angle">Angle</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <param name="dig">Digits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(System.Single)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(System.Single)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tan(System.Single)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctan(System.Single)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(System.Single)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(System.Single)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(System.Single)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(System.Single)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atan(System.Single)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actan(System.Single)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(System.Single)">
            <summary>
            Returns the arcsecant of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(System.Single)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(UMapx.Core.Complex32)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(UMapx.Core.Complex32)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tan(UMapx.Core.Complex32)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctan(UMapx.Core.Complex32)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(UMapx.Core.Complex32)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(UMapx.Core.Complex32)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(UMapx.Core.Complex32)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(UMapx.Core.Complex32)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atan(UMapx.Core.Complex32)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actan(UMapx.Core.Complex32)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(UMapx.Core.Complex32)">
            <summary>
            Returns the arcsecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(UMapx.Core.Complex32)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sinh(System.Single)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosh(System.Single)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tanh(System.Single)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctanh(System.Single)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sech(System.Single)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosch(System.Single)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asinh(System.Single)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosh(System.Single)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atanh(System.Single)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actanh(System.Single)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asech(System.Single)">
            <summary>
            Returns the hyperbolic arcsecant of a number.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosch(System.Single)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sinh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tanh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctanh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sech(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosch(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asinh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atanh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Value</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actanh(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asech(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arcsecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosch(UMapx.Core.Complex32)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int32)">
            <summary>
            Checks if number is prime.
            </summary>
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            <param name="p">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int64)">
            <summary>
            Checks if number is prime.
            </summary>
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            <param name="p">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int32,System.Int32)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int64,System.Int64)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int32,System.Int32)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int64,System.Int64)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Single,System.Single)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>float</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Value</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Value</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.leftmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes modular exponentiation using the left-to-right binary method.
            </summary>
            <param name="a">Base value</param>
            <param name="x">Exponent</param>
            <param name="p">Modulus</param>
            <returns>Result of a^x mod p</returns>
        </member>
        <member name="M:UMapx.Core.Maths.rightmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes modular exponentiation using the right-to-left binary method.
            </summary>
            <param name="a">Base value</param>
            <param name="x">Exponent</param>
            <param name="p">Modulus</param>
            <returns>Result of a^x mod p</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int32,System.Int32)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int64,System.Int64)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int32,System.Int32)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int64,System.Int64)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Value</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int32,System.Int32)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int64,System.Int64)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int32,System.Int32)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int64,System.Int64)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int32,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int64,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int32)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int64)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int32)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int64)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sieve(System.Int32)">
            <summary>
            Implements a sieve for finding prime numbers.
            </summary>
            <remarks>
            Recursive implementation of a memory-optimized segmented sieve of Eratosthenes. 
            The operational complexity of the O(N* logN) algorithm.The memory complexity is O(Δ), where Δ = sqrt(N).
            </remarks>
            <param name="limit">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.BuildBasePrimes(System.Int32)">
            <summary>
            Odd-only sieve up to n (inclusive). Returns base primes incl. 2.
            </summary>
            <param name="n">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int32)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Value</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int64)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Value</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Decimal2Base(System.Int64,System.Int32)">
            <summary>
            Returns a vector representing the decimal number in the given number system.
            </summary>
            <remarks>
            Example: 10[10] = {1,0,1,0}[2].
            </remarks>
            <param name="x">Byte</param>
            <param name="newbase">Base</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Base2Decimal(System.Int32[],System.Int32)">
            <summary>
            Returns the decimal Number represented in decimal notation.
            </summary>
            <remarks>
            Example: {1,0,1,0}[2] = 10[10].
            </remarks>
            <param name="x">Array</param>
            <param name="thisbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Vector2Numeral(System.Int32[])">
            <summary>
            Returns a number that interprets the specified vector in decimal.
            </summary>
            <remarks>
            Example: {1,0,1,0}[2] = 1010[10].
            </remarks>
            <param name="x">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Numeral2Vector(System.Int64)">
            <summary>
            Returns a vector representing the decomposition of a decimal number into components.
            </summary>
            <remarks>
            Example: 1010[10] = {1,0,1,0}[2]
            </remarks>
            <param name="x">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.NumLength(System.Int64,System.Int32)">
            <summary>
            Returns the value of the digit capacity of a number in the given number system.
            </summary>
            <param name="x">Byte</param>
            <param name="numbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Hypotenuse(System.Single,System.Single)">
            <summary>
            Returns the value of the hypotenuse.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Hypotenuse(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the hypotenuse.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cubic(System.Single,System.Single,System.Single)">
            <summary>
            Implements the solution of a cubic equation of the form:
            x^3 + a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Quadratic(System.Single,System.Single,System.Single)">
            <summary>
            Implements a solution to a quadratic equation of the form: 
            a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.BiQuadratic(System.Single,System.Single,System.Single)">
            <summary>
            Implements the solution of a biquadratic equation of the form:
            a*x^4 + b*x^2 + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(System.Single,System.Single)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sign(System.Single,System.Single)">
            <summary>
            Returns the value of <c>|a|</c> with the sign of <paramref name="sign"/> (copysign).
            </summary>
            <param name="magnitude">Value providing the magnitude</param>
            <param name="sign">Value providing the sign</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sign(UMapx.Core.Complex32)">
            <summary>
            Complex signum: returns z / |z| (unit complex) or 0 for z == 0.
            </summary>
            <param name="z">Complex value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.CopySign(System.Single,System.Single)">
            <summary>
            Copies sign.
            </summary>
            <param name="magnitude">Value providing the magnitude</param>
            <param name="sign">Value providing the sign</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.CopySign(System.Single,UMapx.Core.Complex32)">
            <summary>
            Copy phase from 'sign' to a real magnitude |magnitude|.
            If sign == 0, returns +|magnitude| on the real axis.
            </summary>
            <param name="magnitude">Value providing the magnitude</param>
            <param name="sign">Value providing the sign</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.CopySign(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Copy phase from 'sign' to the magnitude |magnitude| of a complex number.
            If sign == 0, returns +|magnitude| on the real axis.
            </summary>
            <param name="magnitude">Value providing the magnitude</param>
            <param name="sign">Value providing the sign</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.CopySign(UMapx.Core.Complex32,System.Single)">
            <summary>
            Copy phase from 'sign' to the magnitude |magnitude| of a complex number.
            If sign == 0, returns +|magnitude| on the real axis.
            </summary>
            <param name="magnitude">Value providing the magnitude</param>
            <param name="sign">Value providing the sign</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Single,System.Single,System.Single)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Core.Matrice">
            <summary>
            Used to implement standard algebraic operations on matrices and vectors.
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsNonNegative(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is non-negative.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(System.Single[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks if the matrix is symmetric (Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric (anti-Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(System.Single[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transpose(System.Single[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transpose(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conjugate(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the complex conjugate matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hermitian(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements the Hermitian-conjugation operation of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Gram(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns a Gram (Hermitian) matrix.
            </summary>
            <param name="A">Matrix</param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Gram(System.Single[0:,0:])">
            <summary>
            Returns a Gram matrix.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(System.Single[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(System.Single[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Single[0:,0:],System.Single)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Single[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Single[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Permutation(System.Single[0:,0:])">
            <summary>
            Implements the construction of a square permutation matrix.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex32[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[0:,0:],System.Single)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single,System.Single[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32,System.Single[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[0:,0:],System.Single)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single,System.Single[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32,System.Single[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],System.Single[])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Vector</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Vector</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],System.Single[])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Vector</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],UMapx.Core.Complex32[])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Vector</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],System.Single)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single,System.Single[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32,System.Single[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[0:,0:],System.Single)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single,System.Single[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32,System.Single[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single[0:,0:],UMapx.Core.Complex32)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single[0:,0:],System.Single)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single,System.Single[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Value</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex32,System.Single[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Value</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single,UMapx.Core.Complex32[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Value</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToNegate(System.Single[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToNegate(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Single[0:,0:])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Single[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToFloat(System.Single[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAbs(System.Single[0:,0:])">
            <summary>
            Calculates the modulus for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAbs(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Calculates the modulus for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAngle(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToReal(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToImag(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Single[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(System.Single[0:,0:])">
            <summary>
            Returns the vector of the matrix mode.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the vector of the matrix mode.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Single[0:,0:])">
            <summary>
            Sorts the matrix.
            </summary>
            <param name="m">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[0:,0:])">
            <summary>
            Returns the maximum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[0:,0:],System.Int32[]@)">
            <summary>
            Returns the maximum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="index">Index array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[0:,0:])">
            <summary>
            Returns the minimum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[0:,0:],System.Int32[]@)">
            <summary>
            Returns the minimum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="index">Index array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Single[0:,0:],UMapx.Core.MorphologyMode)">
            <summary>
            Returns the matrix vector corresponding to the specified morphology mode.
            </summary>
            <param name="m">Matrix</param>
            <param name="mode">Morphology mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Single[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Single[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Single[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Single[0:,0:])">
            <summary>
            Returns the entropy vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Normalized(System.Single[0:,0:])">
            <summary>
            Returns the normalized matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(System.Single[0:,0:],System.Single[0:,0:],UMapx.Core.Direction)">
            <summary>
            Implements matrix concatenation.
            </summary>
            <param name="A">Matrix</param>
            <param name="B">Matrix</param>
            <param name="direction">Direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],UMapx.Core.Direction)">
            <summary>
            Implements matrix concatenation.
            </summary>
            <param name="A">Matrix</param>
            <param name="B">Matrix</param>
            <param name="direction">Direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:],UMapx.Core.Direction)">
            <summary>
            Implements matrix concatenation.
            </summary>
            <param name="A">Matrix</param>
            <param name="B">Matrix</param>
            <param name="direction">Direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:],UMapx.Core.Direction)">
            <summary>
            Implements matrix concatenation.
            </summary>
            <param name="A">Matrix</param>
            <param name="B">Matrix</param>
            <param name="direction">Direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[0:,0:],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[0:,0:],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[0:,0:],System.Single[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[0:,0:],UMapx.Core.Complex32[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[0:,0:],System.Single[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological minimum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological maximum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Returns the matrix result of morphology.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
            <param name="mode">Morphology mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local weighted averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="w">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local weighted averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="w">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(System.Single[])">
            <summary>
            Implements the diagonal vector inversion operation.
            </summary>
            <param name="v">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(UMapx.Core.Complex32[])">
            <summary>
            Implements the diagonal vector inversion operation.
            </summary>
            <param name="v">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Single[],System.Single[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsNonNegative(System.Single[])">
            <summary>
            Checks if the vector is non-negative.
            </summary>
            <param name="v">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Single[],System.Single[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Single[],System.Single)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Single[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex32[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Single[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex32[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Single[],System.Single[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Single[],System.Single[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GramProj(System.Single[],System.Single[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GramProj(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GramProj(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GramProj(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(System.Single[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(UMapx.Core.Complex32[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[],System.Single[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[],System.Single)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single[],UMapx.Core.Complex32)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single,System.Single[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32,UMapx.Core.Complex32[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Single,UMapx.Core.Complex32[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex32,System.Single[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[],System.Single[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[],System.Single)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single[],UMapx.Core.Complex32)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single,System.Single[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32,UMapx.Core.Complex32[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex32,System.Single[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Single,UMapx.Core.Complex32[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[],System.Single[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[],System.Single)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[],UMapx.Core.Complex32)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single,System.Single[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32,UMapx.Core.Complex32[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32,System.Single[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single,UMapx.Core.Complex32[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[],System.Single[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[],System.Single)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[],UMapx.Core.Complex32)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[],UMapx.Core.Complex32)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single,System.Single[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32,UMapx.Core.Complex32[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single,UMapx.Core.Complex32[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32,System.Single[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single[],System.Single)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single[],UMapx.Core.Complex32)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single,System.Single[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Value</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex32,System.Single[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Value</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Single,UMapx.Core.Complex32[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Value</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToFloat(System.Single[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 1].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Single[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 255].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAbs(System.Single[])">
            <summary>
            Returns the modulus of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToNegate(System.Single[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToNegate(UMapx.Core.Complex32[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Single[])">
            <summary>
            Returns a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAbs(UMapx.Core.Complex32[])">
            <summary>
            Returns the modulus of elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToAngle(UMapx.Core.Complex32[])">
            <summary>
            Returns the angle of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToReal(UMapx.Core.Complex32[])">
            <summary>
            Returns the real part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToImag(UMapx.Core.Complex32[])">
            <summary>
            Returns the imaginary part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToConjugate(UMapx.Core.Complex32[])">
            <summary>
            Returns a complex conjugate vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Single[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex32[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Single[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex32[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Single[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex32[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Single[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex32[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Single[],System.Single[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Single[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex32[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Single[],System.Single[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(System.Single[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(UMapx.Core.Complex32[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Single[])">
            <summary>
            Sorts the vector.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[])">
            <summary>
            Gets the value of the minimum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[],System.Int32@)">
            <summary>
            Gets the value of the minimum element of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="index">Max index</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[])">
            <summary>
            Gets the value of the maximum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[],System.Int32@)">
            <summary>
            Gets the value of the maximum element of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="index">Max index</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Single[],UMapx.Core.MorphologyMode)">
            <summary>
            Gets the value of the vector element corresponding to the morphology mode.
            </summary>
            <param name="v">Array</param>
            <param name="mode">Morphology mode</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Single[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex32[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Single[])">
            <summary>
            Returns the entropy of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Normalized(System.Single[])">
            <summary>
            Returns the normalized matrix.
            </summary>
            <param name="m">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(System.Single[],System.Single[])">
            <summary>
            Implements vector concatenation.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements vector concatenation.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Implements vector concatenation.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Concat(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Implements vector concatenation.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[0:,0:],System.Single[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[0:,0:],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],System.Single[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],System.Single[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],System.Single[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Single[],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex32[],System.Single[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Single[],System.Single[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Single[],UMapx.Core.Complex32[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex32[],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Single[],UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Single[],System.Int32)">
            <summary>
            Returns the vector result of morphology minimum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Single[],System.Int32)">
            <summary>
            Returns the vector result of morphology maximum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Single[],System.Int32,UMapx.Core.MorphologyMode)">
            <summary>
            Returns the vector result of morphology.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
            <param name="mode">Morphology mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Single[],System.Single[],System.Int32)">
            <summary>
            Returns the result vector of local weighted averaging.
            </summary>
            <param name="v">Array</param>
            <param name="w">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns the result vector of local weighted averaging.
            </summary>
            <param name="v">Array</param>
            <param name="w">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(System.Single[0:,0:],UMapx.Core.RotationMode)">
            <summary>
            Rotates matrix by rotation value.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="rotation">Rotation</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate90(System.Single[0:,0:])">
            <summary>
            Rotates the matrix by 90 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate180(System.Single[0:,0:])">
            <summary>
            Rotates the depth by 180 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate270(System.Single[0:,0:])">
            <summary>
            Rotates the depth by 270 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(System.Single[0:,0:],System.Single,UMapx.Core.InterpolationMode)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(System.Single[0:,0:],System.Single,System.Single,UMapx.Core.InterpolationMode)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateNearestNeighbor(System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateBilinear(System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateBicubic(System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(UMapx.Core.Complex32[0:,0:],UMapx.Core.RotationMode)">
            <summary>
            Rotates matrix by rotation value.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="rotation">Rotation</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate90(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Rotates the matrix by 90 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate180(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Rotates the depth by 180 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate270(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Rotates the depth by 270 degrees.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(UMapx.Core.Complex32[0:,0:],System.Single,UMapx.Core.InterpolationMode)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rotate(UMapx.Core.Complex32[0:,0:],System.Single,UMapx.Core.Complex32,UMapx.Core.InterpolationMode)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateNearestNeighbor(UMapx.Core.Complex32[0:,0:],System.Single,UMapx.Core.Complex32)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateBilinear(UMapx.Core.Complex32[0:,0:],System.Single,UMapx.Core.Complex32)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.RotateBicubic(UMapx.Core.Complex32[0:,0:],System.Single,UMapx.Core.Complex32)">
            <summary>
            Rotates matrix by angle.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="angle">Angle</param>
            <param name="value">Value</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Resize(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBicubic(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBilinear(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeNearestNeighbor(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Resize(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBicubic(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBilinear(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeNearestNeighbor(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns resized matrix.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Resize(System.Single[],System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBicubic(System.Single[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBilinear(System.Single[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeNearestNeighbor(System.Single[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Resize(UMapx.Core.Complex32[],System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBicubic(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeBilinear(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizeNearestNeighbor(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns resized vector.
            </summary>
            <param name="input">Array</param>
            <param name="h">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizePreserved(System.Single[0:,0:],System.Int32,System.Int32,System.Single,UMapx.Core.InterpolationMode)">
            <summary>
            Resize method with preserving proportions.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="value">Background value</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizePreserved(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Resize method with preserving proportions.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizePreserved(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,UMapx.Core.Complex32,UMapx.Core.InterpolationMode)">
            <summary>
            Resize method with preserving proportions.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="value">Background value</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ResizePreserved(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,UMapx.Core.InterpolationMode)">
            <summary>
            Resize method with preserving proportions.
            </summary>
            <param name="input">Matrix</param>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="interpolationMode">Interpolation mode</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements a shift of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements a shift of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Single[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Single[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex32[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Single[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex32[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Crop(System.Single[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <param name="clamp">Clamp crop or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Crop(UMapx.Core.Complex32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <param name="clamp">Clamp crop or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Crop(System.Single[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <param name="clamp">Clamp crop or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Crop(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <param name="clamp">Clamp crop or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Single[],System.Single[])">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <param name="start">Start position</param>
            <param name="length">Length</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[],System.Single[])">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <param name="start">Start position</param>
            <param name="length">Length</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Int32,System.Int32)">
            <summary>
            Merges two vectors.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Vector</param>
            <param name="start">Start position</param>
            <param name="length">Length</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
            <param name="y">Y</param>
            <param name="x">X</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:])">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[0:,0:],System.Single[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
            <param name="y">Y</param>
            <param name="x">X</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two matrices.
            </summary>
            <param name="a">Matrix</param>
            <param name="b">Matrix</param>
            <param name="y">Y</param>
            <param name="x">X</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Single[],System.Boolean)">
            <summary>
            Returns vector modulus.
            </summary>
            <param name="vector">Vector</param>
            <param name="squared">Squared or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Single[0:,0:],System.Boolean)">
            <summary>
            Returns matrix modulus.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="squared">Squared or not</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Returns vector modulus.
            </summary>
            <param name="vector">Vector</param>
            <param name="squared">Squared or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Returns matrix modulus.
            </summary>
            <param name="matrix">Matrix</param>
            <param name="squared">Squared or not</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Single[])">
            <summary>
            Returns vector angle.
            </summary>
            <param name="vector">Vector</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Single[0:,0:])">
            <summary>
            Returns matrix angle.
            </summary>
            <param name="matrix">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex32[])">
            <summary>
            Returns vector angle.
            </summary>
            <param name="vector">Vector</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns matrix angle.
            </summary>
            <param name="matrix">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(System.Single[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(System.Single[0:,0:],System.Single[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(System.Single[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(System.Single[0:,0:],System.Single[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Single[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(System.Single[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(System.Single[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex32[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(UMapx.Core.Complex32[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Single[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex32[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Single[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Single[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Single[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex32[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Single[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Single[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Single[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Single[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(System.Single[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Single[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(System.Single[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(System.Single[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Single,System.Single,System.Single)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="min">Minimum</param>
            <param name="max">Maximum</param>
            <param name="step">Step</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Single[],UMapx.Core.IFloat)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex32[],UMapx.Core.IComplex32)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Single[],System.Single[],UMapx.Core.IMeshFloat)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Single[],UMapx.Core.Complex32[],UMapx.Core.IMeshComplex32)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex32[],System.Single[],UMapx.Core.IMeshComplex32)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[],UMapx.Core.IMeshComplex32)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Single[0:,0:],UMapx.Core.IFloat)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex32[0:,0:],UMapx.Core.IComplex32)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32)">
            <summary>
            Implements the construction of a vector of ones.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32)">
            <summary>
            Implements the construction of a vector of zeros.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Householder(System.Single[])">
            <summary>
            Returns the Householder vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(System.Single[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(System.Single[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(System.Single[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(System.Single[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(System.Single[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(System.Single[],System.Single[])">
            <summary>
            Implements the construction of the general Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <param name="r">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(System.Single[],System.Single[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Single[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Single[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Householder(UMapx.Core.Complex32[])">
            <summary>
            Returns the Householder vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the general Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <param name="r">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(UMapx.Core.Complex32[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exchange(System.Int32)">
            <summary>
            Implements the construction of the exchange matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Lehmer(System.Int32)">
            <summary>
            Implements the construction of the Lehmer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Redheffer(System.Int32)">
            <summary>
            Implements the construction of the Redheffer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hilbert(System.Int32)">
            <summary>
            Implements the construction of a Hilbert matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Int32)">
            <summary>
            Implements the construction of a cyclic matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Int32)">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GCD(System.Int32)">
            <summary>
            Implements the construction of a matrix of GCD.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Stirling(System.Int32,System.Boolean)">
            <summary>
            Implements the construction of the Stirling matrix of the first or second kind.
            </summary>
            <param name="n">Dimension</param>
            <param name="second">Second kind or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Magic(System.Int32)">
            <summary>
            Implements the construction of a magic square.
            </summary>
            <param name="n">Size (odd number)</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Matrice.rnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers whose values are distributed according to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers whose values are distributed according to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers whose values are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers whose values are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Single[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of float numbers.
            </summary>
            <remarks>
            Example: "[1, 2, 3; 4, 5, 6; 7, 8, 9]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Single[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of float numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex32[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 4i; 3 + 6i, 4 + 8i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex32[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Single[],System.String)">
            <summary>
            Parses the original string into a vector of float numbers.
            </summary>
            <remarks>
            Example: "[1, 2, 3, 4]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Single[]@)">
            <summary>
            Tries to parse the original row into a matrix of float numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex32[],System.String)">
            <summary>
            Parses the original string into a vector of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 0.3i, 3 + i, 4 - 11i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex32[]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Single[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Single[0:,0:],System.Single[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Core.MorphologyMode">
            <summary>
            Defines a morphology mode.
            </summary>
        </member>
        <member name="F:UMapx.Core.MorphologyMode.Erosion">
            <summary>
            Erosion.
            </summary>
        </member>
        <member name="F:UMapx.Core.MorphologyMode.Median">
            <summary>
            Median.
            </summary>
        </member>
        <member name="F:UMapx.Core.MorphologyMode.Dilatation">
            <summary>
            Dilatation.
            </summary>
        </member>
        <member name="T:UMapx.Core.Operator">
            <summary>
            Used to implement convolutional operators.
            </summary>
        </member>
        <member name="M:UMapx.Core.Operator.Roberts">
            <summary>
            Implements the construction of the Roberts operator [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Prewitt">
            <summary>
            Implements the construction of the Prewitt operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Sobel">
            <summary>
            Implements the construction of the Sobel operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Scharr">
            <summary>
            Implements the construction of the Scharr operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Laplacian">
            <summary>
            Implements the construction of the Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.LaplacianDiagonal">
            <summary>
            Implements the construction of the diagonal Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.LaplacianInvert">
            <summary>
            Implements the construction of the inverted Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Roberts(UMapx.Core.Gradient)">
            <summary>
            Implements the construction of the Roberts operator [2 x 2].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Kirsch(UMapx.Core.Gradient)">
            <summary>
            Implements the construction of the Kirsch operator [3 x 3].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Gaussian(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Implements the construction of the Gaussian blur filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigmaX">Standard deviation X (>0)</param>
            <param name="sigmaY">Standard deviation Y (>0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Unsharp(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Implements the construction of the "unsharp masking" filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigmaX">Standard deviation X (>0)</param>
            <param name="sigmaY">Standard deviation Y (>0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.HighPass(System.Int32,System.Int32,System.Single)">
            <summary>
            Implements the construction of the high-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="boost">Boost</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.LowPass(System.Int32,System.Int32)">
            <summary>
            Implements the construction of the low-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.Emboss(System.Int32)">
            <summary>
            Implements the construction of the emboss filter.
            </summary>
            <param name="radius">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Operator.MotionBlur(System.Int32,System.Single,System.Single)">
            <summary>
            Implements the motion blur filter.
            </summary>
            <param name="radius">Size</param>
            <param name="angle">Angle in degrees</param>
            <param name="blur">Edge blur factor [0, 1]</param>
        </member>
        <member name="T:UMapx.Core.PointFloat">
            <summary>
            Defines a pair of float numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a pair of float numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointFloat.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointFloat.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointFloat.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.ToString">
            <summary>
            Converts a PointFloat to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointFloat.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.op_Equality(UMapx.Core.PointFloat,UMapx.Core.PointFloat)">
            <summary>
            Checks if two PointFloat objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.op_Inequality(UMapx.Core.PointFloat,UMapx.Core.PointFloat)">
            <summary>
            Checks if two PointFloat objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointFloat.Clone">
            <summary>
            Creates a copy of PointFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.PointInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointInt.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointInt.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.ToString">
            <summary>
            Converts a PointInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Equality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointInt objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Inequality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointInt objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.Quaternion32">
            <summary>
            Defines a quaternion.
            </summary>
            <remarks>
            A quaternion is a system of hypercomplex numbers that forms a four-dimensional vector space over a field of real numbers.
            </remarks>
        </member>
        <member name="F:UMapx.Core.Quaternion32.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion32.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion32.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion32.W">
            <summary>
            W coordinate.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion32.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion based on the given coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="z">Coordinate Z</param>
            <param name="w">Coordinate W</param>
        </member>
        <member name="P:UMapx.Core.Quaternion32.Identity">
            <summary>
            Gets a quaternion that represents a lack of rotation.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.IsIdentity">
            <summary>
            Gets a value indicating whether the current instance is a single Quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.Abs">
            <summary>
            Returns the value of the quaternion modulus.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.SquaredAbs">
            <summary>
            Calculates the quaternion modulus squared.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.Normalize">
            <summary>
            Divides each coordinate of the specified quaternion by its length.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.Conjugate">
            <summary>
            Returns the conjugate object of the specified quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion32.Inverse">
            <summary>
            Returns the inverse object of the quaternion.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion32.FromYPR(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new quaternion based on a given value of nutation, precession, and proper rotation.
            </summary>
            <param name="yaw">The nutation angle around the Y axis in radians</param>
            <param name="pitch">The precession angle around the X axis in radians</param>
            <param name="roll">The angle of rotation around the Z axis in radians</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Dot(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Computes the scalar product of two quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Slerp(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32,System.Single)">
            <summary>
            Performs interpolation between two quaternions using spherical linear interpolation.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Lerp(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32,System.Single)">
            <summary>
            Performs linear interpolation between two quaternions based on a value indicating the weighting of the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Concatenate(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Concatenates two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_UnaryNegation(UMapx.Core.Quaternion32)">
            <summary>
            Reverses the sign of each quaternion coordinate.
            </summary>
            <param name="q">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Addition(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Adds each element in one quaternion with the corresponding element in the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Subtraction(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Subtracts each element in the second quaternion from the corresponding element in the first quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Multiply(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Returns the quaternion resulting from the multiplication of two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Multiply(UMapx.Core.Quaternion32,System.Single)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Division(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Divides one quaternion into a second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Division(UMapx.Core.Quaternion32,System.Single)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Equality(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Checks if two quaternions are equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.op_Inequality(UMapx.Core.Quaternion32,UMapx.Core.Quaternion32)">
            <summary>
            Checks if two quaternions are not equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type quaternion.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.ToString">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.ToString(System.String)">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.System#ICloneable#Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.Parse(System.String)">
            <summary>
            Parses the string to quaternion.
            </summary>
            <remarks>
            Example: "[1, -2; 3.2, -.13]";
            The dimension of the vector must be 4.
            </remarks>
            <param name="s">Input string</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion32.TryParse(System.String,UMapx.Core.Quaternion32@)">
            <summary>
            Tries to parse the string into Quaternion.
            </summary>
            <param name="quaternion">Input string</param>
            <param name="result">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:UMapx.Core.RangeFloat">
            <summary>
            Defines a pair of float numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a pair of float numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeFloat.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeFloat.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeFloat.IsOnRange(System.Single)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.ToString">
            <summary>
            Converts RangeFloat to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeFloat.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.op_Equality(UMapx.Core.RangeFloat,UMapx.Core.RangeFloat)">
            <summary>
            Checks if two RangeFloat objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.op_Inequality(UMapx.Core.RangeFloat,UMapx.Core.RangeFloat)">
            <summary>
            Checks if two RangeFloat objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeFloat.Clone">
            <summary>
            Creates a copy of RangeFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.RangeInt">
            <summary>
            Defines a pair of integer numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeInt.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeInt.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.IsOnRange(System.Int32)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.ToString">
            <summary>
            Converts RangeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Equality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeInt objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Inequality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeInt objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.RotationMode">
            <summary>
            Defines a rotation mode.
            </summary>
        </member>
        <member name="F:UMapx.Core.RotationMode.R0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:UMapx.Core.RotationMode.R90">
            <summary>
            90 degrees. 
            </summary>
        </member>
        <member name="F:UMapx.Core.RotationMode.R180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:UMapx.Core.RotationMode.R270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="T:UMapx.Core.SizeFloat">
            <summary>
            Defines a pair of float numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a pair of float numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeFloat.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeFloat.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeFloat.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.ToString">
            <summary>
            Converts a SizeFloat to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeFloat.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.op_Equality(UMapx.Core.SizeFloat,UMapx.Core.SizeFloat)">
            <summary>
            Checks if two SizeFloat objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.op_Inequality(UMapx.Core.SizeFloat,UMapx.Core.SizeFloat)">
            <summary>
            Checks if two SizeFloat objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeFloat.Clone">
            <summary>
            Creates a copy of SizeFloat.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.SizeInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeInt.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeInt.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.ToString">
            <summary>
            Converts a SizeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Equality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Inequality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.Special">
            <summary>
            Used to implement special mathematical functions.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Special_functions
            </remarks>
        </member>
        <member name="F:UMapx.Core.Special.INV_2PI">
            <summary>
            1 / ( 2 * PI ).
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.SQRT_PI">
            <summary>
            Sqrt( PI ).
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevT(System.Single,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevT(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevU(System.Single,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevU(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Abel(System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of the Abel polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Abel(UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Abel polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Complex power</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Laguerre(System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of the Laguerre polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Power</param>
            <param name="k">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Laguerre(UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Laguerre polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Power</param>
            <param name="k">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Legendre(System.Single,System.Int32)">
            <summary>
            Returns the value of the Legendre polynomial of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="m">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Legendre(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Legendre polynomial of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="m">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hermite(System.Single,System.Int32)">
            <summary>
            Returns the value of the Hermite polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="m">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hermite(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Hermite polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="m">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gegenbauer(System.Single,System.Single,System.Int32)">
            <summary>
            Returns the value of the Gegenbauer polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gegenbauer(UMapx.Core.Complex32,UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Gegenbauer polynomial.
            </summary>
            <param name="x">Value</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Single)">
            <summary>
            Returns the value of the normalized cardinal sine function: f(x) = sin(πx) / (πx).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the normalized cardinal sine function: f(x) = sin(πx) / (πx).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Single,System.Single)">
            <summary>
            Returns the value of the cardinal sine function with the parameter: f(x, a) = sin(ax) / (ax).
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the cardinal sine function with the parameter: f(x, a) = sin(ax) / (ax).
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Agd(System.Single)">
            <summary>
            Returns the value of the inverse Guderman function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Agd(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the inverse Guderman function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gd(System.Single)">
            <summary>
            Returns the value of the Guderman function.
            </summary>
            <param name="x">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gd(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Guderman function.
            </summary>
            <param name="x">Angle in radians</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Cas(System.Single)">
            <summary>
            Returns the value of the function Cas(x).
            </summary>
            <param name="theta">Theta</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Cas(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the function Cas(x).
            </summary>
            <param name="theta">Theta</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Rademacher(System.Single,System.Int32)">
            <summary>
            Returns the value of the Radamecher function.
            </summary>
            <param name="t">Value [0, 1]</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Rademacher(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Radamecher function.
            </summary>
            <param name="z">Value</param>
            <param name="n">Order</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Heaviside(System.Single,System.Single)">
            <summary>
            Returns the value of the Heaviside delta function.
            </summary>
            <param name="x">Value</param>
            <param name="k">Smoothing factor</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Heaviside(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Heaviside delta function.
            </summary>
            <param name="x">Value</param>
            <param name="k">Smoothing factor</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Mahler(System.Single,System.Single)">
            <summary>
            Returns the value of the Mahler function.
            </summary>
            <param name="x">Value</param>
            <param name="t">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Mahler(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Mahler function.
            </summary>
            <param name="x">Value</param>
            <param name="t">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gompertz(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the value of the Gompertz function.
            </summary>
            <param name="t">Value</param>
            <param name="a">Upper asymptote</param>
            <param name="b">Growth parameter</param>
            <param name="c">Growth rate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gompertz(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Gets the value of the Gompertz function.
            </summary>
            <param name="t">Value</param>
            <param name="a">Upper asymptote</param>
            <param name="b">Growth parameter</param>
            <param name="c">Growth rate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dirac(System.Single,System.Single)">
            <summary>
            Returns the value of the Dirac delta function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Coefficient</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dirac(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Dirac delta function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Coefficient</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <param name="v">Affect</param>
            <param name="q">Central moment</param>
            <param name="c">Offset</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <param name="v">Affect</param>
            <param name="q">Central moment</param>
            <param name="c">Offset</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Single)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(UMapx.Core.Complex32)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Single,System.Int32,System.Single)">
            <summary>
            Returns the value of the Erlang C-function.
            </summary>
            <param name="y">First parameter</param>
            <param name="v">Second parameter</param>
            <param name="t">Time parameter</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(UMapx.Core.Complex32,System.Int32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Erlang C-function.
            </summary>
            <param name="y">First parameter</param>
            <param name="v">Second parameter</param>
            <param name="t">Time parameter</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Single,System.Int32)">
            <summary>
            Returns the value of the Erlang B-function.
            </summary>
            <param name="y">First parameter</param>
            <param name="v">Second parameter</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Erlang B-function.
            </summary>
            <param name="y">First parameter</param>
            <param name="v">Second parameter</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LambertW(System.Single,System.Int32)">
            <summary>
            Returns the value of the Lambert W-function.
            </summary>
            <param name="x">Value [-1/e,+inf)</param>
            <param name="k">Branch</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LambertW(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Lambert W-function.
            </summary>
            <param name="z">Value</param>
            <param name="k">Branch</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ssqrt(System.Single,System.Int32)">
            <summary>
            Returns the value of the square super-root.
            </summary>
            <param name="x">Value [1,+inf)</param>
            <param name="k">Branch</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ssqrt(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the square super-root.
            </summary>
            <param name="z">Value</param>
            <param name="k">Branch</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnelc(System.Single)">
            <summary>
            Returns the value of the Fresnel integral C(x).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnelc(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Fresnel integral C(x).
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnels(System.Single)">
            <summary>
            Returns the value of the Fresnel integral S(x).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnels(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Fresnel integral S(x).
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Owen(System.Single,System.Single)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First value</param>
            <param name="a">Second value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Owen(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First value</param>
            <param name="a">Second value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Zeta(System.Single)">
            <summary>
            Returns the value of the Riemann zeta ζ(s) on the principal branch (real s).
            </summary>
            <param name="s">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Zeta(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Riemann zeta ζ(s) on the principal branch (complex s).
            </summary>
            <param name="s">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.ZetaEta(System.Single)">
            <summary>
            Evaluates the Dirichlet eta function for real inputs via an alternating series.
            </summary>
            <param name="s">Function argument</param>
        </member>
        <member name="M:UMapx.Core.Special.ZetaEta(UMapx.Core.Complex32)">
            <summary>
            Evaluates the Dirichlet eta function for complex inputs using an alternating series.
            </summary>
            <param name="s">Function argument</param>
        </member>
        <member name="M:UMapx.Core.Special.ZetaHasse(System.Single)">
            <summary>
            Computes the Riemann zeta function for real inputs using Hasse's series.
            </summary>
            <param name="s">Function argument</param>
        </member>
        <member name="M:UMapx.Core.Special.ZetaHasse(UMapx.Core.Complex32)">
            <summary>
            Computes the Riemann zeta function for complex inputs using Hasse's series.
            </summary>
            <param name="s">Function argument</param>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(System.Single)">
            <summary>
            Returns the value of the Euler Gamma function: Г(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Euler Gamma function: Г(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogGamma(System.Single)">
            <summary>
            Returns the value of the natural logarithm of the Euler Gamma function: ln[Г(z)].
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogGamma(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the natural logarithm of the Euler Gamma function: ln[Г(z)].
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.DiGamma(System.Single)">
            <summary>
            Returns the value of the Digamma function: ψ(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.DiGamma(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Digamma function: ψ(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.TriGamma(System.Single)">
            <summary>
            Returns the value of the Trigamma function: ψ1(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.TriGamma(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Trigamma function: ψ1(z).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaQ(System.Single,System.Single)">
            <summary>
            Returns the value of the incomplete upper Gamma function: Q(s, x) = Γ(s, x) / Γ(s).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaQ(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the incomplete upper Gamma function: Q(s, x) = Γ(s, x) / Γ(s).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaP(System.Single,System.Single)">
            <summary>
            Returns the value of an incomplete lower Gamma function: P(s, x) = γ(s, x) / Γ(s).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaP(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of an incomplete lower Gamma function: P(s, x) = γ(s, x) / Γ(s).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(System.Single,System.Single)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncompleteComplemented(System.Single,System.Single)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x) (complemented).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncompleteComplemented(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x) (complemented).
            </summary>
            <param name="s">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaLanczos(System.Double)">
            <summary>
            Lanczos approximation (real) valid for Re(z) > 0.5. Computes principal branch.
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.GammaLanczos(UMapx.Core.Complex32)">
            <summary>
            Lanczos approximation (complex) valid for Re(z) > 0.5. Computes principal branch.
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.LogGammaLanczos(System.Double)">
            <summary>
            Lanczos log-gamma for real x with Re(x) ≥ 0.5 (principal branch).
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.LogGammaLanczos(UMapx.Core.Complex32)">
            <summary>
            Lanczos log-gamma for complex z with Re(z) ≥ 0.5 (principal branch).
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.LowerRegGammaSeries(System.Single,System.Single)">
            <summary>
            Series expansion for the lower regularized incomplete gamma function.
            </summary>
            <param name="s">Shape parameter</param>
            <param name="x">Upper limit of integration</param>
        </member>
        <member name="M:UMapx.Core.Special.LowerRegGammaSeries(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Series expansion for the lower regularized incomplete gamma function with complex parameters.
            </summary>
            <param name="s">Shape parameter</param>
            <param name="x">Upper limit of integration</param>
        </member>
        <member name="M:UMapx.Core.Special.UpperGammaCF(System.Single,System.Single)">
            <summary>
            Continued fraction evaluation for the upper incomplete gamma function.
            </summary>
            <param name="s">Shape parameter</param>
            <param name="x">Lower limit of integration</param>
        </member>
        <member name="M:UMapx.Core.Special.UpperGammaCF(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Continued fraction evaluation for the upper incomplete gamma function with complex parameters.
            </summary>
            <param name="s">Shape parameter</param>
            <param name="x">Lower limit of integration</param>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Single,System.Int32)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Value (0, +inf)</param>
            <param name="n">Order [0, +inf)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Value (0, +inf)</param>
            <param name="n">Order [0, +inf)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Single)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogFactorial(System.Single)">
            <summary>
            Returns the natural logarithm of the factorial of a number log(n!).
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogFactorial(UMapx.Core.Complex32)">
            <summary>
            Returns the natural logarithm of the factorial of a number log(n!).
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Factorial(System.Single)">
            <summary>
            Returns the factorial of a number.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Factorial(UMapx.Core.Complex32)">
            <summary>
            Returns the factorial of a number.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialDown(System.Single,System.Single)">
            <summary>
            Returns the decreasing factorial of a number.
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialDown(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the decreasing factorial of a number.
            </summary>
            <param name="z">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialUp(System.Single,System.Single)">
            <summary>
            Returns the increasing factorial of a number (Pohhammer symbol).
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialUp(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the increasing factorial of a number (Pohhammer symbol).
            </summary>
            <param name="z">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Binomial(System.Single,System.Single)">
            <summary>
            Returns the value of binomial coefficients: C(n, k) = n! / k! / (n-k)! для k > 0.
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Binomial(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of binomial coefficients: C(n, k) = n! / k! / (n-k)! для k > 0.
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBinomial(System.Single,System.Single)">
            <summary>
            Returns the natural logarithm of binomial coefficients: log(C(n, k)) = log(n!) - log(k!) - log(n-k!).
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBinomial(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the natural logarithm of binomial coefficients: log(C(n, k)) = log(n!) - log(k!) - log(n-k!).
            </summary>
            <param name="n">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Single,System.Boolean)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="inverse">Reverse function or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(UMapx.Core.Complex32,System.Boolean)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="inverse">Reverse function or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfi(System.Single)">
            <summary>
            Returns the value of the imaginary error function.
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfi(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the imaginary error function.
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Single)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Single)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.ErfApprox(System.Numerics.Complex)">
            <summary>
            Approximates the error function for complex arguments.
            </summary>
            <param name="z">Complex value</param>
        </member>
        <member name="M:UMapx.Core.Special.Dawson(System.Single,System.Boolean)">
            <summary>
            Returns the value of the D- / D + Dawson function.
            </summary>
            <param name="x">Value</param>
            <param name="positive">D- or D+</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dawson(UMapx.Core.Complex32,System.Boolean)">
            <summary>
            Returns the value of the D- / D + Dawson function.
            </summary>
            <param name="x">Value</param>
            <param name="positive">D- or D+</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Faddeeva(System.Single)">
            <summary>
            Returns the value of the Faddeeva function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Faddeeva(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the Faddeeva function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Q(System.Single,System.Boolean)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Value</param>
            <param name="inverse">Inverse function or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Q(UMapx.Core.Complex32,System.Boolean)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Value</param>
            <param name="inverse">Inverse function or not</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of a hypergeometric function.
            </summary>
            <remarks>
            This version of the hypergeometric function is found in the Russian literature and is indicated: F(a,b,c,z).
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_function
            </remarks>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="c">Value</param>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a hypergeometric function.
            </summary>
            <remarks>
            This version of the hypergeometric function is found in the Russian literature and is indicated: F(a,b,c,z).
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_function
            </remarks>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="c">Value</param>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of a hypergeometric function.
            </summary>
            <remarks>
            The hypergeometric function can be used in several variations:
            F(a,b,z); F(a,~,z); F(~,b,z); F(~,~,z).
            Instead of the “~” sign, use the float.NaN value.
            More information can be found on the website:
            https://www.mathworks.com/help/symbolic/hypergeom.html#bt1nkmw-2
            </remarks>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a hypergeometric function.
            </summary>
            <remarks>
            The hypergeometric function can be used in several variations:
            F(a,b,z); F(a,~,z); F(~,b,z); F(~,~,z).
            Instead of the “~” sign, use the float.NaN value.
            More information can be found on the website:
            https://www.mathworks.com/help/symbolic/hypergeom.html#bt1nkmw-2
            </remarks>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Single,System.Single)">
            <summary>
            Returns the value of the beta function: B(a, b) = Г(a) * Г(b) / Г(a + b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of the beta function: B(a, b) = Г(a) * Г(b) / Г(a + b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Int32,System.Int32)">
            <summary>
            Returns the value of the beta function: B(m, n) = (m - 1)! * (n - 1)! / (m + n - 1)!.
            </summary>
            <param name="m">Integer number</param>
            <param name="n">Integer number</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaDerivative(System.Single,System.Single)">
            <summary>
            Returns the value of a derivative beta function: B'(a, b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaDerivative(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a derivative beta function: B'(a, b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaIncomplete(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of an incomplete beta function: Bx(a, b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaIncomplete(UMapx.Core.Complex32,UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of an incomplete beta function: Bx(a, b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaIncompleteRegularized(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value of a regularized incomplete beta function: Ix(a, b).
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBeta(System.Single,System.Single)">
            <summary>
            Returns the value of a log-beta function.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBeta(UMapx.Core.Complex32,UMapx.Core.Complex32)">
            <summary>
            Returns the value of a log-beta function.
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ci(System.Single)">
            <summary>
            Returns the value of the integral cosine.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ci(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the integral cosine.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Si(System.Single)">
            <summary>
            Returns the value of the integral sine.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Si(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the integral sine.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ei(System.Single)">
            <summary>
            Returns the value of an integral exponential function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ei(UMapx.Core.Complex32)">
            <summary>
            Returns the value of an integral exponential function.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Li(System.Single)">
            <summary>
            Returns the value of the integral logarithm.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Li(UMapx.Core.Complex32)">
            <summary>
            Returns the value of the integral logarithm.
            </summary>
            <param name="z">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.J(System.Single,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.J(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y(System.Single,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.I(System.Single,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.I(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the first kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.K(System.Single,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.K(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the second kind.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.GL0Pi(System.Func{System.Double,System.Double})">
            <summary>
            Integrates a real function over [0, π] using 16-point Gauss–Legendre quadrature.
            </summary>
            <param name="f">Function to integrate</param>
        </member>
        <member name="M:UMapx.Core.Special.GL0PiC(System.Func{System.Double,System.Numerics.Complex})">
            <summary>
            Integrates a complex function over [0, π] using 16-point Gauss–Legendre quadrature.
            </summary>
            <param name="f">Function to integrate</param>
        </member>
        <member name="M:UMapx.Core.Special.GL0T(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Integrates a real function over [0, T] using 16-point Gauss–Legendre quadrature.
            </summary>
            <param name="f">Function to integrate</param>
            <param name="T">Upper integration limit</param>
        </member>
        <member name="M:UMapx.Core.Special.H(System.Single,System.Int32)">
            <summary>
            Returns the value of the Struve function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.H(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the Struve function.
            </summary>
            <param name="x">Value</param>
            <param name="a">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.L(System.Single,System.Int32)">
            <summary>
            Returns the value of the modified Struve function.
            </summary>
            <param name="x">Value</param>
            <param name="v">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.L(UMapx.Core.Complex32,System.Int32)">
            <summary>
            Returns the value of the modified Struve function.
            </summary>
            <param name="x">Value</param>
            <param name="v">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fibonacci(System.Int32)">
            <summary>
            Returns the value of the Fibonacci number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Lucas(System.Int32)">
            <summary>
            Returns the value of the Luca number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32,System.Single)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Order</param>
            <param name="m">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32)">
            <summary>
            Returns the Euler number.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32,System.Single)">
            <summary>
            Returns the value of the Euler polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32)">
            <summary>
            Returns the Bernoulli number.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32,System.Single)">
            <summary>
            Returns the value of the Bernoulli polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Core.Special.Minkowski(System.Int64)">
            <summary>
            Returns the value of the Minkowski function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="F:UMapx.Core.Special.A027641">
            <summary>
            Sequence A027641.
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A000142">
            <summary>
            Sequence A000142.
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A122045">
            <summary>
            Sequence A122045.
            </summary>
        </member>
        <member name="T:UMapx.Core.StringOptions">
            <summary>
            Defines a class of string operations.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.C">
            <summary>
            Complex number format.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.Q">
            <summary>
            Quaternion format.
            </summary>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Single[],System.String,System.String[])">
            <summary>
            The function of converting an array of numbers to a string.
            </summary>
            <param name="v">Array</param>
            <param name="format">Format string</param>
            <param name="symbol">String array</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Double,System.String,System.Boolean,System.String)">
            <summary>
            The function of converting number to a string
            </summary>
            <param name="v">Value</param>
            <param name="format">Format string</param>
            <param name="s">First in a row or not</param>
            <param name="symbol">Symbol</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Matpar(System.String)">
            <summary>
            Defines a general method for casting the original row to the matrix form.
            </summary>
            <param name="s">Input string</param>
            <returns>String array</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Compar(System.String)">
            <summary>
            Translates the original string to complex number.
            </summary>
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            <param name="s">Input string</param>
            <returns>Complex32 value</returns>
        </member>
        <member name="T:UMapx.Core.Xml">
            <summary>
            Used to work with xml serialization of objects.
            </summary>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.IO.Stream,System.Object)">
            <summary>
            Save data to the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.String,System.Object)">
            <summary>
            Save data to the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Open(System.IO.Stream,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="type">Type</param>
        </member>
        <member name="M:UMapx.Core.Xml.Open(System.String,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="type">Type</param>
        </member>
        <member name="T:UMapx.Decomposition.Arnoldi">
            <summary>
            Defines Arnoldi transform.
            </summary>
            <remarks>
            This transformation is used to reduce the square matrix to the Hessenberg form.
            The matrix A is represented as the product of three matrices: A = Q * H * Qᵀ, where H is the upper Hessenberg triangular matrix, Q is the orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arnoldi_iteration
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes Arnoldi transformation.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.H">
            <summary>
            Returns the upper triangular Hessenberg matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.ArnoldiDcmp(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Computes Arnoldi transform for the input matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Dimension</param>
            <param name="m">Dimension</param>
        </member>
        <member name="T:UMapx.Decomposition.Bidiagonal">
            <summary>
            Defines bidiagonal decomposition.
            </summary>
            <remarks>
            This is a representation of a matrix in the form A = U * B * Vᵀ, where U and V are orthogonal matrices
            obtained using Householder transformations and B is a bidiagonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Bidiagonalization
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Bidiagonal.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes bidiagonal decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Bidiagonal.U">
            <summary>
            Gets the orthogonal matrix U.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Bidiagonal.B">
            <summary>
            Gets the bidiagonal matrix B.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Bidiagonal.V">
            <summary>
            Gets the orthogonal matrix V.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Bidiagonal.BidiagDcmp(System.Single[0:,0:])">
            <summary>
            Performs bidiagonal decomposition using Householder transformations.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="T:UMapx.Decomposition.Cholesky">
            <summary>
            Defines Cholesky decomposition.
            </summary>
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product: A = L * Lᵀ, 
            where L is a lower triangular matrix with strictly positive elements on the diagonal.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes Cholesky decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.CholDcmp(System.Single[][])">
            <summary>
            Computes Cholesky decomposition for the matrix A.
            </summary>
            <param name="a">Matrix</param>
        </member>
        <member name="T:UMapx.Decomposition.Diagonal">
            <summary>
            Defines diagonal decomposition.
            </summary>
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = B * D, where B is the Square matrix and D is the diagonal matrix.
            This decomposition is used to highlight diagonal matrices in other decompositions (for example, LDU-, LDL-decompositions).
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Diagonal.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes diagonal decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.B">
            <summary>
            Gets the square matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.EVD">
            <summary>
            Defines eigenvalue decomposition.
            </summary>
            <remarks>
            The eigenvalue decomposition is the representation of the square matrix A in the form of the product of three matrices A = V * D * inv(V), 
            where V is the matrix of spectral vectors and D is the diagonal (generally complex) matrix of eigenvalues.
            The matrix A can also be represented as the product of three matrices: A = V * R * inv(V), where R is a real almost diagonal eigenvalue matrix.
            Not all matrices can be represented in this form, but only those that have a complete set of eigenvectors.
            Eigenvalue decomposition can be used to find the eigenvalues ​​and eigenvectors of the matrix, solve linear systems of equations, 
            invert the matrix, find the determinant of the matrix, and calculate the analytic functions of the matrices.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.EVD.#ctor(System.Single[0:,0:],System.Single)">
            <summary>
            Initializes eigenvalue decomposition.
            </summary>
            <param name="A">Square matrix</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.EVD.V">
            <summary>
            Gets eigenvectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.D">
            <summary>
            Gets eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.R">
            <summary>
            Gets the real diagonal eigenvalue matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tred2">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, 
            Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. 
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tql2">
            <summary>
            Symmetric tridiagonal QL algorithm.
            This is derived from the Algol procedures tql2, by Bowdler, Martin, Reinsch, and Wilkinson, 
            Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.orthes">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            This is derived from the Algol procedures orthes and ortran, by Martin and Wilkinson, 
            Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutines in EISPACK.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.hqr2">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.   
            This is derived from the Algol procedure hqr2, by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding  Fortran subroutine in EISPACK.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.cdiv(System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Complex scalar division using a numerically stable branch (Smith’s method).
            Computes (xr + i·xi) / (yr + i·yi) and stores the real/imag parts in <paramref name="cdivr"/> / <paramref name="cdivi"/>.
            </summary>
            <param name="xr">Real part of the numerator</param>
            <param name="xi">Imag part of the numerator</param>
            <param name="yr">Real part of the denominator</param>
            <param name="yi">Imag part of the denominator</param>
            <param name="cdivr">[out] Real part of the quotient</param>
            <param name="cdivi">[out] Imag part of the quotient</param>
            <remarks>
            Chooses the scaling branch by comparing |yr| and |yi| to avoid overflow/underflow.
            If both <paramref name="yr"/> and <paramref name="yi"/> are zero, the result follows IEEE-754 (Inf/NaN).
            </remarks>
        </member>
        <member name="T:UMapx.Decomposition.GEVD">
            <summary>
            Defines generalized eigenvalue decomposition.
            </summary>
            <remarks>
            It is the task of finding a vector of values of V such that the representation: A * V = B * V * D.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix#Generalized_eigenvalue_problem
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.#ctor(System.Single[0:,0:],System.Single[0:,0:],System.Single)">
            <summary>
            Initializes generalized eigenvalue decomposition.
            </summary>
            <param name="a">Matrix A</param>
            <param name="b">Matrix B</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Alpha">
            <summary>
            Returns vector α.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Beta">
            <summary>
            Returns vector β.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Eigenvalues">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.D">
            <summary>
            Returns an eigenvalue matrix D.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.V">
            <summary>
            Returns a matrix of values V.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.IsSingular">
            <summary>
            Checks whether one of the matrices is singular or not.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzdecomp(System.Single[][],System.Single[][],System.Single,System.Single[][],System.Int32@)">
            <summary>
            Performs the QZ reduction of matrices A and B.
            </summary>
            <param name="a">Matrix A (will be overwritten by the quasi-triangular form S)</param>
            <param name="b">Matrix B (will be overwritten by the upper triangular form T)</param>
            <param name="eps">Epsilon [0, 1]</param>
            <param name="z">Matrix that accumulates the right orthogonal transformations</param>
            <param name="ierr">Convergence flag</param>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzhes(System.Int32,System.Single[][],System.Single[][],System.Boolean,System.Single[][])">
             <summary>
               Adaptation of the original Fortran QZHES routine from EISPACK.
             </summary>
             <remarks>
               This subroutine is the first step of the qz algorithm
               for solving generalized matrix eigenvalue problems,
               Siam J. Number. anal. 10, 241-256(1973) by Moler and Stewart.
            
               This subroutine accepts a pair of real general matrices and
               reduces one of them to upper Hessenberg form and the other
               to upper triangular form using orthogonal transformations.
               it is usually followed by  qzit,  qzval  and, possibly,  qzvec.
               
               For the full documentation, please check the original function.
             </remarks>
             <param name="n"></param>
             <param name="a"></param>
             <param name="b"></param>
             <param name="matz"></param>
             <param name="z"></param>
             <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzit(System.Int32,System.Single[][],System.Single[][],System.Single,System.Boolean,System.Single[][],System.Int32@)">
            <summary>
              Adaptation of the original Fortran QZIT routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the second step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Number. anal. 10, 241-256(1973) by Moler and Stewart,
              as modified in technical note nasa tn d-7305(1973) by ward.
              
              This subroutine accepts a pair of real matrices, one of them
              in upper Hessenberg form and the other in upper triangular form.
              it reduces the Hessenberg matrix to quasi-triangular form using
              orthogonal transformations while maintaining the triangular form
              of the other matrix.  it is usually preceded by  qzhes  and
              followed by  qzval  and, possibly,  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps1"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <param name="ierr"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzval(System.Int32,System.Single[][],System.Single[][],System.Single[],System.Single[],System.Single[],System.Boolean,System.Single[][])">
            <summary>
              Adaptation of the original Fortran QZVAL routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the third step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Number. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them
              in quasi-triangular form and the other in upper triangular form.
              it reduces the quasi-triangular matrix further, so that any
              remaining 2-by-2 blocks correspond to pairs of complex
              Eigenvalues, and returns quantities whose ratios give the
              generalized eigenvalues.  it is usually preceded by  qzhes
              and  qzit  and may be followed by  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzvec(System.Int32,System.Single[][],System.Single[][],System.Single[],System.Single[],System.Single[],System.Single[][])">
            <summary>
              Adaptation of the original Fortran QZVEC routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the optional fourth step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Number. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them in
              quasi-triangular form (in which each 2-by-2 block corresponds to
              a pair of complex eigenvalues) and the other in upper triangular
              form.  It computes the eigenvectors of the triangular problem and
              transforms the results back to the original coordinate system.
              it is usually preceded by  qzhes,  qzit, and  qzval.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Epsilon(System.Single)">
            <summary>
              Estimates unit round-off in quantities of size x.
            </summary>
            <remarks>
              This is a port of the epslon function from EISPACK.
            </remarks>
            
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Sign(System.Single,System.Single)">
            <summary>
              Returns <paramref name="a"/> with the sign of <paramref name="b"/>. 
            </summary>
            
            <remarks>
              This is a port of the sign transfer function from EISPACK,
              and is equivalent to C++'s std::copysign function.
            </remarks>
            
            <returns>If B > 0 then the result is ABS(A), else it is -ABS(A)</returns>
            
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:UMapx.Decomposition.GramSchmidt">
            <summary>
            Defines the Gram-Schmidt orthogonalization process.
            </summary>
            <remarks>
            In mathematics, in particular linear algebra and numerical analysis, the Gram-Schmidt process is a method of orthonormalizing a set of vectors
            in the space of internal works. This procedure is actively used for orthogonalization of bases.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes the Gram-Schmidt orthogonalization process.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.GramSchmidt.Q">
            <summary>
            Gets the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Hessenberg">
            <summary>
            Defines decomposition with a cast to Hessenberg form.
            </summary>
            <remarks>
            This is a representation of a square matrix in the form of a product of three matrices: A = P * H * Pᵀ, 
            where H is the Hessenberg form and P is the unitary matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hessenberg_matrix
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes decomposition to a Hessenberg form.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.P">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.orthes(System.Single[0:,0:])">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            This is derived from the Algol procedures orthes and ortran, by Martin and Wilkinson, 
            Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutines in EISPACK.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="T:UMapx.Decomposition.Householder">
            <summary>
            Defines Householder transformation.
            </summary>
            <remarks>
            This is a linear transformation H (u) of the vector space V, which describes its mapping with respect to the hyperplane,
            which passes through the origin. It was proposed in 1958 by the American mathematician Elston Scott Householder. 
            Widely used in linear algebra for QR decomposition of a matrix.
            In addition, the Householder transform is actively used for orthogonalization of bases; ultimately, the Householder matrix has the following properties:
            H = Hᵀ, Hᵀ * H = I; det(H) = -1.
            In this class, two types of the Householder transform are implemented: reduction to a three-diagonal matrix and construction of the 
            Householder matrix from a given vector.
            In the first case, the original square matrix is defined as: A = H * T * Hᵀ.
            More information can be found on the website: 
            https://en.wikipedia.org/wiki/Householder_transformation
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Single[])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="A">Symmetric matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Householder.H">
            <summary>
            Returns the Householder matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Householder.T">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Householder.hmatx(System.Single[])">
            <summary>
            Builds a full Householder reflector matrix for the input vector.
            </summary>
            <param name="v">Vector</param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.tred2(System.Single[0:,0:])">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, 
            Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
            </summary>
            <param name="a">Matrix</param>
        </member>
        <member name="T:UMapx.Decomposition.Lanczos">
            <summary>
            Defines Lanczos transform.
            </summary>
            <remarks>
            This transformation is used to represent the symmetric matrix A as a product
            of three matrices: A = Q * T * Qᵀ, where T is a tridiagonal matrix, and Q is an orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Lanczos_algorithm
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.#ctor(System.Single[0:,0:],System.Boolean)">
            <summary>
            Initializes Lanczos transformation.
            </summary>
            <param name="A">Symmetric matrix</param>
            <param name="full">Full reorthogonalization or not</param>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.T">
            <summary>
            Returns a tridiagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.LanczosDcmp(System.Single[0:,0:],System.Int32,System.Boolean)">
            <summary>
            This function uses the Lanczos algorithm with full
            re-orthogonalization to compute k x k symmetric tridiagonal
            matrix T that approximates mat up to rank k with respect to
            transformation Q. That is, A = Q * T * Q'.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Dimension</param>
            <param name="full">Full or not</param>
        </member>
        <member name="T:UMapx.Decomposition.LDL">
            <summary>
            Defines LDL decomposition.
            </summary>
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product of three matrices: A = L * D * Lᵀ, 
            where L is a lower triangular matrix with strictly positive elements on the diagonal,
            and D is the diagonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition_2
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.LDL.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes LDL decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDL.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.D">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LDU">
            <summary>
            Defines LDU decomposition.
            </summary>
            <remarks>
            This is the representation of a square matrix A as the product of three matrices: A = L * D * U, 
            where L is the lower triangular matrix, D is the diagonal matrix, and U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.LDU.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes LDU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LQ">
            <summary>
            Defines LQ decomposition.
            </summary>
            <remarks>
            This is the representation of a matrix in the form of a product of two matrices: A = L * Q, 
            where Q is a unitary (or orthogonal) matrix, and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.LQ.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes LQ decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LQ.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LU">
            <summary>
            Defines LU decomposition.
            </summary>
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = L * U, 
            where L is the lower triangular matrix, U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.LU.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes LU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LU.LuDcmp(System.Single[][])">
            <summary>
            Performs LU decomposition of the specified matrix.
            </summary>
            <param name="a">Square matrix to factorize</param>
        </member>
        <member name="T:UMapx.Decomposition.NMF">
            <summary>
            Defines non-negative matrix factorization.
            </summary>
            <remarks>
            This is a representation of a rectangular matrix A as the product of two matrices: A = W * H.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Non-negative_matrix_factorization
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.NMF.#ctor(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Initializes non-negative matrix factorization.
            </summary>
            <param name="A">Non-negative matrix</param>
            <param name="r">The dimension of new matrices</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.NMF.W">
            <summary>
            Gets the left matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.NMF.H">
            <summary>
            Gets the right matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.NMF.NnmfDcmp(System.Single[0:,0:],System.Int32)">
            <summary>
            Computes non-negative matrix factorization for input matrix.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Iterations</param>
        </member>
        <member name="T:UMapx.Decomposition.Polar">
            <summary>
            Defines polar decomposition.
            </summary>
            <remarks>
            This is a representation of a rectangular matrix A in the form of a product of two matrices: A = U * P, 
            where U is a unitary matrix, P is a positive definite matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Polar_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Polar.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
            Initializes polar decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Polar.U">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Polar.P">
            <summary>
            Gets a positive definite matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Power">
            <summary>
            Defines power iteration.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Power_iteration
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Power.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
            Initializes power iteration.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Power.V">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Power.J">
            <summary>
            Returns the diagonalized matrix of eigenvalues.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.QL">
            <summary>
            Defines the QL decomposition of a square matrix.
            </summary>
            <remarks>
            This is a representation of a matrix in the form of a product of two matrices: A = Q * L, 
            where Q is a unitary (or orthogonal) matrix and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.QL.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes the QL decomposition of a square matrix.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QL.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QL.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.QR">
            <summary>
            Defines QR decomposition.
            </summary>
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = Q * R, 
            where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            QR decomposition is the basis of one of the search methods for eigenvectors and matrix numbers - the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.QR.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes QR decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QR.H">
            <summary>
            Returns a matrix containing Householder reflection vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.R">
            <summary>
            Returns the upper triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QR.QrDcmp(System.Single[0:,0:])">
            <summary>
            Computes a QR decomposition for the matrix A.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="T:UMapx.Decomposition.QZ">
            <summary>
            Defines QZ decomposition (generalized Schur decomposition).
            </summary>
            <remarks>
            This is a matrix representation for a pair of matrices A and B such that
            A = Q * S * Zᵀ and B = Q * T * Zᵀ, where Q and Z are orthogonal and
            S and T are upper (quasi) triangular matrices.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QZ_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.QZ.#ctor(System.Single[0:,0:],System.Single[0:,0:],System.Single)">
            <summary>
            Initializes QZ decomposition.
            </summary>
            <param name="A">Matrix A</param>
            <param name="B">Matrix B</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.QZ.Q">
            <summary>
            Gets the orthogonal matrix Q.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QZ.Z">
            <summary>
            Gets the orthogonal matrix Z.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QZ.S">
            <summary>
            Gets the quasi upper triangular matrix S.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QZ.T">
            <summary>
            Gets the upper triangular matrix T.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QZ.InvertUpperTriangular(System.Single[0:,0:])">
            <summary>
            Inverts an upper triangular matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Decomposition.RQ">
            <summary>
            Defines RQ decomposition.
            </summary>
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = R * Q, 
            where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            RQ decomposition is one of the modifications of the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.RQ.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes RQ decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.RQ.R">
            <summary>
            Returns the lower triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.RQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Schur">
            <summary>
            Defines Schur decomposition.
            </summary>
            <remarks>
            This is a representation of a square matrix in the form of a product of three matrices: A = Q * T * Qᵀ,
            where Q is a unitary matrix and T is a quasi upper triangular matrix (Schur form).
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Schur_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.Schur.#ctor(System.Single[0:,0:],System.Single)">
            <summary>
            Initializes Schur decomposition.
            </summary>
            <param name="A">Square matrix</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.Schur.Q">
            <summary>
            Gets the unitary matrix Q.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Schur.T">
            <summary>
            Gets the quasi upper triangular matrix T.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Schur.hqr2">
            <summary>
            Reduces Hessenberg form to real Schur form.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.SVD">
            <summary>
            Defines singular value decomposition.
            </summary>
            <remarks>
            This is a representation of a rectangular matrix A in the form of the product of three matrices A = U * S * Vᵀ, 
            where U are left vectors, V are right vectors, and S are singular values.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Singular_value_decomposition
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.SVD.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
            Initializes singular value decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.SVD.U">
            <summary>
            Gets the left vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.S">
            <summary>
            Gets singular values.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.V">
            <summary>
            Gets the right vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.P">
            <summary>
            Gets the pseudoinverse matrix.
            </summary>
            <remarks>
            NOT RECOMMENDED.
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.SVD.svdcmp(System.Single[0:,0:])">
            <summary>
            Core SVD routine for real single-precision matrices.
            Performs Householder bidiagonalization followed by Golub–Kahan QR iterations
            to compute singular values and left/right singular vectors.
            Populates the private fields: <c>Ur</c> (left vectors), <c>Vr</c> (right vectors),
            and <c>Sr</c> (non-negative singular values).
            </summary>
            <param name="A">
            Input matrix of size n×m. Assumes n ≥ m when called (the caller transposes
            beforehand if needed). The method works on an internal copy (jagged buffers)
            </param>
            <remarks>
            Uses jagged arrays for speed. Columns of U and V are orthonormal. The number
            of QR sweeps is limited by the instance field <see cref="F:UMapx.Decomposition.SVD.iterations"/>.
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.SVD.SwapColumns(System.Single[][],System.Int32,System.Int32)">
            <summary>
            Swaps two columns in a jagged matrix <paramref name="M"/> (float[rows][cols]).
            No operation is performed if <paramref name="c1"/> equals <paramref name="c2"/>.
            </summary>
            <param name="M">Matrix represented as an array of row arrays (float[rows][cols])</param>
            <param name="c1">Index of the first column</param>
            <param name="c2">Index of the second column</param>
        </member>
        <member name="T:UMapx.Decomposition.UDL">
            <summary>
            Defines UDL decomposition.
            </summary>
            <remarks>
            This is the representation of a symmetric square matrix as the product of three matrices: A = U * D * L, 
            where U is the upper triangular matrix, D is the diagonal matrix, and L is the lower triangular matrix.
            This decomposition is a specific form of Cholesky decomposition.
            </remarks>
        </member>
        <member name="M:UMapx.Decomposition.UDL.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes UDL decomposition.
            </summary>
            <param name="A">Square symmetric matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.UDL.U">
            <summary>
            Returns the top triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.D">
            <summary>
            Returns the diagonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.L">
            <summary>
            Returns the lower triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.UDL.udldecomp(System.Single[0:,0:])">
            <summary>
            UDU* factorization algorithm.
            </summary>
            <param name="a">Matrix</param>
        </member>
        <member name="T:UMapx.Distance.Angular">
            <summary>
            Defines Angular distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Angular.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Angular.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.BrayCurtis">
            <summary>
            Defines Bray-Curtis distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.BrayCurtis.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.BrayCurtis.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Canberra">
            <summary>
            Defines Canberra distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Canberra.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Canberra.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Chebyshev">
            <summary>
            Defines Chebyshev distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Chebyshev.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Chebyshev.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Cosine">
            <summary>
            Defines cosine distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Cosine.#ctor(System.Boolean)">
            <summary>
            Initializes cosine distance.
            </summary>
            <param name="similarity">Use similarity formula or not</param>
        </member>
        <member name="P:UMapx.Distance.Cosine.Similarity">
            <summary>
            Use similarity formula or not.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Cosine.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Vector</param>
            <param name="b">Vector</param>
            <returns>Value; when either vector has zero magnitude, returns 0 if <see cref="P:UMapx.Distance.Cosine.Similarity"/> is true; otherwise returns 1</returns>
        </member>
        <member name="M:UMapx.Distance.Cosine.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Vector</param>
            <param name="b">Vector</param>
            <returns>Value; when either vector has zero magnitude, returns 0 if <see cref="P:UMapx.Distance.Cosine.Similarity"/> is true; otherwise returns 1</returns>
        </member>
        <member name="T:UMapx.Distance.Dice">
            <summary>
            Defines Dice distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Dice.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Dice.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.DistanceBase">
            <summary>
            Defines the base distance class.
            </summary>
        </member>
        <member name="M:UMapx.Distance.DistanceBase.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.DistanceBase.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.DistanceBase.Compute(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns distance values.
            </summary>
            <param name="p">Matrix</param>
            <param name="q">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Distance.DistanceBase.Compute(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns distance values.
            </summary>
            <param name="p">Matrix</param>
            <param name="q">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="T:UMapx.Distance.Euclidean">
            <summary>
            Defines Euclidean distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Euclidean.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Euclidean.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Hellinger">
            <summary>
            Defines Hellinger distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Hellinger.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array of non-negative values</param>
            <param name="q">Array of non-negative values</param>
            <returns>Value</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Distance.Hellinger.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array of complex numbers with non-negative real parts</param>
            <param name="q">Array of complex numbers with non-negative real parts</param>
            <returns>Value</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="T:UMapx.Distance.IDistance">
            <summary>
            Defines the distance interface.
            </summary>
        </member>
        <member name="M:UMapx.Distance.IDistance.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.IDistance.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.IDistance.Compute(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Returns distance values. 
            </summary>
            <param name="p">Matrix</param>
            <param name="q">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="M:UMapx.Distance.IDistance.Compute(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Returns distance values. 
            </summary>
            <param name="p">Matrix</param>
            <param name="q">Matrix</param>
            <returns>Vector</returns>
        </member>
        <member name="T:UMapx.Distance.Jaccard">
            <summary>
            Defines Jaccard distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Jaccard.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Jaccard.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Kulczynski">
            <summary>
            Defines Kulczynski distance.
            See https://en.wikipedia.org/wiki/Kulczynski_dissimilarity.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Kulczynski.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Kulczynski.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Manhattan">
            <summary>
            Defines Manhattan distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Manhattan.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Manhattan.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Minkowski">
            <summary>
            Defines Minkowski distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Minkowski.#ctor(System.Single)">
            <summary>
            Initializes Minkowski distance.
            </summary>
            <param name="order">Order [1, +inf)</param>
        </member>
        <member name="P:UMapx.Distance.Minkowski.Order">
            <summary>
            Gets or sets order [1, +inf).
            </summary>
        </member>
        <member name="M:UMapx.Distance.Minkowski.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Minkowski.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.RusselRao">
            <summary>
            Defines Russel-Rao distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.RusselRao.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.RusselRao.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.SokalMichener">
            <summary>
            Defines Sokal-Michener distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.SokalMichener.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.SokalMichener.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.SokalSneath">
            <summary>
            Defines Sokal-Sneath distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.SokalSneath.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.SokalSneath.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.SquareEuclidean">
            <summary>
            Defines square Euclidean distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.SquareEuclidean.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.SquareEuclidean.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distance.Yule">
            <summary>
            Defines Yule distance.
            </summary>
        </member>
        <member name="M:UMapx.Distance.Yule.Compute(System.Single[],System.Single[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distance.Yule.Compute(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Arcsine">
            <summary>
            Defines the arcsine distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arcsine_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.#ctor">
            <summary>
            Initializes the arcsine distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Bayes">
            <summary>
            Defines the Bayes probability class.
            Input probabilities must have non-zero total mass.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bayes.#ctor(System.Single[],System.Single[])">
            <summary>
            Initializes the Bayes probability class.
            </summary>
            <param name="stat">Array of statistical probabilities</param>
            <param name="prior">An array of a priori probabilities (before experiment)</param>
            <remarks>The total probability mass must be non-zero.</remarks>
        </member>
        <member name="P:UMapx.Distribution.Bayes.General">
            <summary>
            Returns the value of the total probability.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bayes.Probabilities">
            <summary>
            Returns an array of values of posterior probabilities (after the experiment).
            </summary>
        </member>
        <member name="T:UMapx.Distribution.Bernoulli">
            <summary>
            Defines the distribution of Bernoulli.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Bernoulli_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor(System.Single)">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.P">
            <summary>
            Gets or sets the probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Beta">
            <summary>
            Defines the beta distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor">
            <summary>
            Initializes beta distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor(System.Single,System.Single)">
            <summary>
            Initializes beta distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Beta.A">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.B">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mode">
            <summary>
            Gets the mode value. If <c>a ≤ 1</c> and <c>b > 1</c>,
            the mode is at 0. If <c>b ≤ 1</c> and <c>a > 1</c>,
            the mode is at 1. When both parameters are greater than
            one, the mode is calculated as <c>(a - 1) / (a + b - 2)</c>;
            otherwise, the mode is undefined and returns <see cref="F:System.Single.NaN" />.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Beta.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Beta.Distribution(System.Single)">
            <summary>
            Returns the value of the cumulative distribution function.
            Uses the regularized incomplete beta function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
            <example>
            Beta beta = new Beta(2f, 3f);
            float cdf = beta.Distribution(0.5f);
            </example>
        </member>
        <member name="P:UMapx.Distribution.Beta.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.BetaPrime">
            <summary>
            Defines the beta distribution of the second kind.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_prime_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.#ctor(System.Single,System.Single)">
            <summary>
            Initializes beta distribution of the second kind.
            </summary>
            <param name="alpha">Parameter α (0, +inf)</param>
            <param name="beta">Parameter β (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Alpha">
            <summary>
            Gets or sets the value of the parameter α ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Beta">
            <summary>
            Gets or sets the value of the parameter β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Variance">
            <summary>
            Gets the variance value. When <c>β ≤ 2</c>, the variance does not exist (∞).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Binomial">
            <summary>
            Defines the binomial distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Binomial_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor">
            <summary>
            Initializes the binomial distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the binomial distribution.
            </summary>
            <param name="n">Number of experiments (>0)</param>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Binomial.N">
            <summary>
            Gets or sets number of experiments.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.P">
            <summary>
            Gets or sets probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
            <remarks>
            Skewness is undefined when all trials succeed or fail.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.BirnbaumSaunders">
            <summary>
            Defines the Birnbaum-Saunders distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Birnbaum–Saunders_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the Birnbaum-Saunders distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (0, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf)</param>
            <param name="gamma">Shape factor γ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Gamma">
            <summary>
            Gets or sets the form factor γ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Burr">
            <summary>
            Defines the Burr distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Burr_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Burr.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Burr distribution.
            </summary>
            <param name="c">Form parameter c > 0</param>
            <param name="k">Scale parameter k > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Burr.C">
            <summary>
            Gets or sets the value of the scale parameter c > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.K">
            <summary>
            Gets or sets the value of the scale parameter k > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mean">
            <summary>
            Gets the mean value.
            Mean does not exist for k ≤ 1/c.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Burr.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Burr.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Burr.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Cauchy">
            <summary>
            Defines the Cauchy distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cauchy_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
            <param name="gamma">Scale factor (0, + inf)</param>
            <param name="x0">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Gamma">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.X0">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mean">
            <summary>
            Gets the mean value. Undefined for the Cauchy distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Variance">
            <summary>
            Gets the variance value. Undefined for the Cauchy distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.ChiSquare">
            <summary>
            Defines the chi-square distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Chi-squared_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.#ctor(System.Int32)">
            <summary>
            Initializes the chi-square distribution.
            </summary>
            <param name="k">Degrees of freedom (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.K">
            <summary>
            Gets or sets the degrees of freedom (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Median">
            <summary>
            Gets the median value using the Wilson–Hilferty approximation.
            </summary>
            <remarks>
            The approximation is truncated to zero for very small degrees of freedom.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.ChoiWilliams">
            <summary>
            Defines the distribution of Choi Williams.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Choi%E2%80%93Williams_distribution_function
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.#ctor(System.Single)">
            <summary>
            Initializes the Choi-Williams distribution.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Function(System.Single,System.Single)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Value</param>
            <param name="tau">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Distribution(System.Single,System.Single)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Value</param>
            <param name="tau">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.ConeShape">
            <summary>
            Defines the distribution of the conical shape.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cone-shape_distribution_function
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.#ctor(System.Single)">
            <summary>
            Initializes the distribution of the conical shape.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Function(System.Single,System.Single)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Value</param>
            <param name="tau">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Distribution(System.Single,System.Single)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Value</param>
            <param name="tau">Value</param>
            <returns>
            Value. When <paramref name="tau"/> equals zero the method
            returns <c>1</c> for <paramref name="t"/> equal to zero and throws
            <see cref="T:System.ArgumentException"/> otherwise.
            </returns>
        </member>
        <member name="T:UMapx.Distribution.Erlang">
            <summary>
            Defines the distribution of Erlang.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Erlang_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Erlang.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the distribution of Erlang.
            </summary>
            <param name="k">Form parameter k ∈ (0, +inf)</param>
            <param name="lambda">λ-parameter λ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Erlang.K">
            <summary>
            Gets or sets the value of the parameter k ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Lambda">
            <summary>
            Gets or sets the value of the parameter λ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Exponential">
            <summary>
            Defines the exponential distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Exponential_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor">
            <summary>
            Initializes an exponential distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor(System.Single)">
            <summary>
            Initializes an exponential distribution.
            </summary>
            <param name="lambda">Intensity parameter (0, + inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Lambda">
            <summary>
            Gets or sets the value of the intensity parameter (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherSnedecor">
            <summary>
            Defines the Fisher distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/F-distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Fisher distribution.
            </summary>
            <param name="d1">First degree of freedom</param>
            <param name="d2">Second degree of freedom</param>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D1">
            <summary>
            Gets the value of the first degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D2">
            <summary>
            Gets the value of the second degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mean">
            <summary>
            Gets the mean value.
            </summary>
            <remarks>
            The mean exists only for <c>d2 &gt; 2</c>; otherwise,
            <see cref="F:System.Single.PositiveInfinity"/> is returned.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Variance">
            <summary>
            Gets the variance value.
            </summary>
            <remarks>
            The variance is finite only when <c>d2 &gt; 4</c>.
            It becomes <see cref="F:System.Single.PositiveInfinity"/> for
            <c>d2 &lt;= 4</c>; in particular, for <c>d2 &lt;= 2</c> the mean is
            already infinite.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mode">
            <summary>
            Gets the mode value.
            </summary>
            <remarks>
            When <c>d1 ≤ 2</c>, the mode occurs at zero.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherZ">
            <summary>
            Defines the Fisher's Z-distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Fisher%27s_z-distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Fisher Z-distribution.
            </summary>
            <param name="d1">Degree of freedom d1 > 0</param>
            <param name="d2">Degree of freedom d2 > 0</param>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D1">
            <summary>
            Gets or sets the degree of freedom d1 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D2">
            <summary>
            Gets or sets the degree of freedom d2 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <remarks>
            The density is given by:
            f(x; d1, d2) = 2^{-(d1 + d2)/2} · d1^{d1/2} · d2^{d2/2} · e^{d1·x} / (B(d1/2, d2/2) · (d1·e^{2x} + d2)^{(d1 + d2)/2}).
            </remarks>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Gamma">
            <summary>
            Defines the Gamma-distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gamma_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
            <param name="thetta">Parameter θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Thetta">
            <summary>
            Gets or sets the parameter θ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.K">
            <summary>
            Gets or sets the parameter k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Gaussian">
            <summary>
            Defines the Gaussian distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Normal_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Sigma">
            <summary>
            Gets or sets the standard deviation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mu">
            <summary>
            Gets or sets the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Geometric">
            <summary>
            Defines the geometric distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Geometric_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor">
            <summary>
            Initializes the geometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor(System.Single)">
            <summary>
            Initializes the geometric distribution.
            </summary>
            <param name="p">Probability of "success" (0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Geometric.P">
            <summary>
            Gets or sets the probability value of "success" (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Number of failures before the first success</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            When <c>p = 1</c>, the distribution is degenerate and the entropy equals zero.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Gompertz">
            <summary>
            Defines the Gompertz distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gompertz_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.#ctor(System.Single,System.Single)">
             <summary>
            Initializes the Gompertz distribution.
             </summary>
             <param name="eta">Form parameter η > 0</param>
             <param name="b">Scale parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Eta">
            <summary>
            Gets or sets the value of the scale parameter η > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.B">
            <summary>
            Gets or sets the value of the scale parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Gumbel">
            <summary>
            Defines the Gumbel distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gumbel_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Gumbel distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (-inf, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.HyperbolicSecant">
            <summary>
            Defines the hyperbolic secant distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hyperbolic_secant_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.#ctor">
            <summary>
            Initializes the hyperbolic secant distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Variance">
            <summary>
            Gets the variance value.
            </summary>
            <remarks>
            For the standard hyperbolic secant distribution, the variance equals 1.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <remarks>
            This value corresponds to the hyperbolic secant distribution with scale σ = 1.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Hypergeometric">
            <summary>
            Defines the hypergeometric distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
            <param name="n">Parameter N (0, +inf]</param>
            <param name="k">Parameter K [0, N]</param>
            <param name="d">Parameter D [0, N]</param>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.N">
            <summary>
            Gets or sets the value of the parameter N (0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.D">
            <summary>
            Gets or sets the value of the parameter D [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.K">
            <summary>
            Gets or sets the value of the parameter K [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Support">
            <summary>
            Gets the support interval of the argument [max(0, K + D - N), min(D, K)].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.IDistribution">
            <summary>
            Defines the distribution interface.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Kumaraswamy">
            <summary>
            Defines the distribution of Kumaraswamy.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kumaraswamy_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the distribution of Kumaraswamy.
            </summary>
            <param name="a">Form parameter a > 0</param>
            <param name="b">Form parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.A">
            <summary>
            Gets or sets form parameter a > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.B">
            <summary>
            Gets or sets form parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.RawMoment(System.Int32,System.Single,System.Single)">
            <summary>
            Returns the n-th raw moment expressed via the Euler Beta function.
            </summary>
            <remarks>
            Computes <c>b · B(1 + n / a, b)</c>, where <c>B(·,·)</c> is the Euler Beta function.
            The result corresponds to the coefficient of the n-th raw moment <c>E[X^n]</c>.
            <para/>
            Preconditions:
            <list type="bullet">
              <item><description><paramref name="n"/> ≥ 0 (integer).</description></item>
              <item><description><paramref name="a"/> &gt; 0 and <paramref name="b"/> &gt; 0 so that the Beta function is defined.</description></item>
            </list>
            Numerical notes:
            <list type="bullet">
              <item><description>Large <paramref name="n"/> may overflow or lose precision due to Gamma/Beta evaluations.</description></item>
              <item><description>Domain violations (e.g., nonpositive Beta arguments) may yield NaN/Inf from <c>Special.Beta</c>.</description></item>
            </list>
            </remarks>
            <param name="n">Moment order (non-negative integer)</param>
            <param name="a">Shape parameter (must be positive)</param>
            <param name="b">Shape/scale parameter depending on context (must be positive)</param>
            <returns>The value <c>b · B(1 + n / a, b)</c></returns>
        </member>
        <member name="T:UMapx.Distribution.Laplace">
            <summary>
            Defines the Laplace distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor">
            <summary>
            Initializes the Laplace distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Laplace distribution.
            </summary>
            <param name="alfa">Scale factor (0, + inf)</param>
            <param name="beta">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Alfa">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Beta">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Entropy">
            <summary>
            Returns the value of differential entropy H = 1 - ln(a / 2).
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Levy">
            <summary>
            Defines the Levy distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/L%C3%A9vy_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Levy.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Levy distribution.
            </summary>
            <param name="mu">Shear rate μ</param>
            <param name="c">Scale factor (>0)</param>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mu">
            <summary>
            Gets or sets the shift factor.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.C">
            <summary>
            Gets or sets the scale factor (> 0).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Levy.Entropy">
            <summary>
            Gets the value of differential entropy (h = 1 + ln√(2πc)).
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Levy.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Levy.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Logarithmic">
            <summary>
            Defines the logarithmic distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logarithmic_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.#ctor(System.Single)">
            <summary>
            Initializes the logarithmic distribution.
            </summary>
            <param name="p">Parameter (0 &lt; p &lt; 1)</param>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.P">
            <summary>
            Gets or sets the value of the parameter p ∈ (0, 1).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value (x ≥ 1)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Function(System.Single)">
            <summary>
            Returns the value of the probability mass function.
            </summary>
            <param name="x">Value (integer x ≥ 1)</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.LogGaussian">
            <summary>
            Defines the logarithmic Gaussian distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-normal_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation (σ > 0)</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Sigma">
            <summary>
            Gets or sets the standard deviation (σ > 0).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mu">
            <summary>
            Gets or sets the value of the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Logistic">
            <summary>
            Defines the logistic distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logistic_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the logistic distribution.
            </summary>
            <param name="mu">Parameter μ</param>
            <param name="s">Parameter s (0, +inf]</param>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor">
            <summary>
            Initializes the logistic distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mu">
            <summary>
            Gets or sets the value of the parameter μ.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.S">
            <summary>
            Gets or sets the value of the parameter s (0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.LogLogistic">
            <summary>
            Defines the log-logistic distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-logistic_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.A">
            <summary>
            Gets or sets the value of parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.B">
            <summary>
            Gets or sets the value of parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Nakagami">
            <summary>
            Defines the distribution of Nakagami.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Nakagami_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Initialize(System.Single,System.Single)">
            <summary>
            Configures distribution parameters and precomputes constants.
            </summary>
            <param name="mu">Shape factor (μ ≥ 0.5)</param>
            <param name="omega">Spread coefficient</param>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor">
             <summary>
            Initializes the distribution of Nakagami.
             </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the distribution of Nakagami.
            </summary>
            <param name="mu">Shape factor (μ ≥ 0.5)</param>
            <param name="omega">Spread rate</param>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mu">
            <summary>
            Gets or sets the value of the shape factor (μ ≥ 0.5).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Omega">
            <summary>
            Gets or sets the spread coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Entropy">
            <summary>
             Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Pareto">
            <summary>
            Defines the Pareto distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Pareto_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor">
            <summary>
            Initializes the Pareto distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the Pareto distribution.
            </summary>
            <param name="xm">Scale factor θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Xm">
            <summary>
            Gets or sets the scale factor Xm (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.K">
            <summary>
            Gets or sets the scale factor k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Variance">
            <summary>
            Gets the variance value.
            </summary>
            <remarks>
            For k ≤ 2, the variance diverges to infinity.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            Formula: 6 * (k^3 + k^2 - 6k - 2) / (k * (k - 3) * (k - 4))
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Poisson">
            <summary>
            Defines the Poisson distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Poisson_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor">
            <summary>
            Initializes the Poisson distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor(System.Single)">
            <summary>
            Initializes the Poisson distribution.
            </summary>
            <param name="lambda">Parameter λ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Lambda">
            <summary>
            Gets or sets the value of the parameter λ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Median">
            <summary>
            Gets the median value.
            </summary>
            <remarks>
            Uses an approximation valid for λ ≥ 1.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Row(System.Single)">
            <summary>
            Calculate row.
            </summary>
            <param name="l">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Rademacher">
            <summary>
            Defines the Rademacher distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rademacher_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.#ctor">
            <summary>
            Initializes the Rademacher distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.Rayleigh">
            <summary>
            Defines the Rayleigh distribution.
            </summary>
            <remarks>
            The Rayleigh distribution is a continuous probability distribution for non-negative values,
            often used to model the magnitude of a two-dimensional vector with independent Gaussian components.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rayleigh_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor">
            <summary>
            Initializes the Rayleigh distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor(System.Single)">
            <summary>
            Initializes the Rayleigh distribution with a specified scale parameter.
            </summary>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Sigma">
            <summary>
            Gets or sets the value of the scale parameter.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Student">
            <summary>
            Defines the Student's distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Student%27s_t-distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Student.#ctor(System.Single)">
            <summary>
            Initializes the Student's distribution.
            </summary>
            <param name="n">Degrees of freedom n ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Student.N">
            <summary>
            Gets or sets degrees of freedom n ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mean">
            <summary>
            Gets the mean value.
            </summary>
            <remarks>
            For degrees of freedom ≤ 1, the mean is undefined and returns <see cref="F:System.Single.NaN"/>.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Student.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            For degrees of freedom in the interval (2, 4], the excess kurtosis is infinite and
            returns <see cref="F:System.Single.PositiveInfinity"/>. For degrees of freedom ≤ 2, the
            excess kurtosis is undefined and returns <see cref="F:System.Single.NaN"/>.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Student.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Student.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.LogFunction(System.Single)">
            <summary>
            Computes the natural logarithm of the probability density function.
            </summary>
            <param name="x">Input value</param>
            <returns>Logarithm of the density</returns>
        </member>
        <member name="T:UMapx.Distribution.Triangular">
            <summary>
            Defines the triangular distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Triangular_distribution
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor">
            <summary>
            Initializes the triangular distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the triangular distribution.
            </summary>
            <param name="a">Parameter a ∈ (-inf, +inf)</param>
            <param name="b">Parameter b ∈ (-inf, +inf)</param>
            <param name="c">Parameter c ∈ (-inf, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Triangular.A">
            <summary>
            Gets or sets the value of the parameter a ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.B">
            <summary>
            Gets or sets the value of the parameter b ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.C">
            <summary>
            Gets or sets the value of the parameter c ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.Uniform">
            <summary>
            Defines the uniform distribution.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor">
            <summary>
            Initializes the uniform distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the uniform distribution.
            </summary>
            <param name="a">Shift parameter a</param>
            <param name="b">Shift parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Uniform.A">
            <summary>
            Gets or sets the shift parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.B">
            <summary>
            Gets or sets the shift parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Support">
            <summary>
            Gets the support interval of the argument [a, b].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mode">
            <summary>
            Gets the mode value. Since the uniform distribution has no unique mode,
            the value is undefined and represented by <see cref="F:System.Single.NaN"/>.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Excess">
            <summary>
            Gets the excess kurtosis (kurtosis minus 3).
            </summary>
            <remarks>
            Full kurtosis equals 3 plus this value.
            </remarks>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Function(System.Single)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Distribution(System.Single)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Distribution.UQuadratic">
            <summary>
            Defines the U-quadratic distribution.
            </summary>
            Defined only for <c>β &gt; 3</c>. Returns <see cref="F:System.Single.PositiveInfinity"/> when the moment diverges.
            otherwise, <see cref="F:System.Single.PositiveInfinity"/> is returned.
            </remarks>
            Full kurtosis equals 3 plus this value. Defined only for <c>β &gt; 4</c>. Returns
            <see cref="F:System.Single.PositiveInfinity"/> when the moment diverges.
