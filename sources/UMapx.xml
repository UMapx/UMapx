        <member name="M:UMapx.Core.Operator.Kirsch(UMapx.Core.Gradient)">
            Implements the construction of the Kirsch operator [3 x 3].
        <member name="M:UMapx.Imaging.Convolution.Kirsch(UMapx.Core.Gradient)">
            Implements the construction of the Kirsch operator [3 x 3].
            <returns>Double precision floating point number</returns>
            <returns>Value</returns>
            <returns>Value</returns>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Function2D(System.Double,System.Double)">
            <summary>
            Two-dimensional Perlin noise function.
            </summary>
            <param name="x">Value</param>
            <param name="y">Value</param>
            <returns>Value</returns>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mu(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Mean.
            </summary>
            <param name="init">Init</param>
            <param name="end">End</param>
            <param name="h">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Max(System.Int32[])">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Max(System.Int32[],System.Int32@)">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <param name="index">Max index</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Min(System.Int32[])">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Min(System.Int32[],System.Int32@)">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <param name="index">Min index</param>
            <returns>Tuple of integer numbers</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Sum(System.Int32[])">
            <summary>
            Returns the summary of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mean(System.Int32[])">
            <summary>
            Returns the mean of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.StdDev(System.Int32[])">
            <summary>
            Returns the standard deviation of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.StdDev(System.Int32[],System.Single)">
            <summary>
            Returns the standard deviation of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <param name="mean">Mean</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Median(System.Int32[])">
            <summary>
            Returns the median of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.GetRange(System.Int32[],System.Single)">
            <summary>
            Returns range of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <param name="percent">Percent</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Entropy(System.Int32[])">
            <summary>
            Returns entropy of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mode(System.Int32[])">
            <summary>
            Returns mode of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Imaging.StereoAnaglyph">
            <summary>
            Defines the stereo effect filter for a pair of images.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.#ctor(UMapx.Imaging.AnaglyphMode)">
            <summary>
            Initializes the stereo effect filter for a pair of images.
            </summary>
            <param name="algorithm">Algorithm</param>
        </member>
        <member name="P:UMapx.Imaging.StereoAnaglyph.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.StereoDisparity">
            <summary>
            Defines the stereo disparity filter for a pair of images.
            </summary>
            <remarks>
            More information can be found on the website:
            https://docs.opencv.org/master/d3/d14/tutorial_ximgproc_disparity_filtering.html
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.StereoDisparity.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes the stereo disparity filter for a pair of images.
            </summary>
            <param name="disparity">Disparity</param>
            <param name="window">Window size</param>
            <param name="weight">Gradient weight</param>
        </member>
        <member name="P:UMapx.Imaging.StereoDisparity.Disparity">
            <summary>
            Gets or sets disparity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.StereoDisparity.Window">
            <summary>
            Gets or sets window size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.StereoDisparity.Weight">
            <summary>
            Gets or sets weight.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoDisparity.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.StereoDisparity.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.StereoDisparity.DisparityEstimator(System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Estimates a disparity map from stereo image pairs.
            </summary>
            <param name="left">Left image matrix</param>
            <param name="right">Right image matrix</param>
            <param name="win">Window size</param>
            <param name="max_dis">Maximum disparity value</param>
            <param name="weight">Gradient weight</param>
            <param name="apply_median">Apply median filtering or not</param>
            <returns>Disparity matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.StereoDisparity.DisparityEstimator(System.Single[0:,0:][],System.Single[0:,0:][],System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Aggregates matching costs to produce the final disparity map.
            </summary>
            <param name="im_l">Left image stack</param>
            <param name="im_r">Right image stack</param>
            <param name="win">Window size</param>
            <param name="max_dis">Maximum disparity value</param>
            <param name="weight">Gradient weight</param>
            <param name="dim_x">Image width</param>
            <param name="dim_y">Image height</param>
            <param name="dim_z">Number of channels</param>
            <returns>Disparity matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.TemperatureCorrection">
            <summary>
            Defines the temperature correction filter.
            </summary>
            <remarks>
            The filter uses an approximation of the Planck curve.
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the temperature correction filter.
            </summary>
            <param name="temperature">Temperature [1E3K, 1E4K]</param>
            <param name="strength">Strength [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor">
            <summary>
            Initializes the temperature correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TemperatureCorrection.Temperature">
            <summary>
            Gets or sets the temperature [1E3K, 1E4K].
            </summary>
        </member>
        <member name="T:UMapx.Imaging.TensorMatrix">
            <summary>
            Used to work with tensor matrices.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToByteTensor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToByteTensor(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToByteTensor(System.Single[0:,0:][],System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="bmData">Bitmap data in BGR terms</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToFloatTensor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToFloatTensor(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.ToFloatTensor(System.Single[0:,0:][],System.Boolean)">
            <summary>
            Converts a Bitmap to an BGR tensor arrays.
            </summary>
            <param name="bmData">Bitmap data in BGR terms</param>
            <param name="rgb">RGB or BGR</param>
            <returns>RGB tensor arrays</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.FromByteTensor(System.Byte[][],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a BGR tensor arrays to Bitmap.
            </summary>
            <param name="tensor">Tensor arrays</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="rgb">RGB or BGR</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorMatrix.FromFloatTensor(System.Single[][],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a BGR tensor arrays to Bitmap.
            </summary>
            <param name="tensor">Tensor arrays</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="rgb">RGB or BGR</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.TensorTransform">
            <summary>
            Used to edit and transform tensors.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Merge(System.Byte[][],System.Boolean)">
            <summary>
            Merges image tensors to single tensor.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <param name="slice">Slice or not</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Merge(System.Single[][],System.Boolean)">
            <summary>
            Merges image tensors to single tensor.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <param name="slice">Slice or not</param>
            <returns>Float array</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Average(System.Byte[][])">
            <summary>
            Averages image tensors to single tensor.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Average(System.Single[][])">
            <summary>
            Averages image tensors to single tensor.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Compute(System.Single[][],System.Single[],UMapx.Imaging.TensorTransform.ITensorOperator)">
            <summary>
            Implements operator function.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <param name="b">Vector</param>
            <param name="tensorOperator">Operator</param>
        </member>
        <member name="M:UMapx.Imaging.TensorTransform.Compute(System.Single[][],System.Single,UMapx.Imaging.TensorTransform.ITensorOperator)">
            <summary>
            Implements operator function.
            </summary>
            <param name="image">RGB tensor arrays</param>
            <param name="b">Value</param>
            <param name="tensorOperator">Operator</param>
        </member>
        <member name="T:UMapx.Imaging.TensorTransform.ITensorOperator">
            <summary>
            Tensor operator.
            </summary>
            <param name="a">Vector</param>
            <param name="b">Value</param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Imaging.Texturer">
            <summary>
            Defines the texturing filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Single[0:,0:],System.Single)">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
            <param name="depth">Depth [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Texture">
            <summary>
            Gets or sets the texture matrix.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Depth">
            <summary>
            Gets or sets the depth value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Wood(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of a wood texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="rings">Rings</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Textile(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a textile texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Marble(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Implements the construction of a marble texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="yPeriod">Y-period</param>
            <param name="xPeriod">X-period</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Labyrinth(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a labyrinth texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Clouds(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a clouds texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.Threshold">
            <summary>
            Defines the threshold filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor(System.Single,UMapx.Imaging.Space)">
            <summary>
            Initializes the threshold filter.
            </summary>
            <param name="threshold">Threshold [0, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor">
            <summary>
            Initializes the threshold filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Threshold.Value">
            <summary>
            Gets or sets the threshold value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ToneDiffusionDithering">
            <summary>
            Defines the tone diffusion dithering filter.
            </summary>
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="P:UMapx.Imaging.ToneDiffusionDithering.Matrix">
            <summary>
            Gets or sets the tone diffusion dithering matrix. 
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Order(System.Int32)">
            <summary>
            Initializes the order dithering filter.
            </summary>
            <remarks>
            More information can be found on the website:
            http://en.wikipedia.org/wiki/Ordered_dithering
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Random(System.Int32)">
            <summary>
            Initializes the random dithering filter.
            </summary>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Basic">
            <summary>
            Initializes the classic dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Bayer">
            <summary>
            Initializes the Bayer dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="T:UMapx.Imaging.TopHat">
            <summary>
            Defines the top-hat filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.TopHat.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.TransparencyCorrection">
            <summary>
            Defines the transparency correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor(System.Single)">
            <summary>
            Initializes the transparency correction filter.
            </summary>
            <param name="transparency">Transparency [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor">
            <summary>
            Initializes the transparency correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TransparencyCorrection.Transparency">
            <summary>
            Gets or sets the transparency value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.VibranceCorrection">
            <summary>
            Defines the vibrance correction filter (RGB-based).
            </summary>
        </member>
        <member name="M:UMapx.Imaging.VibranceCorrection.#ctor(System.Single)">
            <summary>
            Initializes the vibrance correction filter.
            </summary>
            <param name="vibrance">Vibrance [-100, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.VibranceCorrection.#ctor">
            <summary>
            Initializes the vibrance correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.VibranceCorrection.Vibrance">
            <summary>
            Gets or sets the vibrance value [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.VibranceCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.VibranceCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Water">
            <summary>
            Defines the water filter.
            </summary>
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor(System.Int32)">
            <summary>
            Initializes the water filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor">
            <summary>
            Initializes the water filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Water.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Water.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Wiener">
            <summary>
            Defines the Wiener filter for local noise reduction.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wiener_filter
            </remarks>
        </member>
        <member name="M:UMapx.Imaging.Wiener.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the Wiener filter with square window.
            </summary>
            <param name="radius">Window radius</param>
            <param name="noise">Noise variance</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes the Wiener filter.
            </summary>
            <param name="width">Window width</param>
            <param name="height">Window height</param>
            <param name="noise">Noise variance</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.#ctor(UMapx.Core.SizeInt,System.Single)">
            <summary>
            Initializes the Wiener filter.
            </summary>
            <param name="size">Window size</param>
            <param name="noise">Noise variance</param>
        </member>
        <member name="P:UMapx.Imaging.Wiener.Size">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Wiener.Noise">
            <summary>
            Gets or sets the noise variance.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Wiener.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Wiener.ApplyInternal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Internal apply method.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.YCbCrFilter">
            <summary>
            Defines the YCbCr filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the YCbCr filter.
            </summary>
            <param name="y">Y [-1, 1]</param>
            <param name="cb">Cb [-1, 1]</param>
            <param name="cr">Cr [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor">
            <summary>
            Initializes the YCbCr filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Y">
            <summary>
            Y [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cb">
            <summary>
            Cb [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cr">
            <summary>
            Cr [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.YUVPhotoFilter">
            <summary>
            Defines the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
            <param name="color">Color</param>
            <param name="strength">Strength [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Color">
            <summary>
            Gets or sets the filter color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Strength">
            <summary>
            Gets or sets the filter strength [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.IsGrayColor(System.Drawing.Color)">
            <summary>
            Checks if the color is a shade of gray.
            </summary>
            <param name="color">Color</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.AddColor(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Blend two colors in YUV space.
            </summary>
            <param name="yuv1">First color</param>
            <param name="yuv2">Second color</param>
            <returns>YUV</returns>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Sepia">
            <summary>
            Initializes the sepia filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Orange">
            <summary>
            Initializes the orange filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Yellow">
            <summary>
            Initializes the yellow filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.FIR">
            <summary>
            Defines a filter with a finite impulse response.
            </summary>
            <remarks>
            A filter with a finite impulse response, also called a transversal (FIR) filter, is one type of linear
            digital filter whose impulse response becomes exactly zero after a finite time.
            Such a filter is also called non-recursive due to the lack of feedback.
            The denominator of the transfer function of such a filter is a certain constant.
            </remarks>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor(System.Single[])">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
        </member>
        <member name="P:UMapx.Response.FIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.Reaction(System.Single[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Single[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Single[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Single)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Single)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Response.FIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.IIR">
            <summary>
            Defines a filter with an infinite impulse response.
            </summary>
            <remarks>
            Filter with infinite impulse response (recursive filter, IIR filter or IIR filter) - a linear electronic filter,
            using one or more of its outputs as an input, i.e. forms a feedback. The main property of such filters
            is that their impulse response is of infinite length in the time domain, and the transfer function
            has a fractional rational look.
            </remarks>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor(System.Single[],System.Single[])">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
            <param name="a">Array of feedback coefficients</param>
        </member>
        <member name="P:UMapx.Response.IIR.A">
            <summary>
            Gets or sets the array of feedback coefficients.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.Reaction(System.Single[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Single[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Single[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Single)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Single)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="P:UMapx.Response.IIR.Stability">
            <summary>
            Checks if the specified filter is stable.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.IResponse">
            <summary>
            Defines the general interface of response Filters.
            </summary>
        </member>
        <member name="M:UMapx.Response.IResponse.Reaction(System.Single[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Single[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Single[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Single)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Single)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Transform.BilateralFilter">
            <summary>
            Defines the bilateral filter.
            </summary>
            <remarks>
            Optimized implementation.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Bilateral_filter
            </remarks>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.#ctor(System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes the bilateral filter.
            </summary>
            <param name="radius">Radius (>1)</param>
            <param name="sigma">Range Gaussian sigma (>0)</param>
            <param name="levels">Number of quantization levels for intensity</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.BilateralFilter.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.BilateralFilter.Sigma">
            <summary>
            Gets or sets the value of the range Gaussian sigma (>0).
            </summary>
        </member>
        <member name="P:UMapx.Transform.BilateralFilter.Levels">
            <summary>
            Gets or sets the number of quantization levels for intensity.
            </summary>
        </member>
        <member name="P:UMapx.Transform.BilateralFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Bilateralfilter(System.Single[0:,0:],System.Int32,System.Single,System.Int32)">
            <summary>
            Applies fast bilateral filter.
            </summary>
            <param name="array">Input signal</param>
            <param name="r">Radius</param>
            <param name="s">Range Gaussian sigma</param>
            <param name="samples">Number of quantization levels for intensity</param>
            <returns>Filtered image</returns>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Bilateralfilter(UMapx.Core.Complex32[0:,0:],System.Int32,System.Single,System.Int32)">
            <summary>
            Applies fast bilateral filter.
            </summary>
            <param name="array">Input signal</param>
            <param name="r">Radius</param>
            <param name="s">Range Gaussian sigma</param>
            <param name="samples">Number of quantization levels for intensity</param>
            <returns>Filtered image</returns>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Bilateralfilter(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>
            Applies fast bilateral filter.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Radius</param>
            <param name="s">Range Gaussian sigma</param>
            <param name="samples">Number of quantization levels for intensity</param>
            <returns>Filtered image</returns>
        </member>
        <member name="M:UMapx.Transform.BilateralFilter.Bilateralfilter(UMapx.Core.Complex32[],System.Int32,System.Single,System.Int32)">
            <summary>
            Applies fast bilateral filter.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Radius</param>
            <param name="s">Range Gaussian sigma</param>
            <param name="samples">Number of quantization levels for intensity</param>
            <returns>Filtered image</returns>
        </member>
        <member name="T:UMapx.Transform.BilateralGridFilter">
            <summary>
            Defines the bilateral filter.
            </summary>
            <remarks>
            Fast implementation of the bilateral filter (real-time).
            More information can be found on the website:
            https://www.researchgate.net/publication/220184523_Real-time_edge-aware_image_processing_with_the_bilateral_grid
            </remarks>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the bilateral grid filter.
            </summary>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.BilateralGridFilter.SigmaSpatial">
            <summary>
            Gets or sets the spatial smoothing factor.
            </summary>
        </member>
        <member name="P:UMapx.Transform.BilateralGridFilter.SigmaRange">
            <summary>
            Gets or sets the range smoothing factor.
            </summary>
        </member>
        <member name="P:UMapx.Transform.BilateralGridFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Bilateralgridfilter(System.Single[],System.Single,System.Single)">
            <summary>
            Applies bilateral grid filter.
            </summary>
            <param name="input">Input</param>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Bilateralgridfilter(System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Applies bilateral grid filter.
            </summary>
            <param name="input">Input</param>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Bilateralgridfilter(UMapx.Core.Complex32[],System.Single,System.Single)">
            <summary>
            Applies bilateral grid filter.
            </summary>
            <param name="input">Input</param>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Bilateralgridfilter(UMapx.Core.Complex32[0:,0:],System.Single,System.Single)">
            <summary>
            Applies bilateral grid filter.
            </summary>
            <param name="input">Input</param>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Boxblur2d(System.Single[0:,0:],System.Int32)">
            <summary>
            Implements 2D box blur filter.
            </summary>
            <param name="grid">Grid</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Boxblur3d(System.Single[0:,0:,0:],System.Int32)">
            <summary>
            Implements 3D box blur filter.
            </summary>
            <param name="grid">Grid</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Boxblur2d(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Implements 2D box blur filter.
            </summary>
            <param name="grid">Grid</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BilateralGridFilter.Boxblur3d(UMapx.Core.Complex32[0:,0:,0:],System.Int32)">
            <summary>
            Implements 3D box blur filter.
            </summary>
            <param name="grid">Grid</param>
            <param name="radius">Radius</param>
        </member>
        <member name="T:UMapx.Transform.CosineTransform">
            <summary>
            Defines the cosine transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.CosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.CosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Matrix(System.Int32)">
            <summary>
            Implements the construction of the cosine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Single[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Single[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.DeltaTransform">
            <summary>
            Defines the delta transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Delta_encoding
            </remarks>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the delta transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.DeltaTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(System.Single[])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(System.Single[])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.DomainTransformFilter">
            <summary>
            Defines the domain transform filter.
            </summary>
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://www.inf.ufrgs.br/~eslgastal/DomainTransform/Gastal_Oliveira_SIGGRAPH2011_Domain_Transform.pdf
            </remarks>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.#ctor(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes the domain transform filter.
            </summary>
            <param name="sigma_s">σs</param>
            <param name="sigma_r">σr</param>
            <param name="iterations">Number of iterations</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaS">
            <summary>
            Gets or sets the value of σs.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaR">
            <summary>
            Gets or sets the value of σr.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Iterations">
            <summary>
            Gets or sets the number of iterations.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Domainfilter(System.Single[0:,0:],System.Single,System.Single,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Domainfilter(UMapx.Core.Complex32[0:,0:],System.Single,System.Single,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Domainfilter(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Domainfilter(UMapx.Core.Complex32[],System.Single,System.Single,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf_h(System.Single[0:,0:],System.Single[0:,0:],System.Single)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf_v(System.Single[0:,0:],System.Single[0:,0:],System.Single)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf_h(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf_v(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:],System.Single)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf(System.Single[],System.Single[],System.Single)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Tdrf(UMapx.Core.Complex32[],UMapx.Core.Complex32[],System.Single)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.FastCosineTransform">
            <summary>
            Defines the fast cosine transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the fast cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastCosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Single[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Single[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastFourierTransform">
            <summary>
            Defines the fast Fourier transform using the Cooley-Tukey and Bluestein algorithms.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm
            https://en.wikipedia.org/wiki/Chirp_Z-transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Fourier transform using the Cooley-Tukey and Bluestein algorithms.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Single[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Single[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.BluesteinFFT(UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Fast Fourier transform (Bluestein FFT).
            </summary>
            <param name="data">Array</param>
            <param name="inverse">Inverse or not</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.CooleyTukeyFFT(UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Fast Fourier transform (Cooley-Tukey FFT).
            </summary>
            <param name="data">Array</param>
            <param name="inverse">Inverse or not</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.TransformRadix2(UMapx.Core.Complex32[])">
            <summary>
            Radix-2 forward kernel (no scaling). Assumes length is a power of two.
            </summary>
            <param name="data">Array</param>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.TransformBluestein(UMapx.Core.Complex32[])">
            <summary>
            Bluestein forward kernel (no scaling). Works for arbitrary lengths.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Convolve(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Circular convolution using in-class FFT kernels. Applies final 1/n scaling.
            </summary>
            <param name="xre">X.Re</param>
            <param name="xim">X.Im</param>
            <param name="yre">Y.Re</param>
            <param name="yim">Y.Im</param>
            <param name="ore">O.Re</param>
            <param name="oim">O.Im</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.SwapRealImagInPlace(UMapx.Core.Complex32[])">
            <summary>
            Swaps real and imaginary parts in-place.
            This is equivalent to applying the conjugation trick to switch between forward and inverse.
            </summary>
            <param name="a">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Scale(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Scales a complex vector by a scalar (in-place).
            </summary>
            <param name="a">Array</param>
            <param name="s">Scale param</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.HighestOneBit(System.Int32)">
            <summary>
            Returns the highest one bit of <paramref name="i"/> (as a power-of-two integer).
            </summary>
            <param name="i">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ReverseBits32(System.Int32)">
            <summary>
            Reverses the bits of a 32-bit integer.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.FloorLog2(System.Int32)">
            <summary>
            Returns floor(log2(n)) for n &gt; 0.
            </summary>
            <param name="n">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.CosTable(System.Int32)">
            <summary>
            Half-period cosine table: cos(2πk/n) for k=0..n/2-1.
            </summary>
            <param name="halfN">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.SinTable(System.Int32)">
            <summary>
            Half-period sine table: sin(2πk/n) for k=0..n/2-1.
            </summary>
            <param name="halfN">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ExpCosTable(System.Int32)">
            <summary>
            Chirp cosine table: cos(π i² / n), i=0..n-1 (mod 2n to reduce overflow/rounding).
            </summary>
            <param name="n">Value</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ExpSinTable(System.Int32)">
            <summary>
            Chirp sine table: sin(π i² / n), i=0..n-1 (mod 2n to reduce overflow/rounding).
            </summary>
            <param name="n">Value</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.FastHartleyTransform">
            <summary>
            Defines the fast Hartley transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastHartleyTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Single[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Single[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastHilbertTransform">
            <summary>
            Defines the fast Hilbert transform.
            </summary>
            <remarks>
            NOT RECOMMENDED.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Single[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Single[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastLaplaceTransform">
            <summary>
            Defines the fast Laplace transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.sigma">
            <summary>
            Damping factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.#ctor(System.Single,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Laplace transform.
            </summary>
            <param name="sigma">Damping factor (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Sigma">
            <summary>
            Gets or sets the damping factor (0, 1).
            </summary>
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Single[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Single[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.ApplyLaplaceOperator(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Applies Laplace transform operator.
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.ApplyLaplaceInverseOperator(UMapx.Core.Complex32[],System.Single)">
            <summary>
            Applies inverse Laplace transform operator.
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.FastSineTransform">
            <summary>
            Defines the fast sine transform.
            </summary>
            <remarks>
            NOT RECOMMENDED.
            This algorithm is less effective than the fast cosine transform.
            
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Defines the fast sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastSineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Single[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Single[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastWalshHadamardTransform">
            <summary>
            Defines the fast Walsh-Hadamard transform.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.mathworks.com/matlabcentral/fileexchange/6879-fast-walsh-hadamard-transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Single[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Single[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.FWHT(System.Single[])">
            <summary>
            Fast Walsh-Hadamard transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.FWHT(UMapx.Core.Complex32[])">
            <summary>
            Fast Walsh-Hadamard transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.FourierTransform">
            <summary>
            Defines the Fourier transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Fourier_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Fourier transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Matrix(System.Int32)">
            <summary>
            Implements the construction of the Fourier matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Single[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Single[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FrequencyFilter">
            <summary>
            Defines the frequency filter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FrequencyFilter.FrequencyRange">
            <summary>
            Gets or sets the frequency range.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor">
            <summary>
            Initializes the frequency filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="frequencyRange">Frequency range</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="min">Minimum frequency</param>
            <param name="max">Maximum frequency</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.GaussianPyramidTransform">
            <summary>
            Defines the Gaussian pyramid transform.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="radius">Radius</param>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Single[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Single[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Single[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Upsample(System.Single[0:,0:],System.Int32)">
            <summary>
            Upsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Upsample(System.Single[],System.Int32)">
            <summary>
            Upsample the input signal.
            </summary>
            <param name="u">Array</param>
            <param name="radius">Radius</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Downsample(System.Single[0:,0:],System.Int32)">
            <summary>
            Downsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Downsample(System.Single[],System.Int32)">
            <summary>
            Downsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Add(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Add two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Add(System.Single[],System.Single[])">
            <summary>
            Add two arrays.
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Sub(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Sub two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Sub(System.Single[],System.Single[])">
            <summary>
            Sub two arrays.
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Upsample(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Upsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Upsample(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Upsample the input signal.
            </summary>
            <param name="u">Array</param>
            <param name="radius">Radius</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Downsample(UMapx.Core.Complex32[0:,0:],System.Int32)">
            <summary>
            Downsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Downsample(UMapx.Core.Complex32[],System.Int32)">
            <summary>
            Downsample the input signal.
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Add(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Add two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Add(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Add two arrays.
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Sub(UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Sub two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Sub(UMapx.Core.Complex32[],UMapx.Core.Complex32[])">
            <summary>
            Sub two arrays.
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.GuidedFilter">
            <summary>
            Defines the guided filter.
            </summary>
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://kaiminghe.com/eccv10/index.html
            </remarks>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Initializes the guided filter.
            </summary>
            <param name="radius">Radius (>1)</param>
            <param name="eps">Epsilon (0, 1)</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Eps">
            <summary>
            Gets or sets the value of the epsilon (0, 1).
            </summary>
            <remarks>
            Optimal value ε = 0.025.
            </remarks>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.FromBilateral(System.Int32,System.Single)">
            <summary>
            Creates a guided filter with the specified parameters for a bilateral filter.
            </summary>
            <param name="r">σr</param>
            <param name="s">σs</param>
            <returns>Guided filter</returns>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Guidedfilter(System.Single[0:,0:],System.Int32,System.Single)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Guidedfilter(UMapx.Core.Complex32[0:,0:],System.Int32,System.Single)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Guidedfilter(System.Single[],System.Int32,System.Single)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Guidedfilter(UMapx.Core.Complex32[],System.Int32,System.Single)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="T:UMapx.Transform.HankelTransform">
            <summary>
            Defines the Hankel transform.
            </summary>
            <remarks>
            NOT RECOMMENDED.
            There is no fast O(N log N) algorithm for this transform.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hankel_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.HankelTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.HankelTransform.a">
            <summary>
            Param.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.#ctor(System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes the Hankel transform.
            </summary>
            <param name="a">Param</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HankelTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HankelTransform.A">
            <summary>
            Gets or sets the param of transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Matrix(System.Int32,System.Int32)">
            <summary>
            Implements the construction of the Hankel transform matrix.
            </summary>
            <param name="N">Size</param>
            <param name="a">Param</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.BesselZeroJ(System.Int32,System.Int32)">
            <summary>
            K-th positive zero of J_a (ν = a):
            Start from McMahon’s asymptotic and refine with Newton’s method.
            Do all computations in double for ~1e-12 relative accuracy of zeros.
            </summary>
            <param name="a">Value</param>
            <param name="k">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Forward(System.Single[])">
            <summary>
            Forward Hankel transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Backward(System.Single[])">
            <summary>
            Backward Hankel transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Hankel transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Hankel transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Hankel transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Hankel transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Hankel transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HankelTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Hankel transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.HartleyTransform">
            <summary>
            Defines the Hartley transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Matrix(System.Int32)">
            <summary>
            Implements the construction of the Hartley transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Single[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Single[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.HilbertTransform">
            <summary>
            Defines the Hilbert transform.
            </summary>
            <remarks>
            NOT RECOMMENDED.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.HilbertTransform.DFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.HilbertTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Single[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Single[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.ApplyHilbertOperatorMaskInplace(UMapx.Core.Complex32[])">
            <summary>
            Applies Hilber spectrum operator.
            </summary>
            <param name="F">Array</param>
        </member>
        <member name="T:UMapx.Transform.IFilter">
            <summary>
            Defines the filter interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Transform.IPyramidTransform">
            <summary>
            Defines the pyramid transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Single[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Single[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Single[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.ITransform">
            <summary>
            Defines the transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Single[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Single[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.LaplaceTransform">
            <summary>
            Defines the Laplace transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.sigma">
            <summary>
            Damping factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.#ctor(System.Single,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Laplace transform.
            </summary>
            <param name="sigma">Damping factor (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Sigma">
            <summary>
            Gets or sets the damping factor (0, 1).
            </summary>
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Matrix(System.Int32,System.Single,System.Boolean)">
            <summary>
            Implements the construction of the Laplace matrix.
            </summary>
            <param name="n">Size</param>
            <param name="sigma">Damping factor (0, 1)</param>
            <param name="backward">Return backward transformation matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Single[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Single[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidFilter">
            <summary>
            Defines the Laplace pyramid filter.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.#ctor(UMapx.Transform.LaplacianPyramidTransform,System.Single)">
            <summary>
            Initializes the Laplace pyramid filter.
            </summary>
            <param name="lap">Laplacian pyramid</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.LaplacianPyramid">
            <summary>
            Gets or sets the Laplacian pyramid.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidTransform">
            <summary>
            Defines the Laplacian pyramid transform.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="radius">Radius</param>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidTransform.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Single[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Single[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Single[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Single[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Single[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex32[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="T:UMapx.Transform.LocalLaplacianFilter">
            <summary>
            Defines the local Laplace pyramid filter.
            </summary>
            <remarks>
            More information can be found on the website:
            https://people.csail.mit.edu/sparis/publi/2011/siggraph/
            </remarks>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.sigma">
            <summary>
            Sigma.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.factor">
            <summary>
            Factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.n">
            <summary>
            Number of samples.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.levels">
            <summary>
            Number of levels.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.#ctor(System.Int32,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes the local Laplace pyramid filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="sigma">σ-parameter</param>
            <param name="n">Number of samples</param>
            <param name="levels">Number of levels</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Sigma">
            <summary>
            Gets or sets the value of σ-parameter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Factor">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.N">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Llfilter(System.Single[0:,0:],System.Int32,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="input">Input data</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Llfilter(System.Single[],System.Int32,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="input">Input data</param>
            <param name="radius">Radius</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Single,System.Single,System.Single)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="x">Value</param>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Single,System.Single,System.Int32)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remapping function.
            </summary>
            <param name="x">Value</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Remapping function.
            </summary>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalFilter">
            <summary>
            Defines the multidimensional filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.#ctor(UMapx.Transform.IFilter)">
            <summary>
            Initializes the multidimensional filter.
            </summary>
            <param name="filter">IFilter</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalFilter.Filter">
            <summary>
            Gets or sets filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(System.Single[][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(System.Single[0:,0:][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(UMapx.Core.Complex32[][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalPyramidTransform">
            <summary>
            Defines the multidimensional pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.#ctor(UMapx.Transform.IPyramidTransform)">
            <summary>
            Initializes the multidimensional pyramid transform.
            </summary>
            <param name="transform">IPyramidTransform</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalPyramidTransform.Transform">
            <summary>
            Gets or sets pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(System.Single[][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(System.Single[0:,0:][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(UMapx.Core.Complex32[][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(System.Single[][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(System.Single[0:,0:][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(UMapx.Core.Complex32[][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(UMapx.Core.Complex32[0:,0:][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalTransform">
            <summary>
            Defines the multidimensional transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.#ctor(UMapx.Transform.ITransform)">
            <summary>
            Initializes the multidimensional transform.
            </summary>
            <param name="transform">ITransform</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalTransform.Transform">
            <summary>
            Gets or sets transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(System.Single[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(System.Single[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(UMapx.Core.Complex32[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(System.Single[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(System.Single[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.SineTransform">
            <summary>
            Defines the sine transform.
            </summary>
            <remarks>
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
        </member>
        <member name="F:UMapx.Transform.SineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.SineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Matrix(System.Int32)">
            <summary>
            Implements the construction of the sine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Single[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Single[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.ThresholdFilter">
            <summary>
            Defines the threshold filter.
            </summary>
        </member>
        <member name="F:UMapx.Transform.ThresholdFilter.threshold">
            <summary>
            Threshold value.
            </summary>
        </member>
        <member name="F:UMapx.Transform.ThresholdFilter.type">
            <summary>
            Threshold mode.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.#ctor">
            <summary>
            Initializes the threshold filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.#ctor(System.Single,UMapx.Transform.ThresholdMode)">
            <summary>
            Initializes the threshold filter.
            </summary>
            <param name="threshold">Threshold value</param>
            <param name="mode">Threshold mode</param>
        </member>
        <member name="P:UMapx.Transform.ThresholdFilter.Type">
            <summary>
            Gets or sets the threshold mode.
            </summary>
        </member>
        <member name="P:UMapx.Transform.ThresholdFilter.Threshold">
            <summary>
            Gets or sets the threshold value.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.Apply(System.Single[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.Apply(System.Single[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.ThresholdFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Transform.ThresholdMode">
            <summary>
            Defines the threshold mode.
            </summary>
        </member>
        <member name="F:UMapx.Transform.ThresholdMode.Abs">
            <summary>
            Absolute.
            </summary>
        </member>
        <member name="F:UMapx.Transform.ThresholdMode.Under">
            <summary>
            Under.
            </summary>
        </member>
        <member name="F:UMapx.Transform.ThresholdMode.Over">
            <summary>
            Over.
            </summary>
        </member>
        <member name="T:UMapx.Transform.WalshHadamardTransform">
            <summary>
            Defines the Walsh-Hadamard transform.
            </summary>
            <remarks>
            More information can be found on the website:
            http://kibia.ru/teachers/kreindelin/pdf/2.pdf
            </remarks>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Matrix(System.Int32)">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix.
            </summary>
            <param name="powOf2">Power of 2</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Matrix">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Single[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Single[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Video.ByteArrayUtils">
            <summary>
            Some internal utilities for handling arrays.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.ByteArrayUtils.Compare(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Check if the array contains needle at specified position.
            </summary>
            
            <param name="array">Source array to check for needle</param>
            <param name="needle">Needle we are searching for</param>
            <param name="startIndex">Start index in source array</param>
            
            <returns>Returns <b>true</b> if the source array contains the needle at
            the specified index. Otherwise it returns <b>false</b></returns>
            
        </member>
        <member name="M:UMapx.Video.ByteArrayUtils.Find(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Find subarray in the source array.
            </summary>
            
            <param name="array">Source array to search for needle</param>
            <param name="needle">Needle we are searching for</param>
            <param name="startIndex">Start index in source array</param>
            <param name="sourceLength">Number of bytes in source array, where the needle is searched for</param>
            
            <returns>Returns starting position of the needle if it was found or <b>-1</b> otherwise</returns>
            
        </member>
        <member name="T:UMapx.Video.NewDepthEventHandler">
            <summary>
            New depth event handler.
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="T:UMapx.Video.VideoException">
            <summary>
            Video related exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case of some video related issues, like
            failure of initializing codec, compression, etc.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoException"/> class.
            </summary>
            
            <param name="message">Exception's message</param>
            
        </member>
        <member name="T:UMapx.Video.Boundary">
            <summary>
            Container for MJPEG stream boundaries
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.#ctor">
            <summary>
            Creates an empty boundary for e.g. octet streams
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.#ctor(System.String)">
            <summary>
            Creates instance using a string as boundary for e.g. multipart streams
            </summary>
            <param name="boundary">Boundary string</param>
        </member>
        <member name="P:UMapx.Video.Boundary.Content">
            <summary>
            Boundary string content
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.Length">
            <summary>
            Length of boundary string
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.HasValue">
            <summary>
            True if boundary string length is non-zero
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.IsChecked">
            <summary>
            True if FixMalformedBoundary has been run
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.IsValid">
            <summary>
            True if IsChecked is true and HasValue is true, or if HasValue is false
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.Prepend(System.Char)">
            <summary>
            Adds character before boundary content
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:UMapx.Video.Boundary.FixMalformedBoundary(UMapx.Video.MJPEGStreamParser)">
            <summary>
            Some IP cameras, like AirLink, claim that boundary is "myboundary",
            when it is really "--myboundary". This corrects the issue.
            </summary>
            <param name="streamParser"></param>
        </member>
        <member name="M:UMapx.Video.Boundary.FromResponse(System.Net.WebResponse)">
            <summary>
            Creates boundary from WebResponse
            </summary>
            <param name="response">Source of boundary string</param>
            <returns>Boundary with string content</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.GetBoundaryIndex(System.String)">
            <summary>
            Locates the boundary parameter position in a content type string.
            </summary>
            <param name="contentType">Content type header</param>
            <returns>Index of boundary parameter or -1</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.TrimBoundary(System.String,System.Int32)">
            <summary>
            Extracts and trims the boundary value from a content type string.
            </summary>
            <param name="contentType">Content type header</param>
            <param name="boundaryIndex">Index of the boundary token</param>
            <returns>Parsed boundary instance</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.IsMultipartContent(System.String)">
            <summary>
            Determines whether the content type is multipart/mixed.
            </summary>
            <param name="contentType">Content type header</param>
            <returns><c>true</c> if multipart/mixed; otherwise, false</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.IsOctetStream(System.String)">
            <summary>
            Determines whether the content type is an octet-stream.
            </summary>
            <param name="contentType">Content type header</param>
            <returns><c>true</c> if octet-stream; otherwise, false</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.op_Explicit(UMapx.Video.Boundary)~System.String">
            <summary>
            Converts boundary to string
            </summary>
            <param name="boundary">Boundary string content</param>
        </member>
        <member name="M:UMapx.Video.Boundary.op_Explicit(UMapx.Video.Boundary)~System.Byte[]">
            <summary>
            Converts boundary to byte array
            </summary>
            <param name="boundary">Boundary byte content</param>
        </member>
        <member name="T:UMapx.Video.MJPEGStreamParser">
            <summary>
            Handles functionality related to parsing a MJPEG stream
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.#ctor(UMapx.Video.Boundary,System.Byte[],System.Int32)">
            <summary>
            Creates instance of MJPEG stream parser using a boundary and a JPEG magic header
            </summary>
            <param name="boundary"></param>
            <param name="header"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="P:UMapx.Video.MJPEGStreamParser.Content">
            <summary>
            Content of byte array buffer
            </summary>
        </member>
        <member name="P:UMapx.Video.MJPEGStreamParser.HasFrame">
            <summary>
            True if frame is detected using DetectFrame and not removed using RemoveFrame
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.Add(System.Byte[],System.Int32)">
            <summary>
            Appends new data into the internal buffer.
            </summary>
            <param name="content">Source byte array</param>
            <param name="readBytes">Number of bytes read</param>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.Read(System.IO.Stream)">
            <summary>
            Reads byte content to internal buffer from a stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.EnsurePositionInRange">
            <summary>
            Prevents buffer pointers from exceeding the buffer size.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.DetectFrame">
            <summary>
            Detects if a frame is present in the internal buffer
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.GetFrame">
            <summary>
            Retrieves the frame from the internal buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.RemoveFrame">
            <summary>
            Removes current frame from buffer
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.PositionAtEnd">
            <summary>
            Advances the current position to the end of the buffer content.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.FindHeader">
            <summary>
            Searches for the JPEG frame header within the buffer.
            </summary>
            <returns>Index of the header or -1</returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.FindBoundary">
            <summary>
            Searches for the boundary marker in the buffer.
            </summary>
            <returns>Index of boundary or -1</returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.PositionAtImageEnd">
            <summary>
            Moves the current position to the end of the detected image.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.PositionAfterHeader">
            <summary>
            Advances the current position just after the JPEG header.
            </summary>
        </member>
        <member name="T:UMapx.Video.TimeoutStream">
            <summary>
            Wrapper that enables streams which do not support read and write timeouts to timeout
            Requires .NET 4.5 or above
            Used for .NET Standard 2.0
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of a TimeoutStream wrapper
            </summary>
            <param name="stream">Stream which may not support read or write timeouts</param>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.BaseStream">
            <summary>
            Stream wrapped by TimeoutStream wrapper
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanRead">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanWrite">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.Length">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanTimeout">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.ReadTimeout">
            <summary>
            Value of TimeoutStream's read timeout
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.WriteTimeout">
            <summary>
            Value of TimeoutStream's write timeout
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.Position">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Flush">
            <summary>
            Pass-through method
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from base stream using a timeout
            </summary>
            <param name="buffer">Buffer byte array</param>
            <param name="offset">Offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Pass-through method
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.SetLength(System.Int64)">
            <summary>
            Pass-through method
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to base stream using a timeout
            </summary>
            <param name="buffer">Buffer byte array</param>
            <param name="offset">Offset</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="T:UMapx.Video.IVideoDepthSource">
            <summary>
            Extension interface for handling Intel RealSense depth events.
            </summary>
        </member>
        <member name="E:UMapx.Video.IVideoDepthSource.NewDepth">
            <summary>
            Handler of received frames
            </summary>
        </member>
        <member name="T:UMapx.Video.IVideoSource">
            <summary>
            Video source interface.
            </summary>
            
            <remarks>The interface describes common methods for different type of video sources.</remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>This event is used to notify clients about new available video frame.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, but video source is responsible for
            disposing its own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>The meaning of the property depends on particular video source.
            Depending on video source it may be a file name, URL or any other string
            describing the video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.IVideoSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for video source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.IVideoSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks>Stops video source aborting its thread.</remarks>
            
        </member>
        <member name="T:UMapx.Video.JPEGStream">
            <summary>
            JPEG video source.
            </summary>
            
            <remarks><para>The video source constantly downloads JPEG files from the specified URL.</para>
            
            <para>Sample usage:</para>
            <code>
            // create JPEG video source
            JPEGStream stream = new JPEGStream( "some url" );
            // set NewFrame event handler
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            // signal to stop
            stream.SignalToStop( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.PreventCaching">
            <summary>
            Use or not caching.
            </summary>
            
            <remarks>If the property is set to <b>true</b>, then a fake random parameter will be added
            to URL to prevent caching. It's required for clients, who are behind proxy server.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.FrameInterval">
            <summary>
            Frame interval.
            </summary>
            
            <remarks>The property sets the interval in milliseconds between frames. If the property is
            set to 100, then the desired frame rate will be 10 frames per second. Default value is 0 -
            get new frames as fast as possible.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides JPEG files.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks><para>The property sets timeout value in milliseconds for web requests.</para>
            
            <para>Default value is set <b>10000</b> milliseconds.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.JPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.JPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides JPEG files</param>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.JPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.JPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.JPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.JPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.WorkerThread">
            <summary>
            Thread loop that retrieves JPEG frames from the network stream.
            </summary>
        </member>
        <member name="M:UMapx.Video.JPEGStream.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.JPEGStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.JPEGStream.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Video.MJPEGStream">
            <summary>
            MJPEG video source.
            </summary>
            
            <remarks><para>The video source downloads JPEG images from the specified URL, which represents
            MJPEG stream.</para>
            
            <para>Sample usage:</para>
            <code>
            // create MJPEG video source
            MJPEGStream stream = new MJPEGStream( "some url" );
            // set event handlers
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides MJPEG stream.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.ReloadThread">
            <summary>
            Signals the worker thread to restart the connection.
            </summary>
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.HttpUserAgent">
            <summary>
            User agent to specify in HTTP request header.
            </summary>
            
            <remarks><para>Some IP cameras check what is the requesting user agent and depending
            on it they provide video in different formats or do not provide it at all. The property
            sets the value of user agent string, which is sent to camera in request header.
            </para>
            
            <para>Default value is set to "Mozilla/5.0". If the value is set to <see langword="null"/>,
            the user agent string is not sent in request header.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks>The property sets timeout value in milliseconds for web requests.
            Default value is 10000 milliseconds.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.IsThreadRunning">
            <summary>
            Checks whether the worker thread is active.
            </summary>
            <returns><c>true</c> if running; otherwise, false</returns>
        </member>
        <member name="P:UMapx.Video.MJPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.MJPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.MJPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides MJPEG stream</param>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.MJPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified</exception>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.MJPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.MJPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.MJPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.FreeThreadResources">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.WorkerThread">
            <summary>
            Thread procedure that downloads and parses the MJPEG stream.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.GetResponse">
            <summary>
            Creates and configures the HTTP request and returns its response.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetUserAgent(System.Net.HttpWebRequest)">
            <summary>
            Assigns the User-Agent header if one is specified.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetProxy(System.Net.HttpWebRequest)">
            <summary>
            Assigns the proxy to the request when provided.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetRequestTimeout(System.Net.HttpWebRequest)">
            <summary>
            Applies the timeout value to the web request.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetCredentials(System.Net.HttpWebRequest)">
            <summary>
            Sets network credentials on the request if username and password are specified.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetConnectionGroupName(System.Net.HttpWebRequest)">
            <summary>
            Sets a unique connection group name when using separate connections.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetBasicAuthentication(System.Net.HttpWebRequest)">
            <summary>
            Adds the HTTP Basic authentication header to the request.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.GetResponseStream(System.Net.WebResponse)">
            <summary>
            Retrieves the response stream and wraps it with a timeout stream if required.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SetTimeout(System.IO.Stream)">
            <summary>
            Configures read timeout for the specified stream.
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Video.NewDepthEventArgs">
            <summary>
            Arguments for new depth event from video source.
            </summary>
        </member>
        <member name="M:UMapx.Video.NewDepthEventArgs.#ctor(System.UInt16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.NewDepthEventArgs"/> class.
            </summary>
            
            <param name="depth">New depth</param>
            
        </member>
        <member name="P:UMapx.Video.NewDepthEventArgs.Depth">
            <summary>
            Gets the depth.
            </summary>
        </member>
        <member name="T:UMapx.Video.NewFrameEventArgs">
            <summary>
            Arguments for new frame event from video source.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.NewFrameEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.NewFrameEventArgs"/> class.
            </summary>
            
            <param name="frame">New frame</param>
            
        </member>
        <member name="P:UMapx.Video.NewFrameEventArgs.Frame">
            <summary>
            New frame from video source.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.ReasonToFinishPlaying">
            <summary>
            Reason of finishing video playing.
            </summary>
            
            <remarks><para>When video source class fire the <see cref="E:UMapx.Video.IVideoSource.PlayingFinished"/> event, they
            need to specify reason of finishing video playing. For example, it may be end of stream reached.</para></remarks>
            
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.EndOfStreamReached">
            <summary>
            Video playing has finished because it end was reached.
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.StoppedByUser">
            <summary>
            Video playing has finished because it was stopped by user.
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.DeviceLost">
            <summary>
            Video playing has finished because the device was lost (unplugged).
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.VideoSourceError">
            <summary>
            Video playing has finished because of some error happened the video source (camera, stream, file, etc.).
            A error reporting event usually is fired to provide error information.
            </summary>
        </member>
        <member name="T:UMapx.Video.ScreenCaptureStream">
            <summary>
            Screen capture video source.
            </summary>
            
            <remarks><para>The video source constantly captures the desktop screen.</para>
            
            <para>Sample usage:</para>
            <code>
            // get entire desktop area size
            Rectangle screenArea = Rectangle.Empty;
            foreach ( System.Windows.Forms.Screen screen in 
                      System.Windows.Forms.Screen.AllScreens )
            {
                screenArea = Rectangle.Union( screenArea, screen.Bounds );
            }
                
            // create screen capture video source
            ScreenCaptureStream stream = new ScreenCaptureStream( screenArea );
            
            // set NewFrame event handler
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            
            // start the video source
            stream.Start( );
            
            // ...
            // signal to stop
            stream.SignalToStop( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.Source">
            <summary>
            Video source.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.Region">
            <summary>
            Gets or sets the screen capture region.
            </summary>
            
            <remarks><para>This property specifies which region (rectangle) of the screen to capture. It may cover multiple displays
            if those are available in the system.</para>
            
            <para><note>The property must be set before starting video source to have any effect.</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.FrameInterval">
            <summary>
            Time interval between making screen shots, ms.
            </summary>
            
            <remarks><para>The property specifies time interval in milliseconds between consequent screen captures.
            Expected frame rate of the stream should be approximately 1000/FrameInteval.</para>
            
            <para>If the property is set to 0, then the stream will capture screen as fast as the system allows.</para>
            
            <para>Default value is set to <b>100</b>.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks><para><note>The property is not implemented for this video source and always returns 0.</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.ScreenCaptureStream"/> class.
            </summary>
            
            <param name="region">Screen's rectangle to capture (the rectangle may cover multiple displays)</param>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.#ctor(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.ScreenCaptureStream"/> class.
            </summary>
            
            <param name="region">Screen's rectangle to capture (the rectangle may cover multiple displays)</param>
            <param name="frameInterval">Time interval between making screen shots, ms</param>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.ScreenCaptureStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified</exception>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.ScreenCaptureStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.ScreenCaptureStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.ScreenCaptureStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.WorkerThread">
            <summary>
            Captures frames from the screen in a background thread.
            </summary>
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Video.VideoCapabilities">
            <summary>
             Capabilities of video device such as frame size and frame rate.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoCapabilities.FrameSize">
            <summary>
            Frame size supported by video device.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoCapabilities.AverageFrameRate">
            <summary>
            Average frame rate of video device for corresponding <see cref="P:UMapx.Video.VideoCapabilities.FrameSize">frame size</see>.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoCapabilities.MaximumFrameRate">
            <summary>
            Maximum frame rate of video device for corresponding <see cref="P:UMapx.Video.VideoCapabilities.FrameSize">frame size</see>.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoCapabilities.BitCount">
            <summary>
            Number of bits per pixel provided by the camera.
            </summary>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.#ctor">
            <summary>
            Initializes video capabilities.
            </summary>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.#ctor(System.Drawing.Size,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes video capabilities.
            </summary>
            <param name="frameSize">Frame size</param>
            <param name="averageFrameRate">Average frame rate</param>
            <param name="maximumFrameRate">Maximum frame rate</param>
            <param name="bitCount">Bit count</param>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.Equals(System.Object)">
            <summary>
            Check if the video capability equals to the specified object.
            </summary>
            
            <param name="obj">Object to compare with</param>
            
            <returns>Returns true if both are equal are equal or false otherwise</returns>
            
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.Equals(UMapx.Video.VideoCapabilities)">
            <summary>
            Check if two video capabilities are equal.
            </summary>
            
            <param name="vc2">Second video capability to compare with</param>
            
            <returns>Returns true if both video capabilities are equal or false otherwise</returns>
            
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.GetHashCode">
            <summary>
            Get hash code of the object.
            </summary>
            
            <returns>Returns hash code of the object </returns>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.op_Equality(UMapx.Video.VideoCapabilities,UMapx.Video.VideoCapabilities)">
            <summary>
            Equality operator.
            </summary>
            
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            
            <returns>Return true if both objects are equal or false otherwise</returns>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.op_Inequality(UMapx.Video.VideoCapabilities,UMapx.Video.VideoCapabilities)">
            <summary>
            Inequality operator.
            </summary>
            
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            
            <returns>Return true if both objects are not equal or false otherwise</returns>
        </member>
        <member name="M:UMapx.Video.VideoCapabilities.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="T:UMapx.Video.NewFrameEventHandler">
            <summary>
            Delegate for new frame event handler.
            </summary>
            
            <param name="sender">Sender object</param>
            <param name="eventArgs">Event arguments</param>
            
        </member>
        <member name="T:UMapx.Video.VideoSourceErrorEventHandler">
            <summary>
            Delegate for video source error event handler.
            </summary>
            
            <param name="sender">Sender object</param>
            <param name="eventArgs">Event arguments</param>
            
        </member>
        <member name="T:UMapx.Video.PlayingFinishedEventHandler">
            <summary>
            Delegate for playing finished event handler.
            </summary>
            
            <param name="sender">Sender object</param>
            <param name="reason">Reason of finishing video playing</param>
            
        </member>
        <member name="T:UMapx.Video.VideoImageDepthSource">
            <summary>
            Defines video image depth source.
            </summary>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.#ctor(System.Drawing.Bitmap,System.UInt16[0:,0:])">
            <summary>
            Initializes video image depth source.
            </summary>
            <param name="image">Image</param>
            <param name="depth">Depth</param>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.OnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Elapsed frame timer.
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.OnNewFrame(System.Drawing.Bitmap)">
            <summary>
            Called when video source gets new frame.
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.OnNewDepth(System.UInt16[0:,0:])">
            <summary>
            Called when video source gets new depth.
            </summary>
            <param name="depth">Depth</param>
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.VideoResolution">
            <summary>
            Video resolution to set.
            </summary>
            
            <remarks><para>The property allows to set one of the video resolutions supported by the camera.
            Use <see cref="T:UMapx.Video.VideoCapabilities"/> property to get the list of supported video resolutions.</para>
            
            <para><note>The property must be set before camera is started to make any effect.</note></para>
            
            <para>Default value of the property is set to <see langword="null"/>, which means default video
            resolution is used.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.DepthResolution">
            <summary>
            Depth resolution to set.
            </summary>
            
            <remarks><para>The property allows to set one of the depth resolutions supported by the camera.
            Use <see cref="T:UMapx.Video.VideoCapabilities"/> property to get the list of supported depth resolutions.</para>
            
            <para><note>The property must be set before camera is started to make any effect.</note></para>
            
            <para>Default value of the property is set to <see langword="null"/>, which means default depth
            resolution is used.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.Source">
            <summary>
            Returns video source.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageDepthSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="E:UMapx.Video.VideoImageDepthSource.NewDepth">
            <summary>
            Video depth action event handler.
            </summary>
        </member>
        <member name="E:UMapx.Video.VideoImageDepthSource.NewFrame">
            <summary>
            Video frame action event handler.
            </summary>
        </member>
        <member name="E:UMapx.Video.VideoImageDepthSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.VideoImageDepthSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.VideoImageDepthSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks>Not implemented</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.VideoImageDepthSource.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Video.VideoImageSource">
            <summary>
            Defines video image source.
            </summary>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes video image source.
            </summary>
            <param name="image">Image</param>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.OnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Elapsed frame timer.
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.OnNewFrame(System.Drawing.Bitmap)">
            <summary>
            Called when video source gets new frame.
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="P:UMapx.Video.VideoImageSource.VideoResolution">
            <summary>
            Video resolution to set.
            </summary>
            
            <remarks><para>The property allows to set one of the video resolutions supported by the camera.
            Use <see cref="T:UMapx.Video.VideoCapabilities"/> property to get the list of supported video resolutions.</para>
            
            <para><note>The property must be set before camera is started to make any effect.</note></para>
            
            <para>Default value of the property is set to <see langword="null"/>, which means default video
            resolution is used.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageSource.Source">
            <summary>
            Returns video source.
            </summary>
        </member>
        <member name="P:UMapx.Video.VideoImageSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VideoImageSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="E:UMapx.Video.VideoImageSource.NewFrame">
            <summary>
            Video frame action event handler.
            </summary>
        </member>
        <member name="E:UMapx.Video.VideoImageSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.VideoImageSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.VideoImageSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks>Not implemented</remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoImageSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Video.VideoImageSource.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Video.VideoSourceErrorEventArgs">
            <summary>
            Arguments for video source error event from video source.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VideoSourceErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoSourceErrorEventArgs"/> class.
            </summary>
            <param name="description">Error description</param>
        </member>
        <member name="M:UMapx.Video.VideoSourceErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoSourceErrorEventArgs"/> class.
            </summary>
            
            <param name="description">Error description</param>
            <param name="exception">Error exception</param>
            
        </member>
        <member name="P:UMapx.Video.VideoSourceErrorEventArgs.Description">
            <summary>
            Video source error description.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.VideoSourceErrorEventArgs.Exception">
            <summary>
            Video source exception causing the error
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Figure">
            <summary>
            Defines the figure to plotting in a Cartesian coordinate system.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.#ctor(UMapx.Visualization.FigureStyle)">
            <summary>
            Initializes the figure.
            </summary>
            <param name="style">Figure style</param>
        </member>
        <member name="P:UMapx.Visualization.Figure.LabelX">
            <summary>
            Gets or sets X label.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.LabelY">
            <summary>
            Gets or sets Y label.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Title">
            <summary>
            Gets or sets X title.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Legend">
            <summary>
            Gets or sets the legend.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.RangeX">
            <summary>
            Gets or sets X range [min, max].
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.RangeY">
            <summary>
            Gets or sets Y range [min, max].
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Marks">
            <summary>
            Gets or sets the scale of a range of digital elevations along the X and Y axes.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Scaling">
            <summary>
            Gets or sets the scale factor for the canvas [0.5, 0.8]. 
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.AutoRange">
            <summary>
            Gets or sets property of auto range axes.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.To(System.Drawing.Bitmap)">
            <summary>
            Draw figure to bitmap.
            </summary>
            <param name="bitmap">Bitmap</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.To(System.Drawing.Graphics)">
            <summary>
            Draw figure to graphics object.
            </summary>
            <param name="graphics">Graphics</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Image(System.Drawing.Bitmap)">
            <summary>
            Show image at the figure.
            </summary>
            <param name="bitmap">Bitmap</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Plot(UMapx.Visualization.PlotSeries)">
            <summary>
            Add the plot series to the figure.
            </summary>
            <param name="plotSeries">Plot series</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Clear">
            <summary>
            Remove all plot series from the figure. 
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.DrawLegendMarker(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Drawing.Color,UMapx.Visualization.ShapeType,System.Single)">
            <summary>
            Draws a legend marker (shape/line sample) at the specified position.
            </summary>
            <remarks>
            - Marker appearance depends on <paramref name="type"/>; filled variants use <paramref name="depth"/> as stroke width.<br/>
            - For <see cref="F:UMapx.Visualization.ShapeType.None"/> a short line sample with a small square is drawn.
            </remarks>
            <param name="g">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="cx">Left X pixel of the marker box</param>
            <param name="cy">Vertical center Y pixel of the marker box</param>
            <param name="size">Marker box size (width and height)</param>
            <param name="color">Marker color</param>
            <param name="type">Graph marker type</param>
            <param name="depth">Stroke thickness for outline</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotLine(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color)">
            <summary>
            Plots a polyline through (x, y) using the given stroke.
            </summary>
            <remarks>
            - Invalid or out-of-range points (NaN/Inf/±∞ or clipped by axes) are skipped and break the polyline into segments.<br/>
            - Uses <see cref="M:UMapx.Visualization.Figure.DrawPolylineSkipInvalid(System.Drawing.Graphics,System.Drawing.Pen,System.Single[],System.Single[])"/> for robust rendering.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stroke thickness</param>
            <param name="color">Stroke color</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotCircle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Plots circular markers at (x, y) and connects valid points with a polyline.
            </summary>
            <remarks>
            - Each point is clipped to the current axes; invalid points are skipped.<br/>
            - When <paramref name="fill"/> is true, filled discs are drawn; otherwise only outlines are drawn.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stroke thickness for outlines and connecting line</param>
            <param name="color">Marker and line color</param>
            <param name="radius">Marker diameter in pixels</param>
            <param name="fill">Whether to fill the markers</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotRectangle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Plots square markers at (x, y) and connects valid points with a polyline.
            </summary>
            <remarks>
            - Each point is clipped to the current axes; invalid points are skipped.<br/>
            - When <paramref name="fill"/> is true, filled squares are drawn; otherwise only outlines are drawn.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stroke thickness for outlines and connecting line</param>
            <param name="color">Marker and line color</param>
            <param name="radius">Marker side length in pixels</param>
            <param name="fill">Whether to fill the markers</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.DrawPolylineSkipInvalid(System.Drawing.Graphics,System.Drawing.Pen,System.Single[],System.Single[])">
            <summary>
            Draws a polyline through (x, y) while skipping invalid or clipped points, splitting into segments.
            </summary>
            <remarks>
            - Converts world coordinates to device pixels via <c>Points.X2Point</c> and <c>Points.Y2Point</c>.<br/>
            - Accumulates a segment until an invalid point is encountered, then draws and starts a new segment.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="pen">Pen to draw with</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemLine(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color)">
            <summary>
            Renders a classic stem plot: vertical lines from y = 0 to each data point.
            </summary>
            <remarks>
            - Uses the current Y-axis transform to locate the zero baseline.<br/>
            - Invalid/clipped points are skipped.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stem thickness</param>
            <param name="color">Stem color</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemCircle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Renders a stem plot with circular markers at the stem tips.
            </summary>
            <remarks>
            - Draws each marker (filled or outlined) and a vertical stem to y = 0.<br/>
            - Invalid/clipped points are skipped.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stem/outline thickness</param>
            <param name="color">Marker and stem color</param>
            <param name="radius">Marker diameter in pixels</param>
            <param name="fill">Whether to fill the marker</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemRectangle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Renders a stem plot with square markers at the stem tips.
            </summary>
            <remarks>
            - Draws each marker (filled or outlined) and a vertical stem to y = 0.<br/>
            - Invalid/clipped points are skipped.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stem/outline thickness</param>
            <param name="color">Marker and stem color</param>
            <param name="radius">Marker side length in pixels</param>
            <param name="fill">Whether to fill the marker</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterLine(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color)">
            <summary>
            Draws a polyline for scatter data that should be connected.
            </summary>
            <remarks>
            - Delegates to <see cref="M:UMapx.Visualization.Figure.DrawPolylineSkipInvalid(System.Drawing.Graphics,System.Drawing.Pen,System.Single[],System.Single[])"/> to handle invalid/clipped points.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Stroke thickness</param>
            <param name="color">Stroke color</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterCircle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Draws unconnected circular markers at (x, y).
            </summary>
            <remarks>
            - Invalid/clipped points are skipped. No connecting line is drawn.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Outline thickness when <paramref name="fill"/> is false</param>
            <param name="color">Marker color</param>
            <param name="radius">Marker diameter in pixels</param>
            <param name="fill">Whether to fill the markers</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterRectangle(System.Drawing.Graphics,System.Single[],System.Single[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Draws unconnected square markers at (x, y).
            </summary>
            <remarks>
            - Invalid/clipped points are skipped. No connecting line is drawn.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="x">X data in world coordinates</param>
            <param name="y">Y data in world coordinates</param>
            <param name="depth">Outline thickness when <paramref name="fill"/> is false</param>
            <param name="color">Marker color</param>
            <param name="radius">Marker side length in pixels</param>
            <param name="fill">Whether to fill the markers</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Numerics(System.Drawing.Graphics,System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Renders numeric tick labels for the provided X and Y tick arrays.
            </summary>
            <remarks>
            - Converts world coordinates to device pixels via <c>Points.X2Point</c>/<c>Points.Y2Point</c> and draws
              formatted numbers produced by <see cref="M:UMapx.Visualization.Figure.GetNumString(System.Single)"/>.
            - X labels are drawn below the plot area using the horizontal offset <paramref name="dw"/> and vertical
              offset <paramref name="dh"/>; Y labels are drawn to the left of the plot area, right-aligned to avoid overlap.
            - Singular values (NaN/Inf) are converted to empty strings by <c>GetNumString</c>.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="X">X-axis tick positions in world coordinates</param>
            <param name="Y">Y-axis tick positions in world coordinates</param>
            <param name="dw">Left/right drawable-area offset (margin/padding) in pixels</param>
            <param name="dh">Top/bottom drawable-area offset (margin/padding) in pixels</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Shapes(System.Drawing.Graphics,System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws axis tick marks and an outer border rectangle around the plot area.
            </summary>
            <remarks>
            - For each X tick, draws two short vertical ticks: one at the bottom edge and one at the top edge of the plot area.
            - For each Y tick, draws two short horizontal ticks: one at the left edge and one at the right edge of the plot area.
            - The tick length is derived from the minimum of <paramref name="dx"/> and <paramref name="dy"/> (1/8 of that value).<br/>
            - Finally, draws a 1-pixel border rectangle enclosing the drawable plot area.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="X">X-axis tick positions in world coordinates</param>
            <param name="Y">Y-axis tick positions in world coordinates</param>
            <param name="dx">Horizontal padding/margin in pixels affecting tick sizing</param>
            <param name="dy">Vertical padding/margin in pixels affecting tick sizing</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Grid(System.Drawing.Graphics,System.Single[],System.Single[])">
            <summary>
            Draws the background grid lines for the given X and Y tick arrays using the configured grid style.
            </summary>
            <remarks>
            - Returns immediately if either tick array is empty.<br/>
            - Applies <see cref="P:UMapx.Visualization.Grid.Style"/>: solid, dashed with custom dash/gap lengths, or dotted with rounded caps.<br/>
            - For each X tick draws a full-height vertical grid line; for each Y tick draws a full-width horizontal line.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="X">X-axis tick positions in world coordinates</param>
            <param name="Y">Y-axis tick positions in world coordinates</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Legend(System.Drawing.Graphics)">
            <summary>
            Paints the plot legend box with marker samples and labels for each pane/series.
            </summary>
            <remarks>
            - Computes content size from labels and marker size, positions the box by <see cref="P:UMapx.Visualization.Legend.Anchor"/>.<br/>
            - Applies background opacity and optional border based on legend style settings.
            </remarks>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Title(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the plot title centered at the top inside the drawable area.
            </summary>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="title">Title text</param>
            <param name="sizeX">Total canvas width in pixels</param>
            <param name="sizeY">Total canvas height in pixels</param>
            <param name="dw">Horizontal padding/margin used by the layout</param>
            <param name="dh">Vertical padding/margin used by the layout</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_LabelX(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the X-axis label centered below the plot area.
            </summary>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="xlabel">X-axis label text</param>
            <param name="sizeX">Total canvas width in pixels</param>
            <param name="sizeY">Total canvas height in pixels</param>
            <param name="dw">Horizontal padding/margin used by the layout</param>
            <param name="dh">Vertical padding/margin used by the layout</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_LabelY(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the Y-axis label centered at the left, rotated 90°.
            </summary>
            <param name="graphics">Target <see cref="T:System.Drawing.Graphics"/> surface</param>
            <param name="ylabel">Y-axis label text</param>
            <param name="sizeX">Total canvas width in pixels</param>
            <param name="sizeY">Total canvas height in pixels</param>
            <param name="dw">Horizontal padding/margin used by the layout</param>
            <param name="dh">Vertical padding/margin used by the layout</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.GetNumString(System.Single)">
            <summary>
            Formats a numeric tick/label value with sane defaults for scientific vs fixed notation.
            </summary>
            <remarks>
            - Returns empty string for singular values (NaN/Inf).<br/>
            - Uses scientific notation for large magnitudes (≥ 1e4) or tiny nonzero magnitudes (&lt; 1e-3).<br/>
            - Otherwise prints up to three decimals.
            </remarks>
            <param name="v">Value to format</param>
            <returns>Formatted string for <paramref name="v"/>; empty for singular values</returns>
        </member>
        <member name="T:UMapx.Visualization.FigureStyle">
            <summary>
            Defines the figure style.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.FigureStyle.#ctor">
            <summary>
            Initializes the figure style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorFrame">
            <summary>
            Gets or sets frame color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorBack">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorGrid">
            <summary>
            Gets or sets grid color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorShapes">
            <summary>
            Gets or sets shapes color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorText">
            <summary>
            Gets or sets text color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.ColorMarks">
            <summary>
            Gets or sets marks color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.FontMarks">
            <summary>
            Gets or sets marks font.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.FontText">
            <summary>
            Gets or sets text font.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.DepthShapes">
            <summary>
            Gets or sets shapes depth.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.GridX">
            <summary>
            Gets or sets X grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.GridY">
            <summary>
            Gets or sets Y grid.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.FigureStyle.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Visualization.FigureStyle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Visualization.FigureStyle.Finalize">
            <inheritdoc/>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.MATLAB">
            <summary>
            Returns MATLAB style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.MathCad">
            <summary>
            Returns MathCad style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.MicroCap">
            <summary>
            Returns MicroCap style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Excel">
            <summary>
            Returns Excel style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Standard">
            <summary>
            Returns standard style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Beige">
            <summary>
            Returns beige style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Cyan">
            <summary>
            Returns cyan style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Rose">
            <summary>
            Returns rose style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Coral">
            <summary>
            Returns coral style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.Black">
            <summary>
            Returns black style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.FigureStyle.BlackAndWhite">
            <summary>
            Returns black and white style.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Grid">
            <summary>
            Defines a grid.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Grid.#ctor">
            <summary>
            Initializes the grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Grid.Show">
            <summary>
            Show the grid or not.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Grid.Style">
            <summary>
            Gets or sets grid style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Grid.DashLength">
            <summary>
            Gets or sets grid dash length.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Grid.GapLength">
            <summary>
            Gets or sets grid gap length.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Grid.Shapes">
            <summary>
            Gets or sets shapes.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.GridStyle">
            <summary>
            Defines a grid style.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.GridStyle.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.GridStyle.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.GridStyle.Dot">
            <summary>
            Dot.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Legend">
            <summary>
            Defines a legend.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Legend.#ctor">
            <summary>
            Initializes the legend.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.Show">
            <summary>
            Show the legend panel or not.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.Anchor">
            <summary>
            Gets or sets legend anchor inside the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.Padding">
            <summary>
            Gets or sets outer padding inside canvas (px).
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.MarkerGap">
            <summary>
            Gets or sets spacing between marker and text (px).
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.RowHeight">
            <summary>
            Gets or sets row height for each legend item (px).
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.MarkerSize">
            <summary>
            Gets or sets marker nominal size (px).
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.Opacity">
            <summary>
            Gets or sets background opacity [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Legend.Border">
            <summary>
            Gets or sets draw legend border.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.LegendAnchor">
            <summary>
            Defines the legend anchor type.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.LegendAnchor.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.LegendAnchor.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.LegendAnchor.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.LegendAnchor.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.PaintData">
            <summary>
            Defines paint data.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.PaintData.#ctor">
            <summary>
            Initializes paint data.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PaintData.Title">
            <summary>
            Gets or sets title.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PaintData.Rectangle">
            <summary>
            Gets or sets rectangle.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PaintData.Labels">
            <summary>
            Gets or sets labels.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PaintData.Points">
            <summary>
            Gets or sets points.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Painter">
            <summary>
            Defines inference painter.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.BoxPen">
            <summary>
            Gets or sets box pen.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.PointPen">
            <summary>
            Gets or sets point pen.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.TextFont">
            <summary>
            Gets or sets text font.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.TextColor">
            <summary>
            Gets or sets text color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.Transparency">
            <summary>
            Gets or sets box transparency.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Painter.InsideBox">
            <summary>
            Draw labels inside the box or not.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Painter.#ctor">
            <summary>
            Initializes inference painter.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Painter.Draw(System.Drawing.Graphics,UMapx.Visualization.PaintData[])">
            <summary>
            Draws tracking and recognition results.
            </summary>
            <param name="graphics">Graphics</param>
            <param name="paintData">Paint data</param>
        </member>
        <member name="M:UMapx.Visualization.Painter.Draw(System.Drawing.Graphics,System.String,System.Drawing.Rectangle[])">
            <summary>
            Draws tracking and recognition results.
            </summary>
            <param name="graphics">Graphics</param>
            <param name="title">Title</param>
            <param name="rectangles">Rectangles</param>
        </member>
        <member name="M:UMapx.Visualization.Painter.Draw(System.Drawing.Graphics,System.Drawing.Point[])">
            <summary>
            Draws tracking and recognition results.
            </summary>
            <param name="graphics">Graphics</param>
            <param name="points">Points</param>
        </member>
        <member name="M:UMapx.Visualization.Painter.Draw(System.Drawing.Graphics,System.Drawing.Rectangle[],System.String[][])">
            <summary>
            Draws tracking and recognition results.
            </summary>
            <param name="graphics">GraphicsBitmap</param>
            <param name="rectangles">Rectangles</param>
            <param name="labels">Labels</param>
        </member>
        <member name="M:UMapx.Visualization.Painter.GetLabel(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.String[])">
            <summary>
            Returns label string.
            </summary>
            <param name="g">Graphics</param>
            <param name="font">Font</param>
            <param name="rectangle">Rectangle</param>
            <param name="unit">Unit string</param>
            <returns>String</returns>
        </member>
        <member name="M:UMapx.Visualization.Painter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Visualization.Painter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UMapx.Visualization.Painter.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:UMapx.Visualization.PlotSeries">
            <summary>
            Defines the plot series.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.PlotSeries.#ctor(System.Single[],System.Single[],System.Single,System.Drawing.Color,UMapx.Visualization.SeriesType,UMapx.Visualization.ShapeType,System.String)">
            <summary>
            Initializes the plot series.
            </summary>
            <param name="x">Value</param>
            <param name="y">Function</param>
            <param name="depth">Depth</param>
            <param name="color">Color</param>
            <param name="shapeType">Shape type</param>
            <param name="label">Label</param>
            <param name="seriesType">Series type</param>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.X">
            <summary>
            Gets or sets argument array.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.Y">
            <summary>
            Gets or sets function array.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.Depth">
            <summary>
            Gets or sets depth.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.Color">
            <summary>
            Gets or sets color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.ShapeType">
            <summary>
            Gets or sets shape type.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.Label">
            <summary>
            Gets or sets label.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.PlotSeries.SeriesType">
            <summary>
            Gets or sets series type.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Points">
            <summary>
            Used to work with points.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Points.Point2X(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a horizontal pixel coordinate to the corresponding data-space X value.
            </summary>
            <param name="a">
            Pixel position along X (0 at the left edge, increasing to the right).
            </param>
            <param name="amin">Data-space minimum (left bound) of the X axis</param>
            <param name="amax">Data-space maximum (right bound) of the X axis</param>
            <param name="width">Total drawable width in pixels (must be &gt; 0)</param>
            <returns>
            The data-space value X that corresponds to pixel <paramref name="a"/>.
            </returns>
            <remarks>
            Assumes a linear mapping from pixel space [0, <paramref name="width"/>]
            to data space [<paramref name="amin"/>, <paramref name="amax"/>].
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.Point2Y(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a vertical pixel coordinate to the corresponding data-space Y value.
            </summary>
            <param name="a">
            Pixel position along Y (0 at the top edge, increasing downward — screen coordinates).
            </param>
            <param name="amin">Data-space minimum (bottom bound) of the Y axis</param>
            <param name="amax">Data-space maximum (top bound) of the Y axis</param>
            <param name="height">Total drawable height in pixels (must be &gt; 0)</param>
            <returns>
            The data-space value Y that corresponds to pixel <paramref name="a"/>.
            </returns>
            <remarks>
            Uses an inverted Y axis (top-left origin), common for raster graphics:
            pixel 0 maps to <paramref name="amax"/>, pixel <paramref name="height"/>
            maps to <paramref name="amin"/>.
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.X2Point(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a data-space X value to the corresponding horizontal pixel coordinate.
            </summary>
            <param name="a">Data-space X value to convert</param>
            <param name="amin">Data-space minimum (left bound) of the X axis</param>
            <param name="amax">Data-space maximum (right bound) of the X axis</param>
            <param name="width">Total drawable width in pixels (must be &gt; 0)</param>
            <returns>
            Pixel position along X in the range [0, <paramref name="width"/>].
            </returns>
        </member>
        <member name="M:UMapx.Visualization.Points.Y2Point(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a data-space Y value to the corresponding vertical pixel coordinate.
            </summary>
            <param name="a">Data-space Y value to convert</param>
            <param name="amin">Data-space minimum (bottom bound) of the Y axis</param>
            <param name="amax">Data-space maximum (top bound) of the Y axis</param>
            <param name="height">Total drawable height in pixels (must be &gt; 0)</param>
            <returns>
            Pixel position along Y in the range [0, <paramref name="height"/>],
            where 0 is the top edge.
            </returns>
            <remarks>
            Inverts the Y axis (top-left origin) to match typical screen coordinates.
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.IsSingularPoint(System.Single)">
            <summary>
            Tests whether a scalar value is singular (not a finite real number).
            </summary>
            <param name="a">Value to test</param>
            <returns>
            <see langword="true"/> if <paramref name="a"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.PositiveInfinity"/>, or <see cref="F:System.Single.NegativeInfinity"/>;
            otherwise <see langword="false"/>.
            </returns>
            <remarks>
            This is a convenience wrapper for detecting non-finite values.
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.ClipPoint(System.Single,System.Single,System.Single)">
            <summary>
            Clips a value to a half-open range, returning a sentinel just outside if out of bounds.
            </summary>
            <param name="a">Value to clip</param>
            <param name="amin">Inclusive lower bound</param>
            <param name="amax">Inclusive upper bound</param>
            <returns>
            <para>
            If <paramref name="a"/> is within [<paramref name="amin"/>, <paramref name="amax"/>],
            returns <paramref name="a"/>.
            </para>
            <para>
            If below the range, returns <paramref name="amin"/> - 1; if above, returns
            <paramref name="amax"/> + 1. This sentinel behavior is useful to mark points
            as “just outside” the drawable area without losing ordering information.
            </para>
            </returns>
        </member>
        <member name="M:UMapx.Visualization.Points.GetMin(System.Single[])">
            <summary>
            Returns the minimum finite value in an array, ignoring singular entries.
            </summary>
            <param name="v">Input array</param>
            <returns>
            The minimum finite value if present; otherwise <see langword="null"/> when all
            entries are singular (<see cref="F:System.Single.NaN"/> or infinities) or the array is empty.
            </returns>
            <remarks>
            Singular values are filtered using <c>Maths.IsSingular</c>.
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.GetMax(System.Single[])">
            <summary>
            Returns the maximum finite value in an array, ignoring singular entries.
            </summary>
            <param name="v">Input array</param>
            <returns>
            The maximum finite value if present; otherwise <see langword="null"/> when all
            entries are singular (<see cref="F:System.Single.NaN"/> or infinities) or the array is empty.
            </returns>
            <remarks>
            Singular values are filtered using <c>Maths.IsSingular</c>.
            </remarks>
        </member>
        <member name="M:UMapx.Visualization.Points.GetPoints(System.Single,System.Single,System.Int32)">
            <summary>
            Generates evenly spaced tick marks between <paramref name="min"/> and <paramref name="max"/> (inclusive).
            </summary>
            <param name="min">Lower bound of the axis</param>
            <param name="max">Upper bound of the axis</param>
            <param name="points">
            Number of intervals to split the range into. The resulting array has length <c>points + 1</c>.
            </param>
            <returns>
            An array of size <c>points + 1</c> containing tick values from
            <paramref name="min"/> to <paramref name="max"/> with a uniform step.
            </returns>
            <remarks>
            The step is rounded to 2 decimal places, which may cause the last tick
            to deviate slightly from <paramref name="max"/> for certain ranges.
            </remarks>
        </member>
        <member name="T:UMapx.Visualization.SeriesType">
            <summary>
            Defines the series type.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.SeriesType.Plot">
            <summary>
            Plot.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.SeriesType.Stem">
            <summary>
            Stem.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.SeriesType.Scatter">
            <summary>
            Scatter.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.ShapeType">
            <summary>
            Defines the shape type.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.ShapeType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.ShapeType.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.ShapeType.Ball">
            <summary>
            Ball.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.ShapeType.Rectangle">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.ShapeType.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.ComplexGaussianWavelet">
            <summary>
            Defines the continuous complex Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous complex Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexGaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ComplexMorletWavelet">
            <summary>
            Defines the continuous complex Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.#ctor(System.Single,System.Single)">
            <summary>
            Initializes the continuous complex Morlet wavelet.
            </summary>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fb">
            <summary>
            Gets or sets the bandwidth.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fc">
            <summary>
            Gets or sets the center frequency.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletPack">
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            <summary>
            Defines the discrete wavelet.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL2">
            <summary>
            Returns Battle-Lemarie wavelet (2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL4">
            <summary>
            Returns Battle-Lemarie wavelet (4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL6">
            <summary>
            Returns Battle-Lemarie wavelet (6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Beylkin">
            <summary>
            Returns Beylkin wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior11">
            <summary>
            Returns a biorthogonal wavelet 1.1.
            </summary>
            <remarks>
            Haar wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior13">
            <summary>
            Returns a biorthogonal wavelet 1.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior15">
            <summary>
            Returns a biorthogonal wavelet 1.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior22">
            <summary>
            Returns a biorthogonal wavelet 2.2.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior24">
            <summary>
            Returns a biorthogonal wavelet 2.4.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior26">
            <summary>
            Returns a biorthogonal wavelet 2.6.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior28">
            <summary>
            Returns a biorthogonal wavelet 2.8.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior31">
            <summary>
            Returns a biorthogonal wavelet 3.1.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior33">
            <summary>
            Returns a biorthogonal wavelet 3.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior35">
            <summary>
            Returns a biorthogonal wavelet 3.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior37">
            <summary>
            Returns a biorthogonal wavelet 3.7.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF11">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF13">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF15">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF31">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 3/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF51">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF53">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF55">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF22">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF24">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF26">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF42">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF44">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF46">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF62">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF64">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF66">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF97">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 9/7).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C1">
            <summary>
            Returns wavelet coiflet of 1 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C2">
            <summary>
            Returns wavelet coiflet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C3">
            <summary>
            Returns wavelet coiflet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C4">
            <summary>
            Returns wavelet coiflet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C5">
            <summary>
            Returns wavelet coiflet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D1">
            <summary>
            Returns Daubechies wavelet of 1 order.
            </summary>
            <remarks>
            Haar wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D2">
            <summary>
            Returns Daubechies wavelet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D3">
            <summary>
            Returns Daubechies wavelet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D4">
            <summary>
            Returns Daubechies wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D5">
            <summary>
            Returns Daubechies wavelet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D6">
            <summary>
            Returns Daubechies wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D7">
            <summary>
            Returns Daubechies wavelet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D8">
            <summary>
            Returns Daubechies wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D9">
            <summary>
            Returns Daubechies wavelet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D10">
            <summary>
            Returns Daubechies wavelet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D11">
            <summary>
            Returns Daubechies wavelet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D12">
            <summary>
            Returns Daubechies wavelet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D13">
            <summary>
            Returns Daubechies wavelet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D14">
            <summary>
            Returns Daubechies wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D15">
            <summary>
            Returns Daubechies wavelet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D16">
            <summary>
            Returns Daubechies wavelet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D17">
            <summary>
            Returns Daubechies wavelet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D18">
            <summary>
            Returns Daubechies wavelet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D19">
            <summary>
            Returns Daubechies wavelet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D20">
            <summary>
            Returns Daubechies wavelet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D21">
            <summary>
            Returns Daubechies wavelet of 21 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D22">
            <summary>
            Returns Daubechies wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D23">
            <summary>
            Returns Daubechies wavelet of 23 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D24">
            <summary>
            Returns Daubechies wavelet of 24 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D25">
            <summary>
            Returns Daubechies wavelet of 25 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D26">
            <summary>
            Returns Daubechies wavelet of 26 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D27">
            <summary>
            Returns Daubechies wavelet of 27 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D28">
            <summary>
            Returns Daubechies wavelet of 28 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D29">
            <summary>
            Returns Daubechies wavelet of 29 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D30">
            <summary>
            Returns Daubechies wavelet of 30 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D31">
            <summary>
            Returns Daubechies wavelet of 31 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D32">
            <summary>
            Returns Daubechies wavelet of 32 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D33">
            <summary>
            Returns Daubechies wavelet of 33 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D34">
            <summary>
            Returns Daubechies wavelet of 34 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D35">
            <summary>
            Returns Daubechies wavelet of 35 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D36">
            <summary>
            Returns Daubechies wavelet of 36 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D37">
            <summary>
            Returns Daubechies wavelet of 37 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D38">
            <summary>
            Returns Daubechies wavelet of 38 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp100">
            <summary>
            Returns B-spline wavelet 1-0-0.
            </summary>
            <remarks>
            Haar wavelet (delayed).
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp103">
            <summary>
            Returns B-spline wavelet 1-0-3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp105">
            <summary>
            Returns B-spline wavelet 1-0-5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.FK4">
            <summary>
            Returns the Fejer-Korovkin wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.FK6">
            <summary>
            Returns the Fejer-Korovkin wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.FK8">
            <summary>
            Returns the Fejer-Korovkin wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.FK14">
            <summary>
            Returns the Fejer-Korovkin wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.FK22">
            <summary>
            Returns the Fejer-Korovkin wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ2">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ3">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=8).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ4">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=16).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ5">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=32).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ6">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=64).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.GZ7">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT for N=128).
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GaborZak(System.Int32)">
            <summary>
            Returns a symmetric dyadic Gabor–Zak wavelet filter bank (periodic DWT).
            Total filter length is N = 2^n; the pack contains four N-tap filters
            (analysis low/high and synthesis low/high).
            </summary>
            <param name="n">
            Size parameter (2..7): N = 2^n.
            </param>
            <returns>
            WaveletPack with (h0, h1, g0, g1), each of length N = 2^n.
            </returns>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Haar">
            <summary>
            Returns Haar wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Kravchenko">
            <summary>
            Returns Kravchenko wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L1">
            <summary>
            Returns Legendre wavelet of 1 order.
            </summary>
            <remarks>
            Haar wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L2">
            <summary>
            Returns Legendre wavelet of 2 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L3">
            <summary>
            Returns Legendre wavelet of 3 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L4">
            <summary>
            Returns Legendre wavelet of 4 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L5">
            <summary>
            Returns Legendre wavelet of 5 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L6">
            <summary>
            Returns Legendre wavelet of 6 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L7">
            <summary>
            Returns Legendre wavelet of 7 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L8">
            <summary>
            Returns Legendre wavelet of 8 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L9">
            <summary>
            Returns Legendre wavelet of 9 order.
            </summary>
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Meyer">
            <summary>
            Returns the Meyer wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S1">
            <summary>
            Returns wavelet symlet of 1 order.
            </summary>
            <remarks>
            Haar wavelet.
            </remarks>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S2">
            <summary>
            Returns wavelet symlet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S3">
            <summary>
            Returns wavelet symlet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S4">
            <summary>
            Returns wavelet symlet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S5">
            <summary>
            Returns wavelet symlet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S6">
            <summary>
            Returns wavelet symlet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S7">
            <summary>
            Returns wavelet symlet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S8">
            <summary>
            Returns wavelet symlet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S9">
            <summary>
            Returns wavelet symlet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S10">
            <summary>
            Returns wavelet symlet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S11">
            <summary>
            Returns wavelet symlet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S12">
            <summary>
            Returns wavelet symlet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S13">
            <summary>
            Returns wavelet symlet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S14">
            <summary>
            Returns wavelet symlet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S15">
            <summary>
            Returns wavelet symlet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S16">
            <summary>
            Returns wavelet symlet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S17">
            <summary>
            Returns wavelet symlet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S18">
            <summary>
            Returns wavelet symlet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S19">
            <summary>
            Returns wavelet symlet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S20">
            <summary>
            Returns wavelet symlet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Vaidyanathan">
            <summary>
            Returns Vaidyanathan wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.#ctor(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Initializes the discrete wavelet.
            </summary>
            <param name="lp">Scaling function of forward transform</param>
            <param name="hp">Wavelet function of forward transform</param>
            <param name="ilp">Scaling function of backward transform</param>
            <param name="ihp">Wavelet function of backward transform</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.LowPass">
            <summary>
            Gets or sets the scaling function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.HighPass">
            <summary>
            Gets or sets the wavelet function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.ILowPass">
            <summary>
            Gets or sets the scaling function of backward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.IHighPass">
            <summary>
            Gets or sets the wavelet function of backward transform.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.CQF(System.Single[])">
            <summary>
            Builds the analysis high-pass filter h1 from a real-valued analysis low-pass h0
            using the Conjugate-Quadrature-Filter (CQF) relation:
                h1[n] = (-1)^n * h0[N-1-n].
            For a paraunitary (orthonormal) 2-channel bank this must be combined with a
            properly normalized low-pass (e.g., sum(h0)=√2 and H0(π)=0).
            </summary>
            <param name="v">Scaling function</param>
            <returns>Wavelet function</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Single[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Single[],System.Single[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <param name="wavelet">Wavelet function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.System#ICloneable#Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets information about the object.
            </summary>
            <param name="info">Data needed for serialization and deserialization</param>
            <param name="context">Source and destination of a given stream</param>
        </member>
        <member name="T:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition">
            <summary>
            Defines the edge-avoiding wavelet decomposition.
            </summary>
            <remarks>
            More information can be found on the website:
            https://www.cs.huji.ac.il/w~raananf/projects/eaw/
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes the edge-avoiding wavelet decomposition.
            </summary>
            <param name="sigmaSpatial">Spatial smoothing factor</param>
            <param name="sigmaRange">Range smoothing factor</param>
            <param name="levels">Number of pyramid levels (>=1), including the base level</param>
        </member>
        <member name="P:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.SigmaSpatial">
            <summary>
            Gets or sets the spatial smoothing factor.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.SigmaRange">
            <summary>
            Gets or sets the range smoothing factor.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Levels">
            <summary>
            Gets or sets the number of pyramid levels (>=1), including the base level.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Forward(System.Single[])">
            <summary>
            Decomposes array into base and detail layers.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Backward(System.Single[][])">
            <summary>
            Reconstructs array from base and detail layers.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Forward(System.Single[0:,0:])">
            <summary>
            Decomposes matrix into base and detail layers.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Backward(System.Single[0:,0:][])">
            <summary>
            Reconstructs matrix from base and detail layers.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Forward(UMapx.Core.Complex32[])">
            <summary>
            Decomposes array into base and detail layers.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Reconstructs array from base and detail layers.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Decomposes matrix into base and detail layers.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletDecomposition.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Reconstructs matrix from base and detail layers.
            </summary>
            <param name="input">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Wavelet.EdgeAvoidingWaveletFilter">
            <summary>
            Defines the edge-avoiding wavelet filter.
            </summary>
            <remarks>
            More information can be found on the website:
            https://www.cs.huji.ac.il/w~raananf/projects/eaw/
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletFilter.#ctor(UMapx.Wavelet.EdgeAvoidingWaveletDecomposition,System.Single)">
            <summary>
            Initializes the edge-avoiding wavelet filter.
            </summary>
            <param name="waveletDecomposition">Edge-avoiding wavelet decomposition</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Wavelet.EdgeAvoidingWaveletFilter.WaveletDecomposition">
            <summary>
            Gets or sets edge-avoiding wavelet decomposition.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.EdgeAvoidingWaveletFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletFilter.Apply(System.Single[])">
            <summary>
            Applies edge-avoiding wavelet filter.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletFilter.Apply(System.Single[0:,0:])">
            <summary>
            Applies edge-avoiding wavelet filter.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Applies edge-avoiding wavelet filter.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:UMapx.Wavelet.EdgeAvoidingWaveletFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Applies edge-avoiding wavelet filter.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="T:UMapx.Wavelet.FbspWavelet">
            <summary>
            Defines the continuous complex frequency B-spline wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the continuous complex frequency B-spline wavelet.
            </summary>
            <param name="m">Order</param>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.M">
            <summary>
            Gets or sets the value of the wavelet order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fb">
            <summary>
            Gets or sets the value of the bandwidth parameter.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fc">
            <summary>
            Gets or sets the center frequency value of the wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaborWavelet">
            <summary>
            Defines the continuous complex Gabor wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes the continuous complex Gabor wavelet.
            </summary>
            <param name="x0">Initial value</param>
            <param name="k0">Modulation factor</param>
            <param name="a">Factor</param>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.X0">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.K0">
            <summary>
            Gets or sets the modulation factor.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.A">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.WaveletReal(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaussianWavelet">
            <summary>
            Defines the continuous Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.GaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HaarWavelet">
            <summary>
            Defines the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.#ctor">
            <summary>
            Initializes the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianHatWavelet">
            <summary>
            Defines the continuous Hermitian hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.#ctor">
            <summary>
            Initializes the continuous Hermitian Hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianWavelet">
            <summary>
            Defines the continuous Hermitian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Hermitian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 3]</param>
        </member>
        <member name="P:UMapx.Wavelet.HermitianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 3].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IComplexWavelet">
            <summary>
            Defines the interface for continuous complex wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IFloatWavelet">
            <summary>
            Defines the interface for continuous wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IFloatWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IFloatWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IWaveletTransform">
            <summary>
            Defines the wavelet transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.IWaveletTransform.WaveletDecomposition">
            <summary>
            Gets or sets the discrete wavelet decomposition.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.MexicanHatWavelet">
            <summary>
            Defines the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.#ctor">
            <summary>
            Initializes the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MeyerWavelet">
            <summary>
            Defines the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.#ctor">
            <summary>
            Initializes the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MorletWavelet">
            <summary>
            Defines the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.#ctor">
            <summary>
            Initializes the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.PoissonWavelet">
            <summary>
            Defines the continuous Poisson wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Poisson wavelet.
            </summary>
            <param name="n">Order [1, +inf)</param>
        </member>
        <member name="P:UMapx.Wavelet.PoissonWavelet.N">
            <summary>
            Gets or sets the order [1, +inf).
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ShannonWavelet">
            <summary>
            Defines the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.#ctor">
            <summary>
            Initializes the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Scaling(System.Single)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Wavelet(System.Single)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Value</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletDecomposition">
            <summary>
            Defines a discrete wavelet decomposition.
            </summary>
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_wavelet_transform
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.#ctor(UMapx.Wavelet.WaveletPack,System.Int32,System.Boolean)">
            <summary>
            Initializes a discrete wavelet decomposition.
            </summary>
            <param name="wavelet">Discrete wavelet</param>
            <param name="levels">Number of levels</param>
            <param name="normalized">Normalized transform or not</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletDecomposition.Levels">
            <summary>
            Gets or sets the number of transform levels.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletDecomposition.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletDecomposition.Wavelet">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(System.Single[])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(System.Single[][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(System.Single[0:,0:])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(System.Single[0:,0:][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(UMapx.Core.Complex32[][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(UMapx.Core.Complex32[0:,0:][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.DWT1D(System.Single[],System.Int32,System.Single[])">
            <summary>
            Performs a single-level 1D wavelet <b>analysis</b> (decimation by 2) with periodic boundaries.
            Writes concatenated coefficients into <paramref name="output"/> as <c>[A(0..h-1), D(0..h-1)]</c>,
            where <c>h = bound/2</c>.
            </summary>
            <param name="input">Source samples; only the first <paramref name="bound"/> values are used</param>
            <param name="bound">Working length (must be even). Defines <c>h = bound/2</c></param>
            <param name="output">Destination buffer of length <paramref name="bound"/> receiving A then D</param>
            <remarks>
            Uses circular (periodic) extension by advancing rotating indices instead of using modulo per tap.
            If <see cref="P:UMapx.Wavelet.WaveletDecomposition.Normalized"/> is true, the output bands are scaled by <c>1/√2</c> to match orthonormal energy.
            Complexity: O(bound · (|lp| + |hp|)).
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.IDWT1D(System.Single[],System.Int32,System.Single[])">
            <summary>
            Performs a single-level 1D wavelet <b>synthesis</b> from concatenated bands.
            Reconstructs a signal of length <paramref name="bound"/> from <c>a_d = [A(0..h-1), D(0..h-1)]</c>, <c>h = bound/2</c>.
            </summary>
            <param name="a_d">Input buffer holding A followed by D coefficients</param>
            <param name="bound">Output length (must be even). Defines <c>h = bound/2</c></param>
            <param name="dest">Destination signal of length <paramref name="bound"/></param>
            <remarks>
            Uses odd-phase upsampling (values placed at indices <c>i+1</c>) for both A and D branches to reproduce legacy phasing.
            Circular (periodic) extension is applied during convolution; indices advance by one per output sample.
            If <see cref="P:UMapx.Wavelet.WaveletDecomposition.Normalized"/> is true, the result is scaled by <c>√2</c> (inverse of analysis scaling).
            Complexity: O(bound · (|ilp| + |ihp|)).
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.DWT1D(UMapx.Core.Complex32[],System.Int32,UMapx.Core.Complex32[])">
            <summary>
            Performs a single-level 1D wavelet <b>analysis</b> (decimation by 2) with periodic boundaries.
            Writes concatenated coefficients into <paramref name="output"/> as <c>[A(0..h-1), D(0..h-1)]</c>,
            where <c>h = bound/2</c>.
            </summary>
            <param name="input">Source samples; only the first <paramref name="bound"/> values are used</param>
            <param name="bound">Working length (must be even). Defines <c>h = bound/2</c></param>
            <param name="output">Destination buffer of length <paramref name="bound"/> receiving A then D</param>
            <remarks>
            Uses circular (periodic) extension by advancing rotating indices instead of using modulo per tap.
            If <see cref="P:UMapx.Wavelet.WaveletDecomposition.Normalized"/> is true, the output bands are scaled by <c>1/√2</c> to match orthonormal energy.
            Complexity: O(bound · (|lp| + |hp|)).
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.IDWT1D(UMapx.Core.Complex32[],System.Int32,UMapx.Core.Complex32[])">
            <summary>
            Performs a single-level 1D wavelet <b>synthesis</b> from concatenated bands.
            Reconstructs a signal of length <paramref name="bound"/> from <c>a_d = [A(0..h-1), D(0..h-1)]</c>, <c>h = bound/2</c>.
            </summary>
            <param name="a_d">Input buffer holding A followed by D coefficients</param>
            <param name="bound">Output length (must be even). Defines <c>h = bound/2</c></param>
            <param name="dest">Destination signal of length <paramref name="bound"/></param>
            <remarks>
            Uses odd-phase upsampling (values placed at indices <c>i+1</c>) for both A and D branches to reproduce legacy phasing.
            Circular (periodic) extension is applied during convolution; indices advance by one per output sample.
            If <see cref="P:UMapx.Wavelet.WaveletDecomposition.Normalized"/> is true, the result is scaled by <c>√2</c> (inverse of analysis scaling).
            Complexity: O(bound · (|ilp| + |ihp|)).
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.ModBound(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="j"/> wrapped into the range <c>[0, n)</c>.
            </summary>
            <param name="j">Index (may be negative or ≥ <paramref name="n"/>)</param>
            <param name="n">Modulus (&gt; 0)</param>
            <returns>Value in <c>[0, n)</c> equivalent to <paramref name="j"/> modulo <paramref name="n"/></returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletFilter">
            <summary>
            Defines the wavelet filter.
            </summary>
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            It is recommended to use Coiflets (C1, C2, C3, C4 and C5).
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.#ctor(UMapx.Wavelet.WaveletDecomposition,System.Single)">
            <summary>
            Initializes the wavelet filter.
            </summary>
            <param name="waveletDecomposition">Discrete wavelet decomposition</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.WaveletDecomposition">
            <summary>
            Gets or sets the discrete wavelet transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.Factor">
            <summary>
            Gets or sets the factor value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Single[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Single[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex32[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Wavelet.WaveletTransform">
            <summary>
            Defines a discrete wavelet transform.
            </summary>
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_wavelet_transform
            </remarks>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.#ctor(UMapx.Wavelet.WaveletDecomposition)">
            <summary>
            Initializes the discrete wavelet transform.
            </summary>
            <param name="waveletDecomposition">Discrete wavelet decomposition</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.WaveletDecomposition">
            <summary>
            Gets or sets the discrete wavelet decomposition.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Single[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Single[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.BartlettHann">
            <summary>
            Defines the Bartlett-Hann window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BartlettHann.#ctor(System.Int32)">
            <summary>
            Initializes the Bartlett-Hann window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BartlettHann.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.BartlettHann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Blackman">
            <summary>
            Defines the Blackman window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Blackman.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Blackman.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Blackman.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanHarris">
            <summary>
            Defines the Blackman-Harris window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Harris window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanNuttall">
            <summary>
            Defines the Blackman-Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Confined">
            <summary>
            Defines the closed Gaussian window.
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the closed Gaussian window.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (0.14 * N)</param>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32)">
            <summary>
            Initializes a Gaussian window function closed.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="P:UMapx.Window.Confined.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Confined.G(System.Single)">
            <summary>
            Function G(x).
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Confined.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Cosine">
            <summary>
            Defines the cosine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Cosine.#ctor(System.Int32)">
            <summary>
            Initializes the cosine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Cosine.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.Cosinefunc(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Factor</returns>
        </member>
        <member name="T:UMapx.Window.FastRealWeylHeisenbergTransform">
            <summary>
            Defines fast real Weyl-Heisenberg transform.
            </summary>
            <remarks>
            The class represents a computationally efficient implementation of one-dimensional and two-dimensional discrete real orthogonal
            Weyl-Heisenberg transforms. This implementation was designed and developed by Valery Asiryan, Yerevan, Armenia (2025).
            </remarks>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes fast real Weyl-Heisenberg transform.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N/4]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Forward(System.Single[])">
            <summary>
            Forward real Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Backward(System.Single[])">
            <summary>
            Backward real Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward real Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward real Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward real Weyl-Heisenberg transform for complex input.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward real Weyl-Heisenberg transform for complex input.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward real Weyl-Heisenberg transform for complex matrices.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastRealWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward real Weyl-Heisenberg transform for complex matrices.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.FastShortTimeFourierTransform">
            <summary>
            Defines fast short-time Fourier transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes fast short-time Fourier transform.
            </summary>
            <param name="function">Window function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Single[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Single[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.FastWeylHeisenbergTransform">
            <summary>
            Defines fast Weyl-Heisenberg transform.
            </summary>
            <remarks>
            The class represents a computationally efficient implementation of one-dimensional and two-dimensional discrete orthogonal
            Weyl-Heisenberg transforms. This implementation was designed and developed by Valery Asiryan, Yerevan, Armenia (2025).
            </remarks>
            <summary>
            Defines fast Weyl-Heisenberg transform.
            </summary>
            <remarks>
            The class represents a computationally efficient implementation of one-dimensional and two-dimensional discrete orthogonal
            Weyl-Heisenberg transforms. This implementation was designed and developed by Valery Asiryan, Yerevan, Armenia (2025).
            </remarks>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.FWHT(UMapx.Core.Complex32[],UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache)">
             <summary>
             Forward fast Weyl–Heisenberg transform (2-channel packing, length = 2N).
             
             Input:
               A ∈ ℂ^N,  N = M * L,  M is even.
             
             Output:
               B ∈ ℂ^{2N}, split as:
                 B_main[u] = B[u + 0],   u = l*M + k
                 B_half[u] = B[u + N],   u = l*M + k
            
             This matches the column-wise “slow” matrix reference G ∈ ℂ^{N×2N} with columns:
               main:   g[i] * exp( j*2π*k/M * (n - M/4) )
               half: j*g[j] * exp( j*2π*k/M * (n - M/4) )
            
             Analysis (i.e., G^H A) realized via:
               - polyphase split over residue n0 (mod M) and FFT_L along r,
               - frequency-domain correlations with conj(S_hat/T_hat),
               - carry-phase compensation for the half branch when (n0 + M/2) wraps,
               - DFT_M over n0 (via forward FFT over n0) + quarter-phase e^{+jπk/2},
               - normalization gain = √M / √N = 1 / (2√L).
            
             Notes:
               Caches C.S_hat, C.T_hat must be built from the SAME orthonormalized window
               as used by the slow matrix builder, otherwise values will differ by window scaling.
             </summary>
             <param name="A">Input signal (length N)</param>
             <param name="C">Polyphase cache (built for N,M,window)</param>
             <returns>B of length 2N: main (0..N-1) and half (N..2N-1) branches</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.IFWHT(UMapx.Core.Complex32[],UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache)">
             <summary>
             Inverse fast Weyl–Heisenberg transform (2-channel input, length = 2N).
            
             Input:
               B ∈ ℂ^{2N}, split as:
                 B_main[u] = B[u + 0],   u = l*M + k
                 B_half[u] = B[u + N],   u = l*M + k
            
             This inverts the forward packing:
               forward: B_main =  P * gain
                        B_half = (-j) Q * gain
               where gain = √M / √N = 1 / (2√L).
            
             Inverse mapping:
               P =      B_main / gain
               Q =  j * B_half / gain
            
             Then we undo the quarter-phase e^{+jπk/2}, invert the DFT over n₀,
             apply the adjoint of the frequency-domain correlations, and finally
             invert the polyphase FFT over r to reconstruct A.
             </summary>
             <param name="B">Input coefficients of length 2N (main first, then half)</param>
             <param name="C">Polyphase cache (built for N, M, window)</param>
             <returns>Reconstructed signal A of length N</returns>
        </member>
        <member name="T:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache">
            <summary>
            Defines the polyphase cache for the fast Weyl–Heisenberg transform.
            <para>
            This cache stores precomputed FFTs of the polyphase components of the
            orthogonalized analysis window. It is used in both forward and backward
            transforms to avoid recomputing window-related data for each call.
            </para>
            <para>
            Parameters:
            <list type="bullet">
            <item><description><see cref="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.N"/> – total signal length</description></item>
            <item><description><see cref="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.M"/> – number of frequency shifts (must be even)</description></item>
            <item><description><see cref="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.L"/> – number of time shifts, L = N / M</description></item>
            <item><description><see cref="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.S_hat"/> – FFT<sub>L</sub> of the main polyphase branch
            s<sub>n0</sub>[r] = g[r*M + n0], dimensions [M, L]</description></item>
            <item><description><see cref="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.T_hat"/> – FFT<sub>L</sub> of the half-shifted polyphase branch
            t<sub>n0</sub>[r] = g[r*M + (n0 + M/2) mod M], dimensions [M, L]</description></item>
            </list>
            </para>
            </summary>
            <remarks>
            The cache is specific to a given combination of (N, M, window function).
            If the window changes, the cache must be rebuilt.
            </remarks>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.N">
            <summary>
            Total signal length.
            </summary>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.M">
            <summary>
            Number of frequency shifts (must be even).
            </summary>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.L">
            <summary>
            Number of time shifts (L = N / M).
            </summary>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.S_hat">
            <summary>
            FFT<sub>L</sub> of the main branch polyphase components [M, L].
            </summary>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.T_hat">
            <summary>
            FFT<sub>L</sub> of the half-shifted branch polyphase components [M, L].
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.#ctor(System.Int32,System.Int32,System.Int32,UMapx.Core.Complex32[0:,0:],UMapx.Core.Complex32[0:,0:])">
            <summary>
            Creates a new instance of the polyphase cache.
            </summary>
            <param name="N">Total signal length</param>
            <param name="M">Number of frequency shifts</param>
            <param name="L">Number of time shifts</param>
            <param name="S">FFT of the main branch polyphase components</param>
            <param name="T">FFT of the half-shifted branch polyphase components</param>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.PolyphaseCache.Build(System.Int32,System.Int32,UMapx.Window.IWindow)">
            <summary>
            Precomputes FFT_L of the polyphase components of the orthogonalized window.
            These cached arrays S_hat and T_hat are used in both Forward() and Backward()
            to avoid recomputing window FFTs for every transform call.
            </summary>
            <param name="N">Total signal length</param>
            <param name="Mloc">Number of frequency shifts M (must be even)</param>
            <param name="window">Windows function</param>
            <returns>Polyphase cache</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.PhasePlusPiOver2(System.Int32)">
            <summary>
            Returns the complex phase factor e^{+j * π * k / 2}.
            This term is 4-periodic in k and takes only four distinct values: 1, +j, −1, −j.
            
            Context:
            • Quarter-period phase factors appear in WH transforms, DFT twiddle factors,
              and modulation/demodulation stages.
            • In the Weyl–Heisenberg transform, this multiplier is used during n₀→k assembly
              with a positive-exponent DFT to align phases with the matrix reference.
            
            Relationship:
              PhasePlusPiOver2(k) = conj(PhaseMinusPiOver2(k)).
            
            Mapping (k mod 4):
              0 →  1   (  0°)
              1 → +j   (+90°)
              2 → −1   (180°)
              3 → −j   (−90°)
            </summary>
            <param name="k">Frequency index (integer)</param>
            <returns>Complex value of e^{+j * π * k / 2}</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.FFT(UMapx.Core.Complex32[],System.Boolean)">
            <summary>
            Fast Fourier transform.
            </summary>
            <param name="a">Input</param>
            <param name="inverse">Inverse or not</param>
        </member>
        <member name="F:UMapx.Window.FastWeylHeisenbergTransform.fastFourierTransform">
            <summary>
            UMapx fast Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes fast Weyl-Heisenberg transform.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N/2]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.FastZakTransform">
            <summary>
            Defines the fast Zak transform.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.#ctor(System.Int32)">
            <summary>
            Initializes the fast Zak transform.
            </summary>
            <param name="m">Number of frequency shifts [4, N/2]</param>
        </member>
        <member name="P:UMapx.Window.FastZakTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N/2].
            </summary>
            <remarks>
            Even number.
            </remarks>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.Forward(System.Single[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="matrix">Matrix</param>
            <returns>Array</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.Orthogonalize(System.Single[])">
            <summary>
            Zak orthogonalization.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastZakTransform.Orthogonalize(UMapx.Core.Complex32[])">
            <summary>
            Zak orthogonalization.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.FlatTop">
            <summary>
            Defines the "Flat-Top" window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FlatTop.#ctor(System.Int32)">
            <summary>
            Initializes the "Flat-Top" window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.FlatTop.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.FlatTop.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Gabor">
            <summary>
            Defines the Gabor window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the Gabor window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Window.Gabor.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Gabor.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Gabor.Scaled(System.Int32)">
            <summary>
            Returns Gabor window function defined without sigma. Scaled function version.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Gabor window function</returns>
        </member>
        <member name="T:UMapx.Window.Hamming">
            <summary>
            Defines the Hamming window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Hamming.#ctor(System.Int32)">
            <summary>
            Initializes the Hamming window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hamming.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Hamming.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Hann">
            <summary>
            Defines the Hann window function (Hanning).
            </summary>
        </member>
        <member name="M:UMapx.Window.Hann.#ctor(System.Int32)">
            <summary>
            Initializes the Hann window function (Hanning).
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hann.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Hann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindow">
            <summary>
            Defines the interface of window functions.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindow.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Single)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Single[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Single[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindowTransform">
            <summary>
            Defines the general window transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindowTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="T:UMapx.Window.IZakTransform">
            <summary>
            Defines the Zak transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Window.IZakTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.IZakTransform.Forward(System.Single[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.IZakTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="matrix">Matrix</param>
            <returns>Array</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="T:UMapx.Window.Kaiser">
            <summary>
            Defines the Kaiser window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the Kaiser window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter</param>
        </member>
        <member name="P:UMapx.Window.Kaiser.A">
            <summary>
            Gets or sets the value of the form parameter.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Kaiser.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Lanczos">
            <summary>
            Defines the Lanczos window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Lanczos.#ctor(System.Int32)">
            <summary>
            Initializes the Lanczos window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Lanczos.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Lanczos.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Normal">
            <summary>
            Defines a generalized window normal function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a generalized window normal function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (>0)</param>
            <param name="pow">Power<remarks>For p = 2 - Gaussian window</remarks></param>
        </member>
        <member name="P:UMapx.Window.Normal.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="P:UMapx.Window.Normal.Pow">
            <summary>
            Power.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Normal.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Nuttall">
            <summary>
            Defines the Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Nuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Nuttall.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Nuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Parzen">
            <summary>
            Defines the Parzen window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Parzen.#ctor(System.Int32)">
            <summary>
            Initializes the Parzen window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Parzen.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Parzen.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Planck">
            <summary>
            Defines the window function of Planck.
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the Planck window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 0.5]</param>
        </member>
        <member name="P:UMapx.Window.Planck.A">
            <summary>
            Gets or sets the value of the form parameter [0, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.Z(System.Single,System.Boolean,System.Int32)">
            <summary>
            Function Z+-(x, a).
            </summary>
            <param name="x">Value</param>
            <param name="p">Sign</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Planck.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Planck.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.RealWeylHeisenbergTransform">
            <summary>
            Defines a group of real orthogonal bases and discrete Weyl-Heisenberg transforms.
            </summary>
            <remarks>
            More information can be found on the website:
            https://ieeexplore.ieee.org/document/8711969/
            </remarks>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes a group of real orthogonal bases and Weyl-Heisenberg transformations.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N/4]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Matrix(System.Single[],System.Int32)">
            <summary>
            Returns the real Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [2N, 2N], where N = M * L.
            </remarks>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts [4, N/4]</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Matrix(UMapx.Window.IWindow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the real Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [2N, 2N], where N = M * L.
            </remarks>
            <param name="window">Windows function</param>
            <param name="N">Number of samples</param>
            <param name="M">Number of frequency shifts [4, N/4]</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Matrix(System.Single[],System.Int32,System.Boolean)">
            <summary>
            Returns the real Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [2N, 2N], where N = M * L.
            </remarks>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts [4, N/4]</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Forward(System.Single[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Backward(System.Single[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.RealWeylHeisenbergTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.ShortTimeFourierTransform">
            <summary>
            Defines short-time Fourier transform.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes short-time Fourier transform.
            </summary>
            <param name="function">Window function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Single[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Single[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.Sine">
            <summary>
            Defines the sine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Sine.#ctor(System.Int32)">
            <summary>
            Initializes the sine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Sine.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Sine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Sine.Sinefunc(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Window.Tukey">
            <summary>
            Defines the window function of Tukey.
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes the Tukey window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 1]</param>
        </member>
        <member name="P:UMapx.Window.Tukey.A">
            <summary>
            Gets or sets the value of the form parameter [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Tukey.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Welch">
            <summary>
            Defines the Welch window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Welch.#ctor(System.Int32)">
            <summary>
            Initializes the Welch window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Welch.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.Welch.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.WeylHeisenbergTransform">
            <summary>
            Defines a group of orthogonal bases and discrete Weyl-Heisenberg transforms.
            </summary>
            <remarks>
            More information can be found on the website:
            https://ieeexplore.ieee.org/document/8711969/
            </remarks>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.window">
            <summary>
            Windows function.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.m">
            <summary>
            Number of frequency shifts.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes a group of orthogonal bases and Weyl-Heisenberg transformations.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N/2]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(System.Single[],System.Int32)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [N, 2N], where N = M * L.
            </remarks>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(UMapx.Window.IWindow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [N, 2N], where N = M * L.
            </remarks>
            <param name="window">Windows function</param>
            <param name="N">Number of samples</param>
            <param name="M">Number of frequency shifts [4, N/2]</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(System.Single[],System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            </summary>
            <remarks>
            Matrix dimension [N, 2N], where N = M * L.
            </remarks>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts [4, N/2]</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Packet(UMapx.Window.IWindow,System.Int32)">
            <summary>
            Returns a vector of window function values.
            </summary>
            <param name="window">Windows function</param>
            <param name="length">Number of samples</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex32[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Single[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Single[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Single[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Single[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.WindowBase">
            <summary>
            Defines the class for window functions.
            </summary>
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Window_function
            </remarks>
        </member>
        <member name="F:UMapx.Window.WindowBase.frameSize">
            <summary>
            Window size.
            </summary>
        </member>
        <member name="P:UMapx.Window.WindowBase.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Single)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Single[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Single[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Single,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Value</param>
            <param name="frameSize">Window size</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.ZakTransform">
            <summary>
            Defines the Zak transform.
            </summary>
        </member>
        <member name="M:UMapx.Window.ZakTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Zak transform.
            </summary>
            <param name="m">Number of frequency shifts [4, N/2]</param>
        </member>
        <member name="P:UMapx.Window.ZakTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N/2].
            </summary>
            <remarks>
            Even number.
            </remarks>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(UMapx.Core.Complex32[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(System.Single[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="input">Array</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Backward(UMapx.Core.Complex32[0:,0:])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="matrix">Matrix</param>
            <returns>Array</returns>
            <exception cref="T:System.ArgumentException">Exception</exception>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Orthogonalize(System.Single[])">
            <summary>
            Zak orthogonalization.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Orthogonalize(UMapx.Core.Complex32[])">
            <summary>
            Zak orthogonalization.
            </summary>
            <param name="input">Array</param>
            <returns>Array</returns>
        </member>
    </members>
</doc>
